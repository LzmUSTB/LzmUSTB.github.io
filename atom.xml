<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Distant Dreamer</title>
  
  <subtitle>No More Wasted Nights.</subtitle>
  <link href="https://lzmustb.github.io/atom.xml" rel="self"/>
  
  <link href="https://lzmustb.github.io/"/>
  <updated>2023-06-26T03:13:50.740Z</updated>
  <id>https://lzmustb.github.io/</id>
  
  <author>
    <name>Lzm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://lzmustb.github.io/2023/06/26/MySQL_commands/"/>
    <id>https://lzmustb.github.io/2023/06/26/MySQL_commands/</id>
    <published>2023-06-26T01:56:30.924Z</published>
    <updated>2023-06-26T03:13:50.740Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="安装与配置MySQL-Ubuntu"   >          <a href="#安装与配置MySQL-Ubuntu" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装与配置MySQL-Ubuntu" class="headerlink" title="安装与配置MySQL(Ubuntu)"></a>安装与配置MySQL(Ubuntu)</h1>              <h2 id="安装mysql"   >          <a href="#安装mysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></div></figure>        <h2 id="查看mysql是否安装成功"   >          <a href="#查看mysql是否安装成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看mysql是否安装成功" class="headerlink" title="查看mysql是否安装成功"></a>查看mysql是否安装成功</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></div></figure>        <h2 id="设置root用户的密码"   >          <a href="#设置root用户的密码" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置root用户的密码" class="headerlink" title="设置root用户的密码"></a>设置root用户的密码</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql #登录mysql服务器</span><br></pre></td></tr></table></div></figure><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span>指令:</span><br><span class="line"><span class="comment">/*将new_password部分替换为你的新密码*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"><span class="comment">/*更新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES; </span><br><span class="line"><span class="comment">/*退出sql命令行*/</span></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>        <h2 id="查看mysql服务器运行状态"   >          <a href="#查看mysql服务器运行状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看mysql服务器运行状态" class="headerlink" title="查看mysql服务器运行状态"></a>查看mysql服务器运行状态</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql status</span><br></pre></td></tr></table></div></figure><p>如果MySQL正在运行，将显示”active (running)”</p>        <h2 id="启动mysql服务器"   >          <a href="#启动mysql服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动mysql服务器" class="headerlink" title="启动mysql服务器"></a>启动mysql服务器</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></div></figure>        <h2 id="本地连接mysql服务器"   >          <a href="#本地连接mysql服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地连接mysql服务器" class="headerlink" title="本地连接mysql服务器"></a>本地连接mysql服务器</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u &lt;username&gt; -p</span><br></pre></td></tr></table></div></figure><p>将<code>&lt;username&gt;</code>替换为用户名(未创建新用户则填root)</p>        <h2 id="查看MySQL服务器的ip地址"   >          <a href="#查看MySQL服务器的ip地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看MySQL服务器的ip地址" class="headerlink" title="查看MySQL服务器的ip地址"></a>查看MySQL服务器的ip地址</h2>      <p>通常主机外网ip即为服务器ip地址</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig #linux</span><br></pre></td></tr></table></div></figure>        <h2 id="配置MySQL服务器远程连接"   >          <a href="#配置MySQL服务器远程连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置MySQL服务器远程连接" class="headerlink" title="配置MySQL服务器远程连接"></a>配置MySQL服务器远程连接</h2>              <h3 id="编辑配置文件’mysqld-cnf’"   >          <a href="#编辑配置文件’mysqld-cnf’" class="heading-link"><i class="fas fa-link"></i></a><a href="#编辑配置文件’mysqld-cnf’" class="headerlink" title="编辑配置文件’mysqld.cnf’"></a>编辑配置文件’mysqld.cnf’</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></div></figure><p>在 <code>mysqld.cnf</code> 文件中找到 <code>bind-address</code> 选项，并将其注释掉或将其值设置为MySQL服务器的IP地址。默认情况下，此选项被设置为 <code>127.0.0.1</code>，只允许本地连接。如果要允许远程连接，请将其修改为服务器的实际IP地址或注释掉该行。例如：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#bind-address = 127.0.0.1</span><br></pre></td></tr></table></div></figure><p>保存并关闭<code>mysqld.cnf</code>文件（ctrl+x）</p>        <h3 id="重启MySQL服务器以应用更改"   >          <a href="#重启MySQL服务器以应用更改" class="heading-link"><i class="fas fa-link"></i></a><a href="#重启MySQL服务器以应用更改" class="headerlink" title="重启MySQL服务器以应用更改"></a>重启MySQL服务器以应用更改</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></div></figure>        <h3 id="创建或授予远程访问权限"   >          <a href="#创建或授予远程访问权限" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建或授予远程访问权限" class="headerlink" title="创建或授予远程访问权限"></a>创建或授予远程访问权限</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></div></figure><p>进入sql命令行</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*显示MySQL服务器上所有用户列表*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></div></figure><p>如果有用户拥有<code>%</code>主机的访问权限，则该用户可以进行远程访问。如果没有，则授予权限</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*替换&lt;password&gt;（包括大小于号）*/</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure><p>或创建新用户：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*替换&lt;username&gt;和&lt;password&gt;（包括大小于号）*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;&lt;username&gt;&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*授予新用户对所有数据库的完全权限*/</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;&lt;username&gt;&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>        <h2 id="查看MySQL服务器端口"   >          <a href="#查看MySQL服务器端口" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看MySQL服务器端口" class="headerlink" title="查看MySQL服务器端口"></a>查看MySQL服务器端口</h2>      <p>默认为3306，若进行了自定义设置可在<strong>sql命令行</strong>使用以下指令</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;port&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="关闭Ubuntu防火墙"   >          <a href="#关闭Ubuntu防火墙" class="heading-link"><i class="fas fa-link"></i></a><a href="#关闭Ubuntu防火墙" class="headerlink" title="关闭Ubuntu防火墙"></a>关闭Ubuntu防火墙</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">sudo ufw disable</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态，若显示<span class="string">&#x27;Status:inactive&#x27;</span>则关闭成功</span></span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></div></figure>        <h1 id="MySQL语言"   >          <a href="#MySQL语言" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySQL语言" class="headerlink" title="MySQL语言"></a>MySQL语言</h1>      ]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;安装与配置MySQL-Ubuntu&quot;   &gt;
          &lt;a href=&quot;#安装与配置MySQL-Ubuntu&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Qt开发记录</title>
    <link href="https://lzmustb.github.io/2023/03/04/my-Qt-note/"/>
    <id>https://lzmustb.github.io/2023/03/04/my-Qt-note/</id>
    <published>2023-03-04T01:06:00.000Z</published>
    <updated>2023-03-05T07:44:17.863Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="版本信息"   >          <a href="#版本信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Qt creator==<span class="number">9.0</span><span class="number">.2</span></span><br><span class="line">python==<span class="number">3.9</span><span class="number">.7</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="关系结构"   >          <a href="#关系结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#关系结构" class="headerlink" title="关系结构"></a>关系结构</h1>              <h1 id="Layout"   >          <a href="#Layout" class="heading-link"><i class="fas fa-link"></i></a><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1>              <h1 id="QtWidgets"   >          <a href="#QtWidgets" class="heading-link"><i class="fas fa-link"></i></a><a href="#QtWidgets" class="headerlink" title="QtWidgets"></a>QtWidgets</h1>      <ul><li><code>QWidget</code>：基本容器</li><li><code>QPushButton</code></li></ul>        <h1 id="QML"   >          <a href="#QML" class="heading-link"><i class="fas fa-link"></i></a><a href="#QML" class="headerlink" title="QML"></a>QML</h1>      <ul><li>每个QML文件需要有一个唯一的根元素</li><li>声明形式</li><li>&#96;&#96;&#96;css<br>type{<br>id:不带引号的标识符，所有元素唯一&#x2F;&#x2F;其他元素通过id访问<br>width:<br>height:<br>property int &lt;名称&gt;:1&#x2F;&#x2F;自定义属性(要写明类型)<br>property alias &lt;名称&gt;:&lt;引用&gt;&#x2F;&#x2F;引用其他属性<br>}<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* </span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="QtQuick"   >          <a href="#QtQuick" class="heading-link"><i class="fas fa-link"></i></a><a href="#QtQuick" class="headerlink" title="QtQuick"></a>QtQuick</h2>              <h2 id="初始化"   >          <a href="#初始化" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2>      <figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">border</span>:none;</span><br><span class="line"><span class="attribute">background-color</span>:transparent;</span><br><span class="line"><span class="attribute">background</span>:none;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;版本信息&quot;   &gt;
          &lt;a href=&quot;#版本信息&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#版本信息&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>《献给阿尔吉侬的花束》</title>
    <link href="https://lzmustb.github.io/2023/02/25/read-Flowers-for-Algernon/"/>
    <id>https://lzmustb.github.io/2023/02/25/read-Flowers-for-Algernon/</id>
    <published>2023-02-25T03:20:54.000Z</published>
    <updated>2023-03-05T05:35:59.968Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="引言"   >          <a href="#引言" class="heading-link"><i class="fas fa-link"></i></a><a href="#引言" class="headerlink" title="引言"></a>引言</h1>      <blockquote><p>箱子里有迷宫。</p><p>你在错综复杂的道路上前行。</p><p>你相信墙的另一侧一定有些什么，</p><p>时而失道却坚定地向着出口前进。</p><p>这身影对我有些耀眼。(阿尔吉侬)就是这样的一首曲子。</p><p style="text-align:right">——n-buna</p></blockquote><span id="more"></span><p>前段时间听夜鹿新曲<span class="exturl"><a class="exturl__link"   href="https://music.163.com/#/song?id=2020247157" >アルジャーノン(阿尔吉侬)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>得知其原型是科幻巨著《献给阿尔吉侬的花束》。</p><p>小说从主人公 查理·高登 的自述开始。通过没有逗号、错别字满篇的报告得知，他是一名30多岁的智力障碍者，在面包店做些清扫工作，同时在低能成人学校努力学习。他想变聪明，想让面包店的同事高兴，想理解他的朋友们所谈论的话题，并参与其中。</p><p>后来，他被带到声称能改造智力的科学实验室中，在那里遇到了高智商老鼠 阿尔吉侬。阿尔吉侬是唯一一个实验成功的老鼠，它快速走出迷宫的样子令查理感到无比的惊讶和敬佩。</p><p>科学家和医生看到查理天性善良，又有上进心，认为他是人体实验的不二之选。查理接受了手术，变成了天才。然而，等待他的不是为他自豪的朋友，而是他不曾体会的复杂世界。</p><p><font color='scarlet'><strong>※以下涉及剧透</strong></font></p>        <h1 id="人物关系图"   >          <a href="#人物关系图" class="heading-link"><i class="fas fa-link"></i></a><a href="#人物关系图" class="headerlink" title="人物关系图"></a>人物关系图</h1>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/flowersForAlgernon.png" alt="flowersForAlgernon"></p>        <h1 id="“比拥有高智商更重要的事”"   >          <a href="#“比拥有高智商更重要的事”" class="heading-link"><i class="fas fa-link"></i></a><a href="#“比拥有高智商更重要的事”" class="headerlink" title="“比拥有高智商更重要的事”"></a>“比拥有高智商更重要的事”</h1>      <p>在智力的飞速发展下，查理很快便掌握多门语言，读通最前沿的科学论文。一开始，他以为这就是正常人的世界，但此时的查理和其他人之间的隔阂却和手术前一样大。查理不能忍受尼姆等人追求名利，他在公开场合说的话虽然理性而正确，但让这些科学家们难堪。</p><p>高智商让他察觉人性中的丑恶，但没有给他宽容这些丑恶的人情。</p><blockquote><p>但我可以告诉你一件事，在你手术之前，你并不是这个样子。你不会在自己的秽物中打滚，不会沉迷于自怜，不会整天整夜坐在电视机前污染自己的心灵，更不会大声对别人咆哮。你有些令我们尊敬的特质……没错，即使是过去的你。你身上有些我从来没有在其他弱智者身上见过的特别东西。</p><p style="text-align:right">——艾丽斯·纪尼安</p></blockquote>        <h1 id="献给阿尔吉侬"   >          <a href="#献给阿尔吉侬" class="heading-link"><i class="fas fa-link"></i></a><a href="#献给阿尔吉侬" class="headerlink" title="献给阿尔吉侬"></a>献给阿尔吉侬</h1>      <p>查理得知留给自己的时间不长后，把所有精力花在研究他自身发生的变化上。他并没有用他梦寐以求的聪明去做自己想做的事，而是用昙花一现的人类最高智力，去推进科学发展，为未来其他智障者开辟道路。</p><blockquote><p>我把阿尔吉侬的尸体放在一个小金属容器里带回家，我不会让他们把它丢进焚化炉。这样做有些愚蠢和伤感，但昨天深夜我把它埋在后院。把一束野花放在坟上时，我哭了起来。</p></blockquote><hr><p>我和查理没有什么共同点可言，无论是在他做手术前，还是之后。我想象自己如果在书中是个什么样的位置，最后发现可能只是面包店里默默工作的一员。我不会嘲笑和捉弄查理，也不会在他变成高智商时排挤他。但我的篇幅一定不会比金皮或者乔更多。或许查理会主动和我敞开心扉，而我多半对此爱莫能助；或许我从头到尾都不会知道查理对命运的伟大抗争。</p><p>全世界有7%左右的残疾人，其中智力残疾比肢体残疾要少一些。在我的20多年人生中，擦肩而过的可能有10来个，但不曾接触过他们中的任何人。我自认为与人交流时有注意不让对方尴尬难堪，但或许我并不比那些为残障机构捐款却从不与他们交流的富豪更有同情心。我自认为对任何人都没有歧视和偏见，但我实际能做到的只是保持沉默和中立，却不能提供真正的帮助。我无时不希望自己是个善良热情的人，但我身上的冷淡部分总是在阻止与他人的共情。</p><p>我的心灵是一块开阔却贫瘠的土地，不会拒绝踏入的脚印，但也找不着一束可以献上的花。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;   &gt;
          &lt;a href=&quot;#引言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;
      &lt;blockquote&gt;
&lt;p&gt;箱子里有迷宫。&lt;/p&gt;
&lt;p&gt;你在错综复杂的道路上前行。&lt;/p&gt;
&lt;p&gt;你相信墙的另一侧一定有些什么，&lt;/p&gt;
&lt;p&gt;时而失道却坚定地向着出口前进。&lt;/p&gt;
&lt;p&gt;这身影对我有些耀眼。(阿尔吉侬)就是这样的一首曲子。&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;——n-buna&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://lzmustb.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="感想" scheme="https://lzmustb.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>并发/并行&amp;同步/异步</title>
    <link href="https://lzmustb.github.io/2022/11/05/my-programing-note1/"/>
    <id>https://lzmustb.github.io/2022/11/05/my-programing-note1/</id>
    <published>2022-11-05T04:17:20.000Z</published>
    <updated>2022-11-05T04:47:53.314Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="并发vs并行"   >          <a href="#并发vs并行" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发vs并行" class="headerlink" title="并发vs并行"></a>并发vs并行</h1>              <h2 id="并发-Concurrency"   >          <a href="#并发-Concurrency" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发-Concurrency" class="headerlink" title="并发(Concurrency)"></a>并发(Concurrency)</h2>      <p>并发是一个宽泛概念，表示计算机同时执行多项任务。</p><p>对于单核处理器，可以通过分配时间片的方式（又称上下文切换context switching）</p>        <h2 id="并行-Parallelism"   >          <a href="#并行-Parallelism" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行-Parallelism" class="headerlink" title="并行(Parallelism)"></a>并行(Parallelism)</h2>      <p>在多核处理器中，真正意义上同时执行多项任务。</p><span id="more"></span>        <h1 id="同步vs异步"   >          <a href="#同步vs异步" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步vs异步" class="headerlink" title="同步vs异步"></a>同步vs异步</h1>              <h2 id="同步编程-Synchronous"   >          <a href="#同步编程-Synchronous" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步编程-Synchronous" class="headerlink" title="同步编程(Synchronous)"></a>同步编程(Synchronous)</h2>      <p>在执行完一项任务后才执行下一项任务，没有并发并行的概念</p>        <h2 id="异步编程-Async"   >          <a href="#异步编程-Async" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步编程-Async" class="headerlink" title="异步编程(Async)"></a>异步编程(Async)</h2>      <p>在<strong>单线程中</strong>同时执行多个任务的编程方式。无需考虑线程同步，线程竞争的问题。</p><p>适用于有网络操作，数据库访问等I&#x2F;O密集的应用程序。如果使用多线程，线程中的大部分时间在等待，反而浪费了线程切换和线程内存的开销。多线程适合计算量大的程序。</p>        <h3 id="Javascript"   >          <a href="#Javascript" class="heading-link"><i class="fas fa-link"></i></a><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3>      <p>Js中实现异步的方法有callback，Promise，async&#x2F;await</p>        <h4 id="async-x2F-await"   >          <a href="#async-x2F-await" class="heading-link"><i class="fas fa-link"></i></a><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h4>      <p>async将函数标记为异步函数，返回值为Promise对象。在async函数中可以调用await标记的异步函数。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;并发vs并行&quot;   &gt;
          &lt;a href=&quot;#并发vs并行&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并发vs并行&quot; class=&quot;headerlink&quot; title=&quot;并发vs并行&quot;&gt;&lt;/a&gt;并发vs并行&lt;/h1&gt;
      
        &lt;h2 id=&quot;并发-Concurrency&quot;   &gt;
          &lt;a href=&quot;#并发-Concurrency&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并发-Concurrency&quot; class=&quot;headerlink&quot; title=&quot;并发(Concurrency)&quot;&gt;&lt;/a&gt;并发(Concurrency)&lt;/h2&gt;
      &lt;p&gt;并发是一个宽泛概念，表示计算机同时执行多项任务。&lt;/p&gt;
&lt;p&gt;对于单核处理器，可以通过分配时间片的方式（又称上下文切换context switching）&lt;/p&gt;

        &lt;h2 id=&quot;并行-Parallelism&quot;   &gt;
          &lt;a href=&quot;#并行-Parallelism&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并行-Parallelism&quot; class=&quot;headerlink&quot; title=&quot;并行(Parallelism)&quot;&gt;&lt;/a&gt;并行(Parallelism)&lt;/h2&gt;
      &lt;p&gt;在多核处理器中，真正意义上同时执行多项任务。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>餐厅管理网页练习</title>
    <link href="https://lzmustb.github.io/2022/10/16/my-vue-practice1/"/>
    <id>https://lzmustb.github.io/2022/10/16/my-vue-practice1/</id>
    <published>2022-10-15T23:29:46.000Z</published>
    <updated>2022-10-16T00:42:05.956Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下这两天用vue模写网页的过程。</p><p>成品：</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/my-vue-practice1.png" alt="my-vue-practice1"></p><span id="more"></span><p>※设计图来自IQQNIC Design的<span class="exturl"><a class="exturl__link"   href="https://pixso.cn/community/file/iwhOWVDOeICw39kGAlSxrA" >免费餐厅管理模板</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>页面最外层：</p><ul><li><p>sidebar：固定像素，fixed固定在侧边</p></li><li><p>navigationBar+router-view：上下结构，这次只做了home界面所以路由不会切换</p></li></ul><p>黄色框内的元素均为响应式渲染，由store里的数据管理。</p>        <h1 id="解决的技术问题"   >          <a href="#解决的技术问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决的技术问题" class="headerlink" title="解决的技术问题"></a>解决的技术问题</h1>              <h2 id="滚动条显示异常"   >          <a href="#滚动条显示异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#滚动条显示异常" class="headerlink" title="滚动条显示异常"></a>滚动条显示异常</h2>      <p>在写<code>Home.vue</code>时，明明页面超出了屏幕，却不显示滚动条，也无法滑动。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--App.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;APPcontainer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SideBar</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;APPmain&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">NavigationBar</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mainView&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这部分超出了界面--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>解决方法</strong>：</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在最外层容器添加--&gt;</span><br><span class="line"><span class="selector-class">.APPcontainer</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>原理没搞懂，<code>height:100vh</code>比较关键，不加这句的话滚动条长得会比较奇怪。</p>        <h2 id="CSS简单动效"   >          <a href="#CSS简单动效" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS简单动效" class="headerlink" title="CSS简单动效"></a>CSS简单动效</h2>      <p><code>transition:[时间]</code>可以在元素样式产生变化时自动生成补间，像淡出淡入，侧栏展开等。</p><p><code>filter</code>属性可以改变元素的颜色，功能繁多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下这两天用vue模写网页的过程。&lt;/p&gt;
&lt;p&gt;成品：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/my-vue-practice1.png&quot; alt=&quot;my-vue-practice1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>网页设计学习笔记</title>
    <link href="https://lzmustb.github.io/2022/10/13/my-web-design-note/"/>
    <id>https://lzmustb.github.io/2022/10/13/my-web-design-note/</id>
    <published>2022-10-13T04:39:36.000Z</published>
    <updated>2023-07-09T13:06:53.725Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="页面尺寸的选择"   >          <a href="#页面尺寸的选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#页面尺寸的选择" class="headerlink" title="页面尺寸的选择"></a>页面尺寸的选择</h1>              <h2 id="网页宽度-amp-有效可视区"   >          <a href="#网页宽度-amp-有效可视区" class="heading-link"><i class="fas fa-link"></i></a><a href="#网页宽度-amp-有效可视区" class="headerlink" title="网页宽度&amp;有效可视区"></a>网页宽度&amp;有效可视区</h2>      <ul><li><strong>网页宽度</strong>：进行页面设计时画板的宽度</li><li><strong>有效可视区</strong>：网页内容所占的宽度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/2107_01.jpg" alt="img"></p><span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://gs.statcounter.com/screen-resolution-stats/desktop/worldwide" >Statcounter Global Stats</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上可以看到当前PC端显示器的流行尺寸，由此得出结论：</p><blockquote><p>网页宽度：1920</p><p>有效可视区：900~1200</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221013124444439.png" alt="image-20221013124444439"></p>        <h1 id="响应式布局"   >          <a href="#响应式布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1>      <p>若不希望可视区占比太小，可以采用响应式布局使得网页在不同的尺寸下有不同的布局。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/0117-1.png" alt="リキッドレイアウトの簡単な説明：レイアウトは同じでコンテンツの幅がディスプレイの幅に応じて変化する。"></p>        <h2 id="百分比"   >          <a href="#百分比" class="heading-link"><i class="fas fa-link"></i></a><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2>      <h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><p>相对于父元素，或无父元素则相对于视窗</p><div class="table-container"><table><thead><tr><th>属性</th><th align="left">百分比基准</th></tr></thead><tbody><tr><td>width</td><td align="left">基于父级的width</td></tr><tr><td>height</td><td align="left">基于父级的height</td></tr><tr><td>margin(四个方向)</td><td align="left">基于父级的width</td></tr><tr><td>padding(四个方向)</td><td align="left">基于父级的width</td></tr><tr><td>left,,right</td><td align="left">基于<strong>非static定位</strong>的父级的width</td></tr><tr><td>top,bottom</td><td align="left">基于<strong>非static定位</strong>的父级的height</td></tr></tbody></table></div>        <h3 id="vw-amp-vh"   >          <a href="#vw-amp-vh" class="heading-link"><i class="fas fa-link"></i></a><a href="#vw-amp-vh" class="headerlink" title="vw&amp;vh"></a>vw&amp;vh</h3>      <ul><li>1vw&#x3D;1%视窗宽度</li><li>1vh&#x3D;1%视窗高度</li><li>vmin：vw和vh中较小值</li><li>vmax：vw和vh中较大值</li></ul>        <h2 id="rem-font-size-of-the-root-element"   >          <a href="#rem-font-size-of-the-root-element" class="heading-link"><i class="fas fa-link"></i></a><a href="#rem-font-size-of-the-root-element" class="headerlink" title="rem(font size of the root element)"></a>rem(font size of the root element)</h2>      <p>rem为相对于<strong>根元素字体大小</strong>的单位</p>        <h2 id="媒体查询"   >          <a href="#媒体查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2>      <figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//页面宽度大于<span class="number">960px</span>小于<span class="number">1200px</span></span><br><span class="line"><span class="keyword">@media</span> screen </span><br><span class="line"><span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">960px</span>) </span><br><span class="line"><span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)&#123;</span><br><span class="line">        <span class="comment">/*---*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="flex布局"   >          <a href="#flex布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1>      <p>Flex布局中存在main axis(横向)和cross axis(纵向)两个轴，默认将元素在main axis从左向右排列</p>        <h2 id="justify-content"   >          <a href="#justify-content" class="heading-link"><i class="fas fa-link"></i></a><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h2>      <p>可以决定容器中元素在<strong>主轴</strong>方向的位置</p><ul><li><code>flex-start</code>：将元素对齐主轴首端</li><li><code>flex-end</code>：将元素对齐主轴末端</li><li><code>center</code>：将元素居中</li><li><code>space-between</code>：使第一个元素位于主轴首端，最后一个元素位于主轴末端</li><li><code>space-around</code>：将元素等距排列，且第一个元素和最后一个元素到边界的距离相当于元素间距离的一半</li></ul>        <h2 id="align-items"   >          <a href="#align-items" class="heading-link"><i class="fas fa-link"></i></a><a href="#align-items" class="headerlink" title="align-items"></a><code>align-items</code></h2>      <p>可以决定容器中元素在<strong>副轴</strong>方向的位置</p><ul><li><code>flex-start</code>：将元素对齐副轴首端</li><li><code>flex-end</code>：将元素对齐副轴末端</li><li><code>center</code>：将元素居中</li><li><code>stretch</code>：</li><li><code>baseline</code>：</li></ul>        <h2 id="align-self"   >          <a href="#align-self" class="heading-link"><i class="fas fa-link"></i></a><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h2>      <p>作用于flex布局内的<strong>元素</strong>。选项与<code>align-items</code>相同，用于具体修改某个元素的纵向布局。</p>        <h2 id="flex-direction"   >          <a href="#flex-direction" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h2>      <p>可以修改主轴的方向</p><ul><li><code>row</code>：主轴为横向，从左向右</li><li><code>row-reverse</code>：主轴为横向，从右向左</li><li><code>column</code>：主轴为纵向，从上向下</li><li><code>column-reverse</code>：主轴为纵向，从下向上</li></ul>        <h2 id="order"   >          <a href="#order" class="heading-link"><i class="fas fa-link"></i></a><a href="#order" class="headerlink" title="order"></a><code>order</code></h2>      <p>作用于flex布局内的<strong>元素</strong>。默认值为0，可选择任意<strong>整数值</strong>。数值大的元素将排列在后面。</p>        <h1 id="Grid布局"   >          <a href="#Grid布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h1>      <p><code>fr</code>：grid专有单位，表示比例（fraction）</p>        <h2 id="grid-template"   >          <a href="#grid-template" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-template" class="headerlink" title="grid-template"></a><code>grid-template</code></h2>      <p><strong>容器属性</strong>，用于定义栅格行列的宽度，数量</p><ul><li><code>grid-template-columns</code></li><li><code>-rows</code></li><li>【选项】<code>repeat(重复次数,值)</code>：</li></ul><figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&quot;100px 100px 100px&quot;</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line"><span class="comment">//自动按照容器宽度填充（响应式）</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(auto-fill,<span class="number">100px</span>);</span><br></pre></td></tr></table></div></figure><ul><li>【选项】<code>minmax(最小值，最大值)</code></li><li>【选项】<code>auto</code></li><li>【选项】<code>网格线[...]</code></li><li><code>-areas</code>：设定网格区域：<figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-areas</span>:<span class="string">&#x27;a b c&#x27;</span> </span><br><span class="line"><span class="string">&#x27;d e f&#x27;</span>; </span><br><span class="line"><span class="comment">//匿名区域：&quot;.&quot;</span></span><br><span class="line"><span class="comment">//在项目上分配区域：&quot;grid-area:区域名;&quot;</span></span><br><span class="line"><span class="comment">//每个区域的起始网格线自动命名为&quot;区域名-start&quot;</span></span><br><span class="line"><span class="comment">//终止网格线自动命名为&quot;区域名-end&quot;</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="gap"   >          <a href="#gap" class="heading-link"><i class="fas fa-link"></i></a><a href="#gap" class="headerlink" title="gap"></a><code>gap</code></h2>      <p><strong>容器属性</strong>，设置行，列的间距。</p><ul><li><code>row-gap</code></li><li><code>column-gap</code></li><li><code>gap</code></li></ul>        <h2 id="grid-auto"   >          <a href="#grid-auto" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto" class="headerlink" title="grid-auto"></a><code>grid-auto</code></h2>              <h3 id="grid-auto-flow"   >          <a href="#grid-auto-flow" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a><code>grid-auto-flow</code></h3>      <p><strong>容器属性</strong>，设置自动排列的方向</p><ul><li>【选项1】<code>row</code>：按行排放（默认）</li><li>【选项1】<code>column</code>：按列排放</li><li>【选项2】<code>dense</code>：用后排项目填补空余部分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221104105341526.png" alt="image-20221104105341526"></p>        <h3 id="grid-auto-rows-columns"   >          <a href="#grid-auto-rows-columns" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto-rows-columns" class="headerlink" title="grid-auto-rows/columns"></a><code>grid-auto-rows/columns</code></h3>      <p><strong>容器属性</strong>，设置多出项目的宽(column)和高(row)</p>        <h2 id="对齐选项"   >          <a href="#对齐选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐选项" class="headerlink" title="对齐选项"></a>对齐选项</h2>              <h3 id="items"   >          <a href="#items" class="heading-link"><i class="fas fa-link"></i></a><a href="#items" class="headerlink" title="-items"></a><code>-items</code></h3>      <p><strong>容器属性</strong> ：决定项目在<strong>单元格内</strong>的对齐方式</p><ul><li><code>justify-items</code>：水平方向对齐</li><li><code>align-items</code>：垂直方向对齐<ul><li><code>start|end|center|stretch</code>：stretch为撑满单元格</li></ul></li><li><code>place-items</code>：&lt;align-items&gt; &lt;justify-items&gt;</li></ul>        <h3 id="content"   >          <a href="#content" class="heading-link"><i class="fas fa-link"></i></a><a href="#content" class="headerlink" title="-content"></a><code>-content</code></h3>      <p><strong>容器属性</strong>：决定网格区域在父元素内的对齐方式</p><ul><li><code>justify-content</code>：水平方向对齐</li><li><code>align-content</code>：垂直方向对齐<ul><li><code>start|end|center|stretch</code></li><li><code>space-around</code></li><li><code>space-between</code></li><li><code>space-evenly</code>：等间距分布（包括与边界的距离</li></ul></li></ul>        <h2 id="项目属性"   >          <a href="#项目属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2>              <h3 id="指定位置"   >          <a href="#指定位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#指定位置" class="headerlink" title="指定位置"></a>指定位置</h3>      <ul><li><p><code>grid-column/row-start/end</code></p><p>※简写:<code>grid-column:1/3;</code></p><p>※跨行写法：<code>grid-column-start:span 3;</code>(占三列)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221104114016154.png" alt="image-20221104114016154"></p><ul><li><code>grid-area</code>：指定所在区域</li></ul><figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-area</span>:区域名;</span><br><span class="line"><span class="attribute">grid-area</span>:<span class="number">1</span>/<span class="number">1</span>/<span class="number">3</span>/<span class="number">3</span>;</span><br><span class="line"><span class="comment">//简写column-start/column-end/row-start/row-end</span></span><br></pre></td></tr></table></div></figure>        <h3 id="对齐"   >          <a href="#对齐" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3>      <ul><li><code>justify-self/align-self</code>：设置项目在单元格内对齐方式</li></ul>        <h1 id="CSS技巧"   >          <a href="#CSS技巧" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS技巧" class="headerlink" title="CSS技巧"></a>CSS技巧</h1>      <p>box-shadow: offset-x(x偏移) offset-y(y偏移) blur(模糊半径) spread(扩展半径) color(颜色) position(inset内阴影);</p><p>透过上层点击到下层元素：给上层元素添加{pointer-events:none;}</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow：hidden；--溢出隐藏</span><br><span class="line"></span><br><span class="line">white-space:nowrap; --文本不换行，文本会继续在一行显示</span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis;  --这时用此属性才能出现省略号</span><br></pre></td></tr></table></div></figure><p>text-overflow失效：父元素为flex布局</p>        <h2 id="混合模式"   >          <a href="#混合模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mix-blend-mode: normal; //正常</span><br><span class="line">mix-blend-mode: multiply; //正片叠底</span><br><span class="line">mix-blend-mode: screen; //滤色</span><br><span class="line">mix-blend-mode: overlay; //叠加</span><br><span class="line">mix-blend-mode: darken; //变暗</span><br><span class="line">mix-blend-mode: lighten; //变亮</span><br><span class="line">mix-blend-mode: color-dodge; //颜色减淡</span><br><span class="line">mix-blend-mode: color-burn; //颜色加深</span><br><span class="line">mix-blend-mode: hard-light; //强光</span><br><span class="line">mix-blend-mode: soft-light; //柔光</span><br><span class="line">mix-blend-mode: difference; //差值</span><br><span class="line">mix-blend-mode: exclusion; //排除</span><br><span class="line">mix-blend-mode: hue; //色相</span><br><span class="line">mix-blend-mode: saturation; //饱和度</span><br><span class="line">mix-blend-mode: color; //颜色</span><br><span class="line">mix-blend-mode: luminosity; //亮度</span><br><span class="line">mix-blend-mode: initial; //初始</span><br><span class="line">mix-blend-mode: inherit; //继承</span><br><span class="line">mix-blend-mode: unset; //复原</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;页面尺寸的选择&quot;   &gt;
          &lt;a href=&quot;#页面尺寸的选择&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#页面尺寸的选择&quot; class=&quot;headerlink&quot; title=&quot;页面尺寸的选择&quot;&gt;&lt;/a&gt;页面尺寸的选择&lt;/h1&gt;
      
        &lt;h2 id=&quot;网页宽度-amp-有效可视区&quot;   &gt;
          &lt;a href=&quot;#网页宽度-amp-有效可视区&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#网页宽度-amp-有效可视区&quot; class=&quot;headerlink&quot; title=&quot;网页宽度&amp;amp;有效可视区&quot;&gt;&lt;/a&gt;网页宽度&amp;amp;有效可视区&lt;/h2&gt;
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网页宽度&lt;/strong&gt;：进行页面设计时画板的宽度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有效可视区&lt;/strong&gt;：网页内容所占的宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/2107_01.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue3应用练习</title>
    <link href="https://lzmustb.github.io/2022/10/03/my-first-vue-app/"/>
    <id>https://lzmustb.github.io/2022/10/03/my-first-vue-app/</id>
    <published>2022-10-03T04:23:24.000Z</published>
    <updated>2022-10-03T05:37:33.695Z</updated>
    
    <content type="html"><![CDATA[<p>在跟着<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1QU4y1E7qo/" >Vue3通用后台管理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>敲完代码，又对着Vue3文档学了个大概后，做了个应用试手。👉<a href="https://lzmustb.github.io/test/#/">Vue3应用练习 (lzmustb.github.io)</a></p><span id="more"></span><hr>        <h1 id="技术栈"   >          <a href="#技术栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1>      <ul><li>Vue3</li><li>Vite</li><li>vue-router</li><li>pinia</li><li>element-Plus</li></ul><hr>        <h1 id="实现的功能"   >          <a href="#实现的功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h1>      <ul><li>通过<code>增加批注</code>按钮给文章的选定段落增加批注。</li><li>批注包括<code>名称</code>，<code>批注内容</code>，<code>时间</code>，<code>选定段落</code></li><li>增加的<code>批注</code>会显示在文章的侧栏。</li><li><strong>点击批注</strong>会标记该批注和选定的段落，且同时只有一个批注会被选定。</li><li>在<strong>批注汇总</strong>页显示所有文章的所有批注。</li><li>在<strong>批注汇总</strong>页<strong>点击批注</strong>会跳转到目标批注所在的文章及段落，同时使该批注被选定。</li></ul><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221003124743017.png" alt="image-20221003124743017" style="zoom: 25%;" /><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221003124822698.png" alt="image-20221003124822698" style="zoom: 25%;" /><hr>        <h1 id="遇到的问题"   >          <a href="#遇到的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1>              <h2 id="onClick事件内注册的click侦听器会直接被触发"   >          <a href="#onClick事件内注册的click侦听器会直接被触发" class="heading-link"><i class="fas fa-link"></i></a><a href="#onClick事件内注册的click侦听器会直接被触发" class="headerlink" title="onClick事件内注册的click侦听器会直接被触发"></a>onClick事件内注册的click侦听器会直接被触发</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮绑定了onclick事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClickEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//update()会在按钮时直接被触发</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>解决方法</strong>：将<code>click</code>事件换成<code>mousedown</code></p>        <h2 id="在点击批注跳转后使该批注变成选定状态"   >          <a href="#在点击批注跳转后使该批注变成选定状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#在点击批注跳转后使该批注变成选定状态" class="headerlink" title="在点击批注跳转后使该批注变成选定状态"></a>在点击批注跳转后使该批注变成选定状态</h2>      <p><strong>解决方法</strong>：<code>onActivated()</code></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;onActivated&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">onActivated</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//每当页面被重新加载就会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h2 id="多行文字的截取省略"   >          <a href="#多行文字的截取省略" class="heading-link"><i class="fas fa-link"></i></a><a href="#多行文字的截取省略" class="headerlink" title="多行文字的截取省略"></a>多行文字的截取省略</h2>      <p><strong>解决方法</strong>：找准文字所在的块级元素</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>; //限制的行数</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>我的前端学习比较断断续续，缺乏练习和规范，导致实际操作起来试错很多。虽然遇到的问题最终都解决了，但做一个省略了UI的小功能应用还花了将近两天时间。而且这次实践也让我体会到UI设计并不容易，得进行系统的学习。更不要妄想不打设计稿，边敲代码边设计。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在跟着&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://www.bilibili.com/video/BV1QU4y1E7qo/&quot; &gt;Vue3通用后台管理&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;敲完代码，又对着Vue3文档学了个大概后，做了个应用试手。👉&lt;a href=&quot;https://lzmustb.github.io/test/#/&quot;&gt;Vue3应用练习 (lzmustb.github.io)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="https://lzmustb.github.io/2022/09/25/Vue3-conclusion/"/>
    <id>https://lzmustb.github.io/2022/09/25/Vue3-conclusion/</id>
    <published>2022-09-25T14:03:42.000Z</published>
    <updated>2023-07-11T04:41:55.735Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Vue3"   >          <a href="#Vue3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1>      <p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><span id="more"></span><hr>        <h1 id="开发步骤"   >          <a href="#开发步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1>              <h2 id="step-0-构建"   >          <a href="#step-0-构建" class="heading-link"><i class="fas fa-link"></i></a><a href="#step-0-构建" class="headerlink" title="step_0_构建"></a>step_0_构建</h2>              <h3 id="Vite脚手架"   >          <a href="#Vite脚手架" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vite脚手架" class="headerlink" title="Vite脚手架"></a>Vite脚手架</h3>      <p>通过脚手架，可以快速构建项目预设，包含<code>main.js</code>，<code>App.vue</code>以及<code>/src</code>文件夹等。</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//安装vite脚手架并构建预设vue项目</span><br><span class="line">yarn[或cnpm] create vite my-vue-app --template vue</span><br><span class="line"></span><br><span class="line">//进入项目根目录，安装</span><br><span class="line">cd my-vue-app</span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">//创建本地服务器，进入开发模式</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></div></figure>        <h3 id="elementPlus引入"   >          <a href="#elementPlus引入" class="heading-link"><i class="fas fa-link"></i></a><a href="#elementPlus引入" class="headerlink" title="elementPlus引入"></a>elementPlus引入</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入根目录，安装element-Plus</span></span><br><span class="line">cnpm install element-plus --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">cnpm install -D unplugin-vue-components unplugin-auto-<span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入到vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>完整引入Icon</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) &#123;</span><br><span class="line">  app.<span class="title function_">component</span>(key, component)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="安装-amp-配置-vue-router"   >          <a href="#安装-amp-配置-vue-router" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-amp-配置-vue-router" class="headerlink" title="安装&amp;配置 vue-router"></a>安装&amp;配置 vue-router</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//项目根目录，安装4.0以上vue-router</span></span><br><span class="line">npm install vue-router@<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;src/router/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储路径</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;intro&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/Intro.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></div></figure>        <h3 id="安装-amp-配置-pinia"   >          <a href="#安装-amp-配置-pinia" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-amp-配置-pinia" class="headerlink" title="安装&amp;配置 pinia"></a>安装&amp;配置 pinia</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根目录</span></span><br><span class="line">npm install pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;src/store/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;id&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">isCollapse</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">currentMenu</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">tabsList</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">menu</span>:[</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">token</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h2 id="step-1-创建应用实例"   >          <a href="#step-1-创建应用实例" class="heading-link"><i class="fas fa-link"></i></a><a href="#step-1-创建应用实例" class="headerlink" title="step_1_创建应用实例"></a>step_1_创建应用实例</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main.<span class="property">js</span><span class="comment">//入口文件</span></span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">1.</span>创建应用实例--&gt;</span><br><span class="line"><span class="comment">//导入createApp，单文件根组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//createApp(根组件,根组件Props[可选])</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">/*---外部导入↑或↓内联---*/</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="comment">/*内联根组件*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">2.</span>引入router,pinia--&gt;</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">3.</span>将应用实例挂载在一个容器元素中--&gt;</span><br><span class="line"><span class="comment">//mount(DOM元素或CSS选择器)</span></span><br><span class="line"><span class="comment">//每个应用实例仅能调用一次mount()</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">/*---CSS选择器↑或↓DOM元素---*/</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>)</span><br></pre></td></tr></table></div></figure><p>App相关方法，属性</p><ul><li><code>unmount()</code>：卸载一个已挂载的应用</li><li><a href="https://cn.vuejs.org/api/application.html#app-provide"><code>provide()</code></a>：提供一个值，在应用中的所有后代组件中注入使用。</li><li><a href="https://cn.vuejs.org/api/application.html#app-component"><code>component()</code></a>：注册组件</li><li><a href="https://cn.vuejs.org/api/application.html#app-directive"><code>directive()</code></a>：注册指令</li><li><a href="https://cn.vuejs.org/api/application.html#app-use"><code>use()</code></a>：安装一个插件</li><li><code>version</code>：当前应用所使用的 Vue 版本号</li><li><a href="https://cn.vuejs.org/api/application.html#app-config"><code>config</code></a>：对这个应用的配置设定</li><li><a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties"><code>config.globalProperties</code></a>：注册能够被应用内所有组件访问的全局属性的对象</li></ul>        <h2 id="step2-组件-component"   >          <a href="#step2-组件-component" class="heading-link"><i class="fas fa-link"></i></a><a href="#step2-组件-component" class="headerlink" title="step2_组件(component)"></a>step2_组件(component)</h2>      <p>命名建议：PascalCase(所有首字母大写)</p>        <h3 id="pinia的使用"   >          <a href="#pinia的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#pinia的使用" class="headerlink" title="pinia的使用"></a>pinia的使用</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="创建组件"   >          <a href="#创建组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3>              <h2 id="step3-测试"   >          <a href="#step3-测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#step3-测试" class="headerlink" title="step3_测试"></a>step3_测试</h2>              <h3 id="单元测试"   >          <a href="#单元测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/scaling-up/testing.html#unit-testing" >单元测试</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>侧重于逻辑上的正确性，只关注应用整体功能的一小部分。</p><hr>        <h1 id="单文件组件"   >          <a href="#单文件组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1>      <blockquote><p><strong>前端开发的关注点不是完全基于文件类型分离的</strong>。在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。</p></blockquote><p>将一个Vue组件的模板(html)，逻辑(javascript)，样式(css)封装在单个文件<code>*.vue</code>中。</p><p>每个文件都由三种顶层语言模块构成：<code>&lt;template&gt;</code> <code>&lt;style&gt;</code> <code>&lt;script&gt;</code> </p>        <h2 id="lt-template-gt"   >          <a href="#lt-template-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-template-gt" class="headerlink" title="&lt;template&gt;"></a>&lt;template&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件最多包含一个<code>&lt;template&gt;</code>标签。标签中可以使用原生html，<code>\&lt;router-view/&gt;</code>，以及element-Plus等UI框架提供的API等。</li></ul>        <h2 id="lt-style-gt"   >          <a href="#lt-style-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-gt" class="headerlink" title="&lt;style&gt;"></a>&lt;style&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件可以包含<strong>多个</strong> <code>&lt;style&gt;</code> 标签。标签内使用css相关语言</li></ul>        <h3 id="lt-style-scoped-gt"   >          <a href="#lt-style-scoped-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-scoped-gt" class="headerlink" title="&lt;style scoped&gt;"></a>&lt;style scoped&gt;</h3>      <p>带有<code>scoped</code>属性的style标签值会影响当前组件内的元素。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">-----↓↓↓通过 PostCSS 将内容转化↓↓↓-----</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span><span class="selector-attr">[data-v-f3f3eg9]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">data-v-f3f3eg9</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>※子组件的根元素只有<strong>一个</strong>时<font color=#aaa>(<code>&lt;template&gt;</code>内的最外层元素)</font>会附带父组件的<code>data-v-hash</code>，同时被父组件的样式和子组件的样式影响。</p><p><strong>当子组件和父组件有同名class的选择器时，父组件样式会覆盖子组件样式</strong>。</p><p>子组件设置<code>inheritAttrs</code>为<code>false</code>，非<code>props</code>属性不会应用到子组件根元素上。但父组件使用标签选择器时，子组件样式依然被影响。</p>        <h4 id="选择器"   >          <a href="#选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4>      <ul><li><code>:deep()</code></li><li><code>:slotted()</code></li><li><code>:global()</code></li><li><strong>小心递归组件中的后代选择器</strong>！对于一个使用了 <code>.a .b</code> 选择器的样式规则来说，如果匹配到 <code>.a</code> 的元素包含了一个递归的子组件，那么所有的在那个子组件中的 <code>.b</code> 都会匹配到这条样式规则。</li></ul>        <h3 id="lt-style-module-gt"   >          <a href="#lt-style-module-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-module-gt" class="headerlink" title="&lt;style module&gt;"></a>&lt;style module&gt;</h3>      <p>编译为CSS Modules(<span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/sfc-css-features.html#css-modules" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p>        <h3 id="v-bind"   >          <a href="#v-bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-bind" class="headerlink" title="v-bind()"></a>v-bind()</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(color);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>自定义属性会通过内联样式的方式应用到组件的根元素上，并且在源值变更的时候响应式地更新</p>        <h3 id="预处理器"   >          <a href="#预处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/sfc-spec.html#pre-processors" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="lt-script-gt"   >          <a href="#lt-script-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-script-gt" class="headerlink" title="&lt;script&gt;"></a>&lt;script&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件最多可以包含一个<code>&lt;script&gt;</code>和 <code>&lt;script setup&gt;</code></li></ul>        <h3 id="构成"   >          <a href="#构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#构成" class="headerlink" title="构成"></a>构成</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 返回值会暴露给模板和其他的选项式 API 钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      count</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>) <span class="comment">// 0</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="export"   >          <a href="#export" class="heading-link"><i class="fas fa-link"></i></a><a href="#export" class="headerlink" title="export"></a>export</h3>      <p><code>export</code>用于导出单文件组件的<strong>选项对象</strong>，以便在其他组件中用<code>import</code>引入。<code>export default</code>导出为一整个模块，<code>export</code>可以分别命名导出的模块。一个js中只能由一个<code>export default</code>，但可以有多个<code>export</code>。</p><p>main.js在构造根组件时，如果根组件包含其他子组件，那么Vue会通过引入的<strong>选项对象</strong>构造对应的组件。</p>        <h2 id="组件使用"   >          <a href="#组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2>              <h3 id="注册子组件"   >          <a href="#注册子组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册子组件" class="headerlink" title="注册子组件"></a>注册子组件</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//局部组件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//注册子组件，可在模板中任意使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//全局组件(main.js中)</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line">app.component(&#x27;Child&#x27;,ChildComponent)</span><br></pre></td></tr></table></div></figure><p>每个组件都是独立的实例，维护独立的属性。</p>        <h3 id="组件参数-Props"   >          <a href="#组件参数-Props" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件参数-Props" class="headerlink" title="组件参数-Props"></a>组件参数-Props</h3>      <ul><li>通过Props属性，子组件可以从父组件接收参数。</li><li>当使用对象形式声明props时，值为该prop预期类型的构造函数。该方法可以在prop传入错误类型时抛出警告。</li><li>可以用一个<code>const</code>变量取接收<code>defineProps()</code>返回的对象</li><li>所有prop都是可选的，除非声明<code>required:true</code></li><li>未传递的prop默认值为<code>undefined</code>或Boolean则为<code>false</code></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props=<span class="title function_">defineProps</span>([<span class="string">&#x27;title&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    &lt;!--或者--&gt;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">propA</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义类型校验</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">validator</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--也可通过v-bind传递变量--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--批量传入Props(post对象包含所有props)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">v-bind</span>=<span class="string">&quot;post&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值</p><p><font color=#b00>※prop在子组件中是只读的，当你尝试修改时，vue会抛出警告</font></p><blockquote><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。</p><p>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在大多数场景下，子组件应该<strong>抛出一个事件</strong>来通知父组件做出改变。</p></blockquote>        <h3 id="组件事件-Emits"   >          <a href="#组件事件-Emits" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件事件-Emits" class="headerlink" title="组件事件-Emits"></a>组件事件-Emits</h3>      <ul><li>通过Emits属性，子组件可以抛出一个事件，给父组件接收</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineEmits</span>([<span class="string">&#x27;enlarge-text&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span>Enlarge text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize : postFontSize +&#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> @<span class="attr">enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="事件参数-amp-事件校验"   >          <a href="#事件参数-amp-事件校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件参数-amp-事件校验" class="headerlink" title="事件参数&amp;事件校验"></a>事件参数&amp;事件校验</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/events.html#event-arguments" >略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="插槽-slot"   >          <a href="#插槽-slot" class="heading-link"><i class="fas fa-link"></i></a><a href="#插槽-slot" class="headerlink" title="插槽-slot"></a>插槽-slot</h3>      <p>通过slot，父组件可以向子组件传递元素，从而在子组件中完成渲染。</p><p>※插槽的内容无法访问到子组件的状态</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AlertBox</span>&gt;</span></span><br><span class="line">  Something bad happened.</span><br><span class="line"><span class="tag">&lt;/<span class="name">AlertBox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件中,slot部分会被父组件传入的元素取代--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>可在此填入默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="具名插槽"   >          <a href="#具名插槽" class="heading-link"><i class="fas fa-link"></i></a><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4>      <p>带 <code>name</code> 属性的插槽被称为具名插槽 (named slots)，未提供<code>name</code>则隐式地命名为“default”。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--或简写--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 插槽的内容放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="作用域插槽"   >          <a href="#作用域插槽" class="heading-link"><i class="fas fa-link"></i></a><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/slots.html#scoped-slots" >略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="动态切换组件"   >          <a href="#动态切换组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态切换组件" class="headerlink" title="动态切换组件"></a>动态切换组件</h3>      <p>通过<code>component</code>元素和<code>is</code>属性可以实现动态组件，<code>is</code>的值可以是<strong>被注册的组件名</strong>或<strong>导入的组件对象</strong>。一般情况下，被切换的组件会被销毁。在下次切换回该组件时，会创建一个初始状态的新实例。</p><p>通过<code>&lt;KeepAlive&gt;</code>内置组件包装动态组件，可以缓存被切换的组件。</p><p>可选属性：</p><ul><li><code>max</code>：限制被缓存的数量</li><li><code>include/exclude</code>：可以筛选需要缓存的组件，传入正则表达式或数组，匹配组件的<code>name</code></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123;Component&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:max</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="透传属性"   >          <a href="#透传属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#透传属性" class="headerlink" title="透传属性"></a>透传属性</h3>      <p>当一个属性传递给子组件时，若该属性未被子组件声明为<code>props</code>,<code>emits</code>,<code>v-on</code>事件监听器，则称为<strong>透传attribute</strong>或<code>Non-props</code>。</p><ul><li><p>当子组件<strong>只含单个根元素</strong>，则透传属性会被自动添加到该元素上，并和元素上原有的属性合并。</p></li><li><p>如果子组件A中是另一个组件B，透传属性会传递给组件B</p></li><li><p>在组件<code>export default</code>中设置<code>inheritAttrs: false</code>可以禁用组件透传。</p></li><li><p>在设为禁用后，在子组件中可以通过<code>$attrs</code><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/attrs.html#disabling-attribute-inheritance" >访问</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>所有透传属性，并通过<code>v-bind=&quot;$attrs&quot;</code>将透传属性绑定到任意元素上。</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyButton组件只含一个button元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--最终渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;child father&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span></span><br><span class="line">click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="在Js中访问attrs"   >          <a href="#在Js中访问attrs" class="heading-link"><i class="fas fa-link"></i></a><a href="#在Js中访问attrs" class="headerlink" title="在Js中访问attrs"></a>在Js中访问attrs</h4>      <p>以下<code>attrs</code>为非响应式。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 透传 attribute 被暴露为 ctx.attrs</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">attrs</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h1 id="组合式API"   >          <a href="#组合式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1>      <blockquote><ul><li>使用函数而不是声明选项的方式书写Vue组件</li><li>包括响应式API，生命周期钩子，依赖注入</li></ul></blockquote>        <h2 id="组合式API的优势"   >          <a href="#组合式API的优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合式API的优势" class="headerlink" title="组合式API的优势"></a>组合式API的优势</h2>      <p>更灵活地组织代码，让逻辑相关的代码能够集中在一处</p><blockquote><p>组合式 API 不像选项式 API 那样会手把手教你该把代码放在哪里。但反过来，它却让你可以像编写普通的 JavaScript 那样来编写组件代码。这意味着<strong>你能够，并且应该在写组合式 API 的代码时也运用上所有普通 JavaScript 代码组织的最佳实践</strong>。如果你可以编写组织良好的 JavaScript，你也应该有能力编写组织良好的组合式 API 代码。</p></blockquote>        <h2 id="响应式API"   >          <a href="#响应式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h2>              <h3 id="理解响应性"   >          <a href="#理解响应性" class="heading-link"><i class="fas fa-link"></i></a><a href="#理解响应性" class="headerlink" title="理解响应性"></a>理解响应性</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#what-is-reactivity" >Vue的解释</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>响应性是可以声明式地处理变化的编程范式，使一个对象发生变化时，与其相关联的对象也能随之发生变化。</p></blockquote><p>响应式对象： Vue 能够跟踪，访问，修改其属性的对象，实际是JavaScript Proxy。</p>        <h3 id="定义响应式变量-reactive"   >          <a href="#定义响应式变量-reactive" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义响应式变量-reactive" class="headerlink" title="定义响应式变量-reactive()"></a>定义响应式变量-reactive()</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="reactive-规则"   >          <a href="#reactive-规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#reactive-规则" class="headerlink" title="reactive()规则"></a>reactive()规则</h4>      <ul><li><p>Proxy和原始对象并非全等，因此使用Vue 的响应式系统应<strong>仅使用你声明对象的代理版本</strong>。</p></li><li><p>已存在的代理对象传入<code>reactive()</code>会返回该代理本身。</p></li><li><p>同一个对象传入<code>reactive()</code>总是会返回同一个代理对象。</p></li><li><p><code>reactive()</code>对原始数据类型无效。</p></li><li><p>将<code>reactive()</code>响应式对象解构或传入函数时，失去响应性连接。</p></li><li><p>当一个变量多次接受<code>reactive()</code>返回的代理对象，旧的响应式连接会丢失。</p></li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 上面的 (&#123; count: 0 &#125;) 将不再被追踪</span></span><br><span class="line">state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></div></figure>        <h3 id="定义响应式变量-ref"   >          <a href="#定义响应式变量-ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义响应式变量-ref" class="headerlink" title="定义响应式变量-ref()"></a>定义响应式变量-ref()</h3>      <p><code>ref()</code>可以创建任何值类型的响应式，且传给函数或是从一般对象上被解构时，不会丢失响应性，可用于将逻辑提取到 <span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/reusability/composables.html" >组合函数</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">const object = &#123;foo:ref(1)&#125;</span><br><span class="line">//ref()将创建一个带value属性的对象</span><br><span class="line">//count=&#123;value:0&#125;</span><br><span class="line">//count.value=0</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure><p>当ref是模板渲染上下文的顶层属性或文本插值计算的最终值时将自动解包</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- ↓解包，结果为：0 --&gt;</span><br><span class="line">&#123;&#123; count &#125;&#125;</span><br><span class="line">&lt;!-- ↓解包，结果为：1 --&gt;</span><br><span class="line">&#123;&#123;object.foo&#125;&#125;</span><br><span class="line">&lt;!-- ↓不解包，结果为：[object Object]1 --&gt;</span><br><span class="line">&#123;&#123;object.foo+1&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#ref-unwrapping-in-reactive-objects" >ref在响应式对象中的解包</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（略）</p>        <h3 id="计算属性"   >          <a href="#计算属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3>      <p><code>computed()</code>方法接收一个getter函数，并返回一个计算属性<strong>ref</strong>，与一般ref用法类似。计算属性会自动追踪响应式依赖并随之变化。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setup内</span></span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> sign = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number&gt;<span class="number">0</span>?<span class="string">&#x27;plus&#x27;</span>:<span class="string">&#x27;minus&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><p>与直接调用方法相比，计算属性会有<strong>缓存</strong>功能，只要其响应式依赖不改变，计算属性就会立即返回先前的结果而不重复计算。<br>一般方法会在每次页面重渲染时执行<br><font color='#aaa'>※计算函数不应进行计算以外的作用(如更改DOM或做异步请求)</font></p>        <h2 id="生命周期钩子"   >          <a href="#生命周期钩子" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2>      <p>在<strong>某一时刻</strong>会<strong>自动执行</strong>的函数</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/lifecycle.16e4c08e.png" alt="组件生命周期图示"></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在实例生成之前</span></span><br><span class="line"><span class="title function_">beforeCreate</span>()</span><br><span class="line"><span class="comment">//在实例生成之后</span></span><br><span class="line"><span class="title function_">created</span>()</span><br><span class="line"><span class="comment">//组件渲染前</span></span><br><span class="line"><span class="title function_">beforeMount</span>()</span><br><span class="line"><span class="comment">//在组件被渲染到页面后</span></span><br><span class="line"><span class="title function_">mounted</span>()</span><br><span class="line"><span class="comment">//在数据发生变化前</span></span><br><span class="line"><span class="title function_">beforeUpdate</span>()</span><br><span class="line"><span class="comment">//在数据发生变化，页面重新渲染后</span></span><br><span class="line"><span class="title function_">updated</span>()</span><br><span class="line"><span class="comment">//当实例销毁前</span></span><br><span class="line"><span class="title function_">beforeUnmounted</span>()</span><br><span class="line"><span class="comment">//实例销毁后</span></span><br><span class="line"><span class="title function_">unmounted</span>()</span><br></pre></td></tr></table></div></figure><p>以上API全部在<code>setup()</code>阶段被调用</p><p>router-view切换时调用：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onActivated, onDeactivated &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用时机为首次挂载</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以及每次从缓存中被重新插入时</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onDeactivated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在从 DOM 上移除、进入缓存</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以及组件卸载时调用</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="依赖注入"   >          <a href="#依赖注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2>              <h2 id="使用组合式API"   >          <a href="#使用组合式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用组合式API" class="headerlink" title="使用组合式API"></a>使用组合式API</h2>              <h3 id="setup"   >          <a href="#setup" class="heading-link"><i class="fas fa-link"></i></a><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3>      <p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口，通常只在以下情况下使用：</p><ol><li>需要在非单文件组件中使用组合式 API 时。</li><li>需要在基于选项式 API 的组件中使用组合式 API 的代码时。</li></ol><p><strong>其他情况下，都应优先使用&lt;script setup&gt;语法。</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;    </span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props,context) &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line">    // 通过return返回的变量会暴露给模板和其他的选项式API钩子</span><br><span class="line">    return &#123;</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure><blockquote><p>在模板中访问从 <code>setup</code> 返回的 <span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/reactivity-core.html#ref" >ref</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 时，它会<span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#deep-reactivity" >自动浅层解包</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，因此你无须再在模板中为它写 <code>.value</code>。当通过 <code>this</code> 访问时也会同样如此解包。<br><code>setup()</code> 自身并不含对组件实例的访问权，即在 <code>setup()</code> 中访问 <code>this</code> 会是 <code>undefined</code>。你可以在选项式 API 中访问组合式 API 暴露的值，但反过来则不行。</p></blockquote>        <h3 id="lt-script-setup-gt"   >          <a href="#lt-script-setup-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-script-setup-gt" class="headerlink" title="&lt;script setup&gt;"></a>&lt;script setup&gt;</h3>      <ul><li><code>defineProps()</code>：声明</li></ul>        <h1 id="Vue指令"   >          <a href="#Vue指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1>              <h2 id="动态属性"   >          <a href="#动态属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:</span>[<span class="attr">name</span>]=<span class="string">&#x27;message&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name=<span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message=<span class="string">&#x27;helloworld&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-text"   >          <a href="#v-text" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2>      <p>更新文本内容</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="v-show"   >          <a href="#v-show" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2>      <p>设置内联<code>display</code>属性</p>        <h2 id="v-if-x2F-v-else-if-x2F-v-else"   >          <a href="#v-if-x2F-v-else-if-x2F-v-else" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-if-x2F-v-else-if-x2F-v-else" class="headerlink" title="v-if&#x2F;v-else-if&#x2F;v-else"></a>v-if&#x2F;v-else-if&#x2F;v-else</h2>      <p>可用于<code>&lt;template&gt;</code>表示仅包含文本或多个元素的条件块。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-for"   >          <a href="#v-for" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2>      <p>v-for中对<strong>对象</strong>迭代时，最多可使用值，键，索引三个相关变量(顺序固定)</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> list=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key1</span>:value1,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key2</span>:value2</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//循环十次</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-on"   >          <a href="#v-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2>              <h3 id="修饰符"   >          <a href="#修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件修饰符:stop,prevent,capture,self,once,passive</span><br><span class="line">click:left,right,middle...</span><br><span class="line">keydown:enter,tab,delete</span><br><span class="line">精确修饰符:exact</span><br></pre></td></tr></table></div></figure>        <h2 id="v-bind-1"   >          <a href="#v-bind-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-bind-1" class="headerlink" title="v-bind"></a>v-bind</h2>              <h2 id="v-once"   >          <a href="#v-once" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2>              <h2 id="v-model"   >          <a href="#v-model" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message=[];</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;VALUE&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="v-model-lazy"   >          <a href="#v-model-lazy" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-lazy" class="headerlink" title="v-model.lazy"></a>v-model.lazy</h3>      <p>数据同步减慢，当事件不再被触发的时候再更新数据</p>        <h3 id="v-model-number"   >          <a href="#v-model-number" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-number" class="headerlink" title="v-model.number"></a>v-model.number</h3>      <p>绑定时进行数据类型转换</p>        <h3 id="v-model-trim"   >          <a href="#v-model-trim" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-trim" class="headerlink" title="v-model.trim"></a>v-model.trim</h3>      <p>去除前后空格</p>        <h1 id="TIPS"   >          <a href="#TIPS" class="heading-link"><i class="fas fa-link"></i></a><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1>      <ul><li><p>内容超出屏幕不显示滚动条：父元素设置<code>overflow:scroll</code></p></li><li><p>flex布局单个子元素靠右：<code>margin-left:auto</code></p></li><li><p>绝对定位居中：</p><ul><li><code>margin:auto</code></li><li><code>top:50%;left:50%</code></li><li><code>transform:translate(-50%,-50)</code></li></ul></li></ul>        <h1 id="路由切换-x2F-router"   >          <a href="#路由切换-x2F-router" class="heading-link"><i class="fas fa-link"></i></a><a href="#路由切换-x2F-router" class="headerlink" title="路由切换&#x2F;router"></a>路由切换&#x2F;router</h1>      ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue3&quot;   &gt;
          &lt;a href=&quot;#Vue3&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;
      &lt;p&gt;Vue (发音为 &amp;#x2F;vjuː&amp;#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Effect</title>
    <link href="https://lzmustb.github.io/2022/05/31/my-forge-learning-effect/"/>
    <id>https://lzmustb.github.io/2022/05/31/my-forge-learning-effect/</id>
    <published>2022-05-31T06:56:43.000Z</published>
    <updated>2022-05-31T08:41:03.308Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Effect"   >          <a href="#Effect" class="heading-link"><i class="fas fa-link"></i></a><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h1>              <h2 id="注册"   >          <a href="#注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册" class="headerlink" title="注册"></a>注册</h2>      <p>与item大致相同</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建注册器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;MobEffect&gt; MOB_EFFECTS=DeferredRegister.create(ForgeRegistries.MOB_EFFECTS, Deathspiral.MOD_ID);</span><br><span class="line"><span class="comment">//注册Custom_Effect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;MobEffect&gt; Custom_Effect=MOB_EFFECTS.register(<span class="string">&quot;custom_effect&quot;</span>,()-&gt;<span class="keyword">new</span> <span class="title class_">CustomEffect</span>());</span><br></pre></td></tr></table></div></figure>        <h2 id="自定义效果类"   >          <a href="#自定义效果类" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义效果类" class="headerlink" title="自定义效果类"></a>自定义效果类</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VigilanceEffect</span> <span class="keyword">extends</span> <span class="title class_">MobEffect</span> <span class="keyword">implements</span> <span class="title class_">IForgeMobEffect</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">VigilanceEffect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(MobEffectCategory.BENEFICIAL,<span class="number">0</span>);</span><br><span class="line">    addAttributeModifier(Attributes.MOVEMENT_SPEED,<span class="string">&quot;UUID&quot;</span>,<span class="number">0.1F</span>, AttributeModifier.Operation.MULTIPLY_TOTAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//应用的效果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyEffectTick</span><span class="params">(LivingEntity entity, <span class="type">int</span> amplifier)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!entity.level.isClientSide())&#123;</span><br><span class="line">            <span class="keyword">if</span>(entity <span class="keyword">instanceof</span> Player)&#123;</span><br><span class="line">                Player player=(Player)entity;</span><br><span class="line">                player.sendMessage(<span class="keyword">new</span> <span class="title class_">TranslatableComponent</span>(<span class="string">&quot;test_message&quot;</span>),player.getUUID());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每隔多久应用一次效果(如果为20，就代表每隔20ticks即1秒)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDurationEffectTick</span><span class="params">(<span class="type">int</span> remainingTicks, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> remainingTicks%<span class="number">20</span>==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://minecraft.fandom.com/zh/wiki/%E5%B1%9E%E6%80%A7" >AttributeModifier相关资料</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;Effect&quot;   &gt;
          &lt;a href=&quot;#Effect&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Effect&quot; class=&quot;header</summary>
      
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Blocks-Entity</title>
    <link href="https://lzmustb.github.io/2022/05/30/my-forge-learning-entity/"/>
    <id>https://lzmustb.github.io/2022/05/30/my-forge-learning-entity/</id>
    <published>2022-05-30T05:26:45.000Z</published>
    <updated>2022-07-02T01:27:58.276Z</updated>
    
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Sounds</title>
    <link href="https://lzmustb.github.io/2022/05/29/my-forge-learning-sounds/"/>
    <id>https://lzmustb.github.io/2022/05/29/my-forge-learning-sounds/</id>
    <published>2022-05-29T12:19:38.000Z</published>
    <updated>2022-05-29T12:20:08.102Z</updated>
    
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-粒子效果</title>
    <link href="https://lzmustb.github.io/2022/05/19/my-forge-learning-particles/"/>
    <id>https://lzmustb.github.io/2022/05/19/my-forge-learning-particles/</id>
    <published>2022-05-19T00:49:38.000Z</published>
    <updated>2022-05-19T03:25:22.005Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Particles"   >          <a href="#Particles" class="heading-link"><i class="fas fa-link"></i></a><a href="#Particles" class="headerlink" title="Particles"></a>Particles</h1>      <span id="more"></span>        <h2 id="创建粒子效果"   >          <a href="#创建粒子效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建粒子效果" class="headerlink" title="创建粒子效果"></a>创建粒子效果</h2>      <p>Particles的实现包含了客户端限定的类和通用的类。客户端限定的类用于展现粒子效果，通用的类用于同步数据等</p><div class="table-container"><table><thead><tr><th>Class</th><th align="left">Side</th><th>描述</th></tr></thead><tbody><tr><td>ParticleType</td><td align="left">BOTH</td><td>用于注册</td></tr><tr><td>ParticleOptions</td><td align="left">BOTH</td><td>用于同步信息</td></tr><tr><td>ParticleProvider</td><td align="left">CLIENT</td><td>用于构造粒子</td></tr><tr><td>Particle</td><td align="left">CLIENT</td><td>粒子的渲染逻辑</td></tr></tbody></table></div>        <h2 id="ParticleType"   >          <a href="#ParticleType" class="heading-link"><i class="fas fa-link"></i></a><a href="#ParticleType" class="headerlink" title="ParticleType"></a>ParticleType</h2>      <p><code>ParticleType</code>是决定粒子种类，并为客户端和服务器提供参考的<code>RegistryObject</code>，因此，所有的<code>ParticleType</code>须被注册。<br>每个<code>ParticleType</code>接收两个参数：<br><code>overrideLimiter</code>决定了粒子是否无论远近都渲染<br><code>ParticleOptions$Deserializer</code>读取客户端的<code>ParticleOption</code><br><code>ParticleType</code>是抽象类，其<code>#codec</code>方法须被重写。</p><p>在大多数情况下，粒子数据不需要发送到客户端。对于这些实例，创建一个<code>SimpleParticleType</code>实例更加容易。</p>        <h2 id="TextureSheetParticle"   >          <a href="#TextureSheetParticle" class="heading-link"><i class="fas fa-link"></i></a><a href="#TextureSheetParticle" class="headerlink" title="TextureSheetParticle"></a>TextureSheetParticle</h2>      <p>实际自定义Particle时，可继承该类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomParticle</span> <span class="keyword">extends</span> <span class="title class_">TextureSheetParticle</span>&#123;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">CustomParticle</span><span class="params">(ClientLevel level,<span class="type">double</span> xCoord,<span class="type">double</span> yCoord,<span class="type">double</span> zCoord,SpriteSet spriteSet,<span class="type">double</span> xd,<span class="type">double</span> yd,<span class="type">double</span> zd)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(level,xCoord,yCoord,zCoord,xd,yd,zd);</span><br><span class="line">    <span class="built_in">this</span>.friction=<span class="number">0.8F</span>;</span><br><span class="line">    <span class="built_in">this</span>.xd=xd;</span><br><span class="line">    <span class="built_in">this</span>.yd=yd;</span><br><span class="line">    <span class="built_in">this</span>.zd=zd;</span><br><span class="line">    <span class="built_in">this</span>.qu</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Particles&quot;   &gt;
          &lt;a href=&quot;#Particles&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Particles&quot; class=&quot;headerlink&quot; title=&quot;Particles&quot;&gt;&lt;/a&gt;Particles&lt;/h1&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-data</title>
    <link href="https://lzmustb.github.io/2022/05/17/my-forge-learning-data/"/>
    <id>https://lzmustb.github.io/2022/05/17/my-forge-learning-data/</id>
    <published>2022-05-17T06:20:00.000Z</published>
    <updated>2022-06-03T14:57:23.174Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Data"   >          <a href="#Data" class="heading-link"><i class="fas fa-link"></i></a><a href="#Data" class="headerlink" title="Data"></a>Data</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">└── data</span><br><span class="line">    └── MOD_ID</span><br><span class="line">        ├── recipes</span><br><span class="line">        ├── tags</span><br><span class="line">        ├── structures</span><br><span class="line">        ├── advancements</span><br><span class="line">        └── loot_tables</span><br></pre></td></tr></table></div></figure><p>在<code>Gradle:net.minecraft:client:extra:版本号</code>中可以看到原版的data文件夹</p><span id="more"></span>        <h2 id="recipes-合成表"   >          <a href="#recipes-合成表" class="heading-link"><i class="fas fa-link"></i></a><a href="#recipes-合成表" class="headerlink" title="recipes-合成表"></a>recipes-合成表</h2>      <figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arrow.json 箭的合成配方</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:crafting_shaped&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;X&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;#&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Y&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;#&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:stick&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;X&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:flint&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Y&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:feather&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:arrow&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure><p><code>type</code>：</p><ul><li><code>minecraft:blasting</code></li><li><code>minecraft:crafting_shaped</code></li><li><code>minecraft:smelting</code></li><li><code>minecraft:crafting_shapeless</code></li><li><code>minecraft:stonecutting</code></li><li><code>minecraft:smoking</code></li><li><code>minecraft:crafting_special_mapcloning</code></li><li><code>minecraft:smithing</code></li><li><code>minecraft:crafting_special_repairitem</code></li><li><code>minecraft:campfire_cooking</code></li></ul>        <h2 id="loot-table-战利品表"   >          <a href="#loot-table-战利品表" class="heading-link"><i class="fas fa-link"></i></a><a href="#loot-table-战利品表" class="headerlink" title="loot_table-战利品表"></a>loot_table-战利品表</h2>              <h2 id="tags-标签"   >          <a href="#tags-标签" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-标签" class="headerlink" title="tags-标签"></a>tags-标签</h2>              <h2 id="NBT-Data"   >          <a href="#NBT-Data" class="heading-link"><i class="fas fa-link"></i></a><a href="#NBT-Data" class="headerlink" title="NBT Data"></a>NBT Data</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ItemStack.hasTag()</span><br><span class="line">ItemStack.setTag(new CompoundTag())</span><br><span class="line">ItemStack.getTag().getString(&quot;key&quot;)</span><br><span class="line"></span><br><span class="line">CompoundTag.putString(&quot;key&quot;,&quot;value&quot;)</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Data&quot;   &gt;
          &lt;a href=&quot;#Data&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Data&quot; class=&quot;headerlink&quot; title=&quot;Data&quot;&gt;&lt;/a&gt;Data&lt;/h1&gt;
      &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── MOD_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── recipes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── structures&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── advancements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── loot_tables&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;Gradle:net.minecraft:client:extra:版本号&lt;/code&gt;中可以看到原版的data文件夹&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-player</title>
    <link href="https://lzmustb.github.io/2022/05/17/my-forge-learning-player&amp;world/"/>
    <id>https://lzmustb.github.io/2022/05/17/my-forge-learning-player&amp;world/</id>
    <published>2022-05-17T05:42:23.000Z</published>
    <updated>2022-06-03T14:50:46.359Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Player"   >          <a href="#Player" class="heading-link"><i class="fas fa-link"></i></a><a href="#Player" class="headerlink" title="Player"></a>Player</h1>      <span id="more"></span>        <h2 id="常用方法"   >          <a href="#常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEffect</span><span class="params">(MobEffect effect)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.activeEffects.containsKey(effect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ItemStack <span class="title function_">getItemInHand</span><span class="params">(InteractionHand hand)</span>&#123;</span><br><span class="line">    <span class="comment">//返回玩家当前手中的道具</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历玩家的物品栏</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;player.getInventory().getContainerSize();i++)&#123;</span><br><span class="line">    ItemStack currentStack=player.getInventory().getItem(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="向玩家的对话框发送消息"   >          <a href="#向玩家的对话框发送消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#向玩家的对话框发送消息" class="headerlink" title="向玩家的对话框发送消息"></a>向玩家的对话框发送消息</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">player.sendMessage(<span class="keyword">new</span> <span class="title class_">TranslatableComponent</span>(<span class="string">&quot;message_ID&quot;</span>),player.getUUID());</span><br></pre></td></tr></table></div></figure><p><code>message_ID</code>通常为调用该方法的物品ID+messageID，例如<code>item.MOD_ID.customItem.message</code></p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message_ID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;显示的文字&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure><p>※补充阅读：<span class="exturl"><a class="exturl__link"   href="https://minecraft.fandom.com/zh/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81" >格式化代码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="Level"   >          <a href="#Level" class="heading-link"><i class="fas fa-link"></i></a><a href="#Level" class="headerlink" title="Level"></a>Level</h1>              <h2 id="常用方法-1"   >          <a href="#常用方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//制造爆炸（须在服务器端调用）</span></span><br><span class="line"><span class="keyword">public</span> Explosion <span class="title function_">explode</span><span class="params">(<span class="meta">@Nullable</span> Entity entity, <span class="meta">@Nullable</span> DamageSource source, <span class="meta">@Nullable</span> ExplosionDamageCalculator damage, <span class="type">double</span> posX, <span class="type">double</span> posY, <span class="type">double</span> posZ, <span class="type">float</span> radius, <span class="type">boolean</span> fire, Explosion.BlockInteraction blockInteraction)</span>;</span><br><span class="line"><span class="comment">//BlockInteraction可选：Explosion.BlockInteraction.DESTROY/BREAK/NO</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Player&quot;   &gt;
          &lt;a href=&quot;#Player&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Player&quot; class=&quot;headerlink&quot; title=&quot;Player&quot;&gt;&lt;/a&gt;Player&lt;/h1&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-网络</title>
    <link href="https://lzmustb.github.io/2022/05/13/my-forge-learning-networking/"/>
    <id>https://lzmustb.github.io/2022/05/13/my-forge-learning-networking/</id>
    <published>2022-05-13T03:40:40.000Z</published>
    <updated>2022-05-19T00:00:19.979Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="Networking"   >          <a href="#Networking" class="heading-link"><i class="fas fa-link"></i></a><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2>      ]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;Networking&quot;   &gt;
          &lt;a href=&quot;#Networking&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Networking&quot; c</summary>
      
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Block Entities</title>
    <link href="https://lzmustb.github.io/2022/05/09/my-forge-learning-block_entity/"/>
    <id>https://lzmustb.github.io/2022/05/09/my-forge-learning-block_entity/</id>
    <published>2022-05-09T02:52:36.000Z</published>
    <updated>2022-05-31T02:45:11.397Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Block-Entities"   >          <a href="#Block-Entities" class="heading-link"><i class="fas fa-link"></i></a><a href="#Block-Entities" class="headerlink" title="Block Entities"></a>Block Entities</h1>      <p><code>BlockEntities</code>是简化的<code>Entities</code>，并和一个Block绑定。它们用于存储动态数据，执行任务（tick based tasks），和动态渲染。原版mc中，箱子的存储功能，熔炉的燃烧，信标的buff效果等等都是通过<code>Block Entities</code>实现的。</p><span id="more"></span>        <h2 id="Registering"   >          <a href="#Registering" class="heading-link"><i class="fas fa-link"></i></a><a href="#Registering" class="headerlink" title="Registering"></a>Registering</h2>      <p>为创建一个<code>BlockEntity</code>，你需要继承该类。Block Entities 是动态创建或移除的，因此其本身并不需要注册。而作为替代，<code>BlockEntityType</code>会被注册。</p><p>一个<code>BlockEntityType</code>的注册和其他注册方式相同。<br>通过<code>BlockEntityType$Builder#of</code>可以创建一个该Type对应的BlockEntity实例。</p><blockquote><p>This takes in a <code>Type</code> which represents the type-safe reference used to refer to this registry object in a <code>DataFixer</code>. <code>DataFixer</code>为可选选项，build()中可传入null</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockEntityRegistry</span> &#123;</span><br><span class="line">    <span class="comment">//创建注册器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;BlockEntityType&lt;?&gt;&gt; BLOCK_ENTITIES=DeferredRegister.create(ForgeRegistries.BLOCK_ENTITIES, MOD_ID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册TestBlockEntity为例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;BlockEntityType&lt;TestBlockEntity&gt;&gt; TEST_BLOCK_ENTITY=BLOCK_ENTITIES.register(<span class="string">&quot;test_block_entity&quot;</span>,()-&gt;BlockEntityType.Builder.of(TestBlockEntity::<span class="keyword">new</span>,BlockRegistry.TEST_BLOCK.get()).build(<span class="literal">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestBlockEntity为继承了BlockEntity的自定义类</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestBlockEntity</span><span class="params">(BlockPos pos, BlockState state)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(BlockEntityRegistry.TEST_BLOCK_ENTITY.get(), pos, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="绑定BlockEntitiy-amp-Block"   >          <a href="#绑定BlockEntitiy-amp-Block" class="heading-link"><i class="fas fa-link"></i></a><a href="#绑定BlockEntitiy-amp-Block" class="headerlink" title="绑定BlockEntitiy&amp;Block"></a>绑定BlockEntitiy&amp;Block</h2>      <p>为了给Block绑定一个BlockEntity，<code>Block</code>子类需要实现<code>EntityBlock</code>接口。<code>EntitiyBlock#newBlockEntity(BlockPos,BlockState)</code>需要被实现并返回一个<code>BlockEntitiy</code>实例。<br>(或继承<code>BaseEntityBlock</code>)<br>在<code>Block</code>类中，须重写的方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使方块被渲染为模型</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RenderShape <span class="title function_">getRenderShape</span><span class="params">(BlockState state)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> RenderShape.MODEL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="存储数据"   >          <a href="#存储数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2>      <p>为了实现保存数据需要重写以下两个方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">saveAdditional</span><span class="params">(<span class="meta">@NotNull</span> CompoundTag tag)</span> &#123;</span><br><span class="line">    tag.put(<span class="string">&quot;inventory&quot;</span>, itemHandler.serializeNBT());</span><br><span class="line">    <span class="built_in">super</span>.saveAdditional(tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(CompoundTag nbt)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.load(nbt);</span><br><span class="line">    itemHandler.deserializeNBT(nbt.getCompound(<span class="string">&quot;inventory&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>每当包含该<code>BlockEntity</code>的<code>LevelChunk</code>从一个tag保存或读取时，这些方法会被调用。用这些方法可以读写你的block entity class中的变量。</p><p>※每当你的数据改变，都需要调用<code>BlockEntity#setChanged</code>，否则在level被保存的时候，包含该<code>BlockEntity</code>的<code>LevelChunk</code>可能会被跳过。</p><p>※It is important that you call the <code>super</code> methods!<br>The tag names <code>id</code>, <code>x</code>, <code>y</code>, <code>z</code>, <code>ForgeData</code> and <code>ForgeCaps</code> are reserved by the <code>super</code> methods.</p>        <h2 id="添加计时"   >          <a href="#添加计时" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加计时" class="headerlink" title="添加计时"></a>添加计时</h2>      <p>如果你需要一个计时的<code>BlockEntity</code>，比如追踪熔炼时的进程，就需要实现并重写另一个方法：<code>EntityBlock#getTicker(Level, BlockState, BlockEntityType)</code></p><p>※This can implement different tickers depending on which logical side the user is on, or just implement one general ticker. In either case, a <code>BlockEntityTicker</code> must be returned. Since this is a functional interface, it can just take in a method representing the ticker instead:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inside some Block subclass</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">BlockEntity</span>&gt; BlockEntityTicker&lt;T&gt; <span class="title function_">getTicker</span><span class="params">(Level level, BlockState state, BlockEntityType&lt;T&gt; type)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> type == MyBlockEntityTypes.MYBE.get() ? MyBlockEntity::tick : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inside MyBlockEntity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tick</span><span class="params">(Level level, BlockPos pos, BlockState state, T blockEntity)</span> &#123;</span><br><span class="line">  <span class="comment">// Do stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>※该方法会在每tick都调用一次，因此不应该进行过于复杂的运算。你应当在每隔Xticks进行一次复杂的运算。<br>（每秒包含的tick数可能低于20，但不会更高）</p>        <h2 id="Synchronizing-the-Data-to-the-Client"   >          <a href="#Synchronizing-the-Data-to-the-Client" class="heading-link"><i class="fas fa-link"></i></a><a href="#Synchronizing-the-Data-to-the-Client" class="headerlink" title="Synchronizing the Data to the Client"></a>Synchronizing the Data to the Client</h2>      <p>同步数据又三种方法：</p><ul><li>synchronizing on chunk load</li><li>on block updates</li><li>custom network message</li></ul>        <h1 id="MenuProvider"   >          <a href="#MenuProvider" class="heading-link"><i class="fas fa-link"></i></a><a href="#MenuProvider" class="headerlink" title="MenuProvider"></a>MenuProvider</h1>      ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Block-Entities&quot;   &gt;
          &lt;a href=&quot;#Block-Entities&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Block-Entities&quot; class=&quot;headerlink&quot; title=&quot;Block Entities&quot;&gt;&lt;/a&gt;Block Entities&lt;/h1&gt;
      &lt;p&gt;&lt;code&gt;BlockEntities&lt;/code&gt;是简化的&lt;code&gt;Entities&lt;/code&gt;，并和一个Block绑定。它们用于存储动态数据，执行任务（tick based tasks），和动态渲染。原版mc中，箱子的存储功能，熔炉的燃烧，信标的buff效果等等都是通过&lt;code&gt;Block Entities&lt;/code&gt;实现的。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Items</title>
    <link href="https://lzmustb.github.io/2022/05/08/my-forge-learning-item/"/>
    <id>https://lzmustb.github.io/2022/05/08/my-forge-learning-item/</id>
    <published>2022-05-08T00:22:14.000Z</published>
    <updated>2022-07-02T01:23:13.478Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Items"   >          <a href="#Items" class="heading-link"><i class="fas fa-link"></i></a><a href="#Items" class="headerlink" title="Items"></a>Items</h1>      <span id="more"></span>        <h2 id="Creating-an-Item-创建物品"   >          <a href="#Creating-an-Item-创建物品" class="heading-link"><i class="fas fa-link"></i></a><a href="#Creating-an-Item-创建物品" class="headerlink" title="Creating an Item-创建物品"></a>Creating an Item-创建物品</h2>              <h3 id="Basic-Items"   >          <a href="#Basic-Items" class="heading-link"><i class="fas fa-link"></i></a><a href="#Basic-Items" class="headerlink" title="Basic Items"></a>Basic Items</h3>      <p>Basic items是没有特殊功能的，（如木棒或白糖），不需要专门的类。可以通过实例化带有<code>Item$Properties</code>的<code>Item</code>类创建一个基本的Item。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">customItem</span> <span class="keyword">extends</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customItem</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">Properties</span>().);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>※以上方法均可以链式调用。</p>        <h2 id="Properties-属性"   >          <a href="#Properties-属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#Properties-属性" class="headerlink" title="Properties-属性"></a>Properties-属性</h2>              <h3 id="Properties方法一览"   >          <a href="#Properties方法一览" class="heading-link"><i class="fas fa-link"></i></a><a href="#Properties方法一览" class="headerlink" title="Properties方法一览"></a>Properties方法一览</h3>      <p><code>food(FoodProperties)</code>：设置<a href="">食物</a>相关的属性<br><code>stacksTo(int)</code>：设置最大存储量(StackSize,默认为64)<br><code>durability(int)</code>：设置耐久度(调用后StackSize固定为1)<br><code>craftRemainder(Item)</code>：设置该item的容器item，用于倒出岩浆后返还铁桶。<br><code>tab(CreativeModeTab)</code>：设定该道具属于哪个<code>CreativeModeTab</code>目录<br><code>rarity(Rarity)</code>：稀有度，有<code>COMMON</code>(默认)，<code>UNCOMMON</code>，<code>RARE</code>，<code>EPIC</code><br><code>fireResistant()</code>：设置为抗火(不会被岩浆烧掉)<br><code>setNoRepair()</code>：使道具无法被修复，即使有耐久属性。</p><p><a href="null">effect一览</a></p>        <h3 id="tab"   >          <a href="#tab" class="heading-link"><i class="fas fa-link"></i></a><a href="#tab" class="headerlink" title="tab()"></a>tab()</h3>      <p><code>TAB_BUILDING_BLOCKS</code>：建筑方块<br><code>TAB_DECORATIONS</code>：装饰性方块<br><code>TAB_REDSTONE</code>：红石<br><code>TAB_TRANSPORTATION</code>：交通运输<br><code>TAB_MISC</code>：杂项<br><code>TAB_FOOD</code>：食物<br><code>TAB_TOOLS</code>：工具<br><code>TAB_COMBAT</code>：战斗用品<br><code>TAB_BREWING</code>：酿造<br><code>TAB_MATERIALS</code>：(&#x3D;<code>TAB_MISC</code>)</p><p>调用：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Properties().tab(CreativeModeTab.TAB_BREWING)</span><br></pre></td></tr></table></div></figure>        <h4 id="自定义Tab"   >          <a href="#自定义Tab" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义Tab" class="headerlink" title="自定义Tab"></a>自定义Tab</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomTab</span> <span class="keyword">extends</span> <span class="title class_">CreativeModeTab</span>&#123;</span><br><span class="line"><span class="comment">//实例化并录入ID</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CustomTab</span> <span class="variable">customTab</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">CustomTab</span>(<span class="string">&quot;customTab_ID&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个物品，并作为自定义Tab的图标</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ItemStack <span class="title function_">makeIcon</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemStack</span>(ItemRegistry.test_Item.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>本地化：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">itemGroup.customTab_ID:&quot;Tab名称&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Food-食物"   >          <a href="#Food-食物" class="heading-link"><i class="fas fa-link"></i></a><a href="#Food-食物" class="headerlink" title="Food-食物"></a>Food-食物</h2>              <h3 id="food-–FoodProperties"   >          <a href="#food-–FoodProperties" class="heading-link"><i class="fas fa-link"></i></a><a href="#food-–FoodProperties" class="headerlink" title="food()–FoodProperties"></a>food()–FoodProperties</h3>      <p>※mc除了可见的饱食度条以外，还有隐藏饱食度(float)。隐藏饱食度的最大值为当前饱食度。玩家的行为会消耗隐藏饱食度，当隐藏饱食度为0时，饱食条会开始抖动。<br>详见：<span class="exturl"><a class="exturl__link"   href="https://minecraft.fandom.com/wiki/Hunger#Mechanics" >wiki:Hunger</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><code>nutrition(int)</code>：设置回复的饱食度<br><code>saturationMod(float)</code>：设置回复的隐藏饱食度<br><code>isMeat()</code>：设为肉类<br><code>alwaysEat()</code>：设为在任意场合都能吃(即使在满腹时)<br><code>fast()</code>：设为fastFood(进食速度加快)<br><code>effect(Supplier&lt;&gt;)</code>：设置食用获得的效果以及概率</p><p>FoodProperties需要通过Builder()创建，且在最后调用build()完成创建。effect中的三个参数为持续时间，等级，概率。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Properties().food(<span class="keyword">new</span> <span class="title class_">FoodProperties</span>.Builder()</span><br><span class="line">             .nutrition(<span class="number">4</span>)</span><br><span class="line">             .saturationMod(<span class="number">2</span>)</span><br><span class="line">.effect(()-&gt;<span class="keyword">new</span> <span class="title class_">MobEffectInstance</span>(MobEffects.FIRE_RESISTANCE, <span class="number">200</span>, <span class="number">0</span>), <span class="number">0.5F</span>))</span><br><span class="line">             .build());</span><br></pre></td></tr></table></div></figure>        <h3 id="Item-getUseDuration-ItemStack"   >          <a href="#Item-getUseDuration-ItemStack" class="heading-link"><i class="fas fa-link"></i></a><a href="#Item-getUseDuration-ItemStack" class="headerlink" title="Item#getUseDuration(ItemStack)"></a>Item#getUseDuration(ItemStack)</h3>      <p>可以自定义吃东西花费的时间</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUseDuration</span><span class="params">(ItemStack itemstack)</span>&#123;</span><br><span class="line"><span class="comment">//通常的食物为32,fastFood为16</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="其他method"   >          <a href="#其他method" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他method" class="headerlink" title="其他method"></a>其他method</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加物品提示</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendHoverText</span><span class="params">(ItemStack itemStack, <span class="meta">@Nullable</span> Level level_, List&lt;Component&gt; pTooltipComponents, TooltipFlag pIsAdvanced)</span>&#123;</span><br><span class="line">pTooltipComponents.add(<span class="keyword">new</span> <span class="title class_">TranslatableComponent</span>(<span class="string">&quot;message_ID&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li><code>useOn</code>：当使用道具右键方块时调用</li><li><code>interactLivingEntity</code>：当右键一个实体时调用</li><li><code>hurtEnemy</code>：当玩家用物品攻击一个实体时调用</li><li><code>onCraftedBy</code>：当从工作台拿下物品时调用</li><li><code>inventoryTick</code>：当物品在物品栏时每tick调用</li><li><code>isValidRepairItem</code>：第二个物品能否用于在铁砧修复第一个物品</li></ul>        <h2 id="ItemStack-物品堆"   >          <a href="#ItemStack-物品堆" class="heading-link"><i class="fas fa-link"></i></a><a href="#ItemStack-物品堆" class="headerlink" title="ItemStack-物品堆"></a>ItemStack-物品堆</h2>              <h3 id="ItemStack-getItem"   >          <a href="#ItemStack-getItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#ItemStack-getItem" class="headerlink" title="ItemStack#getItem()"></a>ItemStack#getItem()</h3>      <p>返回当前物品格中的物品，如果为空则返回<code>Items.AIR</code></p>        <h3 id="ItemStack-hurtAndBreak-int-T-Consumer-lt-T-gt"   >          <a href="#ItemStack-hurtAndBreak-int-T-Consumer-lt-T-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#ItemStack-hurtAndBreak-int-T-Consumer-lt-T-gt" class="headerlink" title="ItemStack#hurtAndBreak(int , T , Consumer&lt;T&gt; )"></a>ItemStack#hurtAndBreak(int , T , Consumer&lt;T&gt; )</h3>              <h2 id="IForgeItem接口"   >          <a href="#IForgeItem接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#IForgeItem接口" class="headerlink" title="IForgeItem接口"></a>IForgeItem接口</h2>      <p>该接口包含许多供制作者重写的方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断能否禁用盾牌5秒(原版中斧类武器可以)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canDisableShield</span><span class="params">(ItemStack stack, ItemStack shield, LivingEntity entity, LivingEntity attacker)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> <span class="keyword">instanceof</span> AxeItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回燃烧时间(tick)，0为非燃料，-1将交给原版逻辑判断</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getBurnTime</span><span class="params">(ItemStack itemStack, <span class="meta">@Nullable</span> RecipeType&lt;?&gt; recipeType)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Register-注册"   >          <a href="#Register-注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#Register-注册" class="headerlink" title="Register-注册"></a>Register-注册</h2>      <p>注册有两种主要方法，这里选择在item目录下创建一个item注册器类。</p><p>注册时，register()的第一个参数为item_ID，唯一且<strong>不能出现大写字母</strong>。</p><p>第二个参数为一个item的实例。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemRegistry</span> &#123;</span><br><span class="line"><span class="comment">//创建注册器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Item&gt; ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, MOD_ID);</span><br><span class="line"><span class="comment">//注册有自定义类的物品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;Item&gt; testItem = ITEMS.register(<span class="string">&quot;test_item1&quot;</span>, ()-&gt;<span class="keyword">new</span> <span class="title class_">TestItem</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以在注册时临时创建一个物品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;Item&gt; testItem = ITEMS.register(<span class="string">&quot;test_item2&quot;</span>, ()-&gt;<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Properties</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在主类中调用注册器的注册事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMod</span>&#123;</span><br><span class="line">/.../</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CustomMod</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">IEventBus</span> <span class="variable">eventBus</span> <span class="operator">=</span> FMLJavaModLoadingContext.get().getModEventBus();</span><br><span class="line">ItemRegistry.ITEMS.register(eventBus);</span><br><span class="line">&#125;</span><br><span class="line">/.../</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="材质和模型"   >          <a href="#材质和模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#材质和模型" class="headerlink" title="材质和模型"></a>材质和模型</h2>      <p>在<code>src/main/resources</code>目录下，需要创建如下结构，来给物品附上材质和模型。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">├── assets</span><br><span class="line">│   └── MOD_ID</span><br><span class="line">│       ├── models</span><br><span class="line">│       │   └── item</span><br><span class="line">│       │       └── item_ID.json</span><br><span class="line">│       └── textures</span><br><span class="line">│           └── item</span><br><span class="line">│               └── item_ID.png</span><br><span class="line">├── lang</span><br><span class="line">│   └── en_us.json</span><br></pre></td></tr></table></div></figure>        <h3 id="models-x2F-item-ID-json"   >          <a href="#models-x2F-item-ID-json" class="heading-link"><i class="fas fa-link"></i></a><a href="#models-x2F-item-ID-json" class="headerlink" title="models &#x2F; item_ID.json"></a>models &#x2F; item_ID.json</h3>      <figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;item/generated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;layer0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MOD_ID:item/item_ID&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure><p><code>parent</code>指定了该模型的父模型，<code>textures</code>指定了具体的材质，材质放在<code>assets/textures/item</code>下。</p>        <h3 id="本地化"   >          <a href="#本地化" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h3>      <figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item.MOD_ID.item_ID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;物品名称&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="Tools-工具"   >          <a href="#Tools-工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#Tools-工具" class="headerlink" title="Tools-工具"></a>Tools-工具</h2>      <p>Tools继承了<code>Item</code>类。它们的实现主要依赖继承特定类，<code>TierSortingRegistry</code>，和tags。</p>        <h3 id="Tier（品质）"   >          <a href="#Tier（品质）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Tier（品质）" class="headerlink" title="Tier（品质）"></a>Tier（品质）</h3>      <p>原版的Tiers有六种[品质](<span class="exturl"><a class="exturl__link"   href="https://minecraft.fandom.com/zh/wiki/%E5%93%81%E8%B4%A8" >品质 - Minecraft Wiki，最详细的我的世界百科 (fandom.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)<br><code>Wood</code>,<code>Stone</code>,<code>Iron</code>,<code>Diamond</code>,<code>Netherite</code>,<code>Gold</code><br>你可以实例化ForgeTier创建自定义的工具品质：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomTier</span>&#123;</span><br><span class="line">    <span class="comment">//前四个参数为挖掘等级,耐久度,挖掘倍率,伤害加成,附魔能力</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ForgeTier CUSTOMTIER=<span class="keyword">new</span> <span class="title class_">ForgeTier</span>(</span><br><span class="line">        <span class="number">1</span>,<span class="number">100</span>,<span class="number">1.5f</span>,<span class="number">2f</span>,<span class="number">22</span>,</span><br><span class="line">        BlockTags.NEEDS_DIAMOND_TOOL,</span><br><span class="line">        ()-&gt;Ingredient.of(ItemRegistry.test_Item.get()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>你也可以实现<code>Tier</code>接口自定义工具品质：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CustomTier</span> <span class="keyword">implements</span> <span class="title class_">Tier</span>&#123;</span><br><span class="line">EXAMPLE_TIER(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1.0F</span>, <span class="number">1.0F</span>, <span class="number">1</span>, () -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> Ingredient.of(Items.Custom_Ingredient);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> level;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> uses;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> speed;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> damage;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> enchantmentValue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LazyValue&lt;Ingredient&gt; repairIngredient;</span><br><span class="line"></span><br><span class="line">CustomTier(<span class="type">int</span> level, <span class="type">int</span> durability, <span class="type">float</span> miningSpeed, <span class="type">float</span> damage, <span class="type">int</span> enchantability, Supplier&lt;Ingredient&gt; repairIngredient) &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">        <span class="built_in">this</span>.uses = durability;</span><br><span class="line">        <span class="built_in">this</span>.speed = miningSpeed;</span><br><span class="line">        <span class="built_in">this</span>.damage = damage;</span><br><span class="line">        <span class="built_in">this</span>.enchantmentValue = enchantability;</span><br><span class="line">        <span class="built_in">this</span>.repairIngredient = <span class="keyword">new</span> <span class="title class_">LazyValue</span>&lt;&gt;(repairIngredient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>接口中的方法：</p><ul><li><code>getUses</code>：返回该品质的耐久。</li><li><code>getSpeed</code>：返回该品质的挖掘效率乘数。</li><li><code>getAttackDamageBonus</code>：返回该品质基本攻击伤害。</li><li><code>getLevel</code>：返回该品质的挖掘等级(原版为0-4)</li><li><code>getEnchantmentValue</code>：返回该品质的附魔效益</li><li><code>getRepairIngredient</code>：返回用于修复该品质工具的材料</li><li><code>getTag</code>：以<code>Tag&lt;Block&gt;</code>的形式返回该品质的工具可以挖掘的方块，命名格式为：<code>&lt;modid&gt;:needs_&lt;tier_name&gt;_tool</code></li></ul>        <h3 id="TierSortingRegistry"   >          <a href="#TierSortingRegistry" class="heading-link"><i class="fas fa-link"></i></a><a href="#TierSortingRegistry" class="headerlink" title="TierSortingRegistry"></a>TierSortingRegistry</h3>      <p>通过static声明，使Tiers比Items先注册。一个tier可以由<code>TierSortingRegistry#registerTier</code>注册。所有未在sorting system中定义的tier都会采用原版默认行为。<br><span class="exturl"><a class="exturl__link"   href="https://forge.gemwire.uk/wiki/Making_Tools" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="创建工具"   >          <a href="#创建工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建工具" class="headerlink" title="创建工具"></a>创建工具</h3>      <p>继承对应的工具类可以创建工具。<br>分别为<code>SwordItem</code>,<code>PickaxeItem</code>,<code>AxeItem</code>,<code>ShovelItem</code>,<code>HoeItem</code></p>        <h3 id="SwordItem-剑类"   >          <a href="#SwordItem-剑类" class="heading-link"><i class="fas fa-link"></i></a><a href="#SwordItem-剑类" class="headerlink" title="SwordItem-剑类"></a>SwordItem-剑类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用该剑对一个实体造成伤害时调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hurtEnemy</span><span class="params">(ItemStack item, LivingEntity pTarget, LivingEntity pAttacker)</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="模型和材质"   >          <a href="#模型和材质" class="heading-link"><i class="fas fa-link"></i></a><a href="#模型和材质" class="headerlink" title="模型和材质"></a>模型和材质</h3>      <figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;item/handheld&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;layer0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MOD_ID:item/tool_ID&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="Armor-防具"   >          <a href="#Armor-防具" class="heading-link"><i class="fas fa-link"></i></a><a href="#Armor-防具" class="headerlink" title="Armor-防具"></a>Armor-防具</h2>              <h3 id="自定义防具材料"   >          <a href="#自定义防具材料" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义防具材料" class="headerlink" title="自定义防具材料"></a>自定义防具材料</h3>      <p>利用快捷键<code>ctrl+h</code>可以查看已实现接口的类，找到<code>net.minecraft.world.item.ArmorMaterials</code>，复制并修改即可。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CustomArmorMaterials</span> <span class="keyword">implements</span> <span class="title class_">ArmorMaterial</span> &#123;</span><br><span class="line"><span class="comment">//注意点：该数组为防具的耐久基数，并且是从脚到头(靴子到头盔)的顺序。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] HEALTH_PER_SLOT = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">11</span>&#125;;</span><br><span class="line">    <span class="comment">//注意点：复制后getName()要改成如下，&quot;MOD_ID:name&quot;</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MOD_ID+<span class="string">&quot;:&quot;</span>+<span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="注册"   >          <a href="#注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册" class="headerlink" title="注册"></a>注册</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;Item&gt; CUSTOM_HELMET=ITEMS.register(<span class="string">&quot;custom_helmet&quot;</span>,()-&gt;<span class="keyword">new</span> <span class="title class_">ArmorItem</span>(CustomArmorMaterials.MATERIAL,EquipmentSlot.HEAD,<span class="keyword">new</span> <span class="title class_">Item</span>.Properties()));</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>类型</th><th>EquipmentSlot</th></tr></thead><tbody><tr><td>头盔</td><td>EquipmentSlot.HEAD</td></tr><tr><td>胸甲</td><td>EquipmentSlot.CHEST</td></tr><tr><td>护腿</td><td>EquipmentSlot.LEGS</td></tr><tr><td>靴子</td><td>EquipmentSlot.FEET</td></tr></tbody></table></div>        <h3 id="材质"   >          <a href="#材质" class="heading-link"><i class="fas fa-link"></i></a><a href="#材质" class="headerlink" title="材质"></a>材质</h3>      <p>models&#x2F;json和其他item相同。<br>盔甲的材质要放在以下目录</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">├── assets</span><br><span class="line">│   └── MOD_ID</span><br><span class="line">│       ├── textures</span><br><span class="line">│       │   └── models</span><br><span class="line">│       │       └── armorID_layer_1.png</span><br><span class="line">│       │       └── armorID_layer_2.png</span><br></pre></td></tr></table></div></figure>        <h3 id="特殊效果"   >          <a href="#特殊效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#特殊效果" class="headerlink" title="特殊效果"></a>特殊效果</h3>      <p>为了实现特殊效果，应自定义Armor类，并继承<code>ArmorItem</code></p>        <h2 id="Projectile-远程武器"   >          <a href="#Projectile-远程武器" class="heading-link"><i class="fas fa-link"></i></a><a href="#Projectile-远程武器" class="headerlink" title="Projectile-远程武器"></a>Projectile-远程武器</h2>              <h2 id="BlockEntityWithoutLevelRenderer"   >          <a href="#BlockEntityWithoutLevelRenderer" class="heading-link"><i class="fas fa-link"></i></a><a href="#BlockEntityWithoutLevelRenderer" class="headerlink" title="BlockEntityWithoutLevelRenderer"></a>BlockEntityWithoutLevelRenderer</h2>      <p>这是一个处理道具动态渲染的方法。</p>        <h2 id="Using"   >          <a href="#Using" class="heading-link"><i class="fas fa-link"></i></a><a href="#Using" class="headerlink" title="Using"></a>Using</h2>      <p><code>BlockEntityWithoutLevelRenderer</code>可以让你通过<code>public void renderByItem(ItemStack itemStack, TransformType transformType, PoseStack poseStack, MultiBufferSource bufferSource, int combinedLight, int combinedOverlay)</code>渲染你的item。<br>（以下简称BEWLR）</p><p>为了使用BEWLR，该Item必须满足它的model的<code>BakedModel#isCustomRenderer</code>返回true。如果它未设置BEWLR，会调用默认的<code>ItemRenderer#getBlockEntityRenderer</code>。</p><p>给一个item设置BEWLR，需要有一个<code>IItemRenderProperties</code>的匿名实例在<code>Item#initializeClient</code>方法中。在匿名实例中，<code>IItemRenderProperties#getItemStackRenderer</code>需要被重写，并返回你的BEWLR。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In your item class</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initializeClient</span><span class="params">(Consumer&lt;IItemRenderProperties&gt; consumer)</span> &#123;</span><br><span class="line">  consumer.accept(<span class="keyword">new</span> <span class="title class_">IItemRenderProperties</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BlockEntityWithoutLevelRenderer <span class="title function_">getItemStackRenderer</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> myBEWLRInstance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>※ 每个模组只能有一个自定义BEWLR的实例</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Items&quot;   &gt;
          &lt;a href=&quot;#Items&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Items&quot; class=&quot;headerlink&quot; title=&quot;Items&quot;&gt;&lt;/a&gt;Items&lt;/h1&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Projectile</title>
    <link href="https://lzmustb.github.io/2022/05/08/my-forge-learning-projectile/"/>
    <id>https://lzmustb.github.io/2022/05/08/my-forge-learning-projectile/</id>
    <published>2022-05-08T00:22:14.000Z</published>
    <updated>2022-07-29T04:21:24.106Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Projectile-自定义投掷物"   >          <a href="#Projectile-自定义投掷物" class="heading-link"><i class="fas fa-link"></i></a><a href="#Projectile-自定义投掷物" class="headerlink" title="Projectile 自定义投掷物"></a>Projectile 自定义投掷物</h1>              <h2 id="相关基类"   >          <a href="#相关基类" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关基类" class="headerlink" title="相关基类"></a>相关基类</h2>      <p><code>Projectile</code></p><ul><li>存储投掷物的所有者</li><li>包含发射的方法，设置移动方向</li><li>has methods for what happens for reacting to impacts</li><li>不包含移动和碰撞检测的逻辑</li></ul><p><code>ThrowableProjectile &gt; Projectile</code></p><ul><li>在tick方法中包含移动和碰撞检测</li></ul><p><code>ThrowableItemProjectile &gt; ThrowableProjectile</code></p><ul><li>同时呈现为物品</li></ul><p><code>AbstractArrow &gt; Projectile</code></p><ul><li>在tick方法中包含移动和碰撞检测</li><li>可以旋转并朝向移动方向</li><li>穿透效果</li><li>基于速度和<code>setBaseDamage</code>造成实际伤害</li><li>掉在地上并且可被拾取</li><li>可被<code>ArrowItem</code>类的武器发射</li></ul><p><code>Arrow &gt; AbstractArrow</code></p><ul><li>附加药水效果</li></ul>        <h2 id="Rendering"   >          <a href="#Rendering" class="heading-link"><i class="fas fa-link"></i></a><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2>      <p>为了让你的投掷物被玩家们看见，你必须将它和<code>EntitiyRenderer</code>绑定。</p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;Projectile-自定义投掷物&quot;   &gt;
          &lt;a href=&quot;#Projectile-自定义投掷物&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-Blocks</title>
    <link href="https://lzmustb.github.io/2022/05/07/my-forge-learning-block/"/>
    <id>https://lzmustb.github.io/2022/05/07/my-forge-learning-block/</id>
    <published>2022-05-07T00:08:39.000Z</published>
    <updated>2022-05-30T10:51:23.493Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Blocks"   >          <a href="#Blocks" class="heading-link"><i class="fas fa-link"></i></a><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h1>      <span id="more"></span>        <h2 id="Register-注册"   >          <a href="#Register-注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#Register-注册" class="headerlink" title="Register-注册"></a>Register-注册</h2>      <p>地面上的方块是<code>Block</code>，物品栏的方块是继承了<code>Item</code>的<code>BlockItem</code>。因此在注册方块的同时，通常需要同时注册方块物品。(也有像水方块等例外，其没有直接对应的物品) 因此可以将注册方法进行包装，便于后续注册方块。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BLOCKS注册器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Block&gt; BLOCKS=DeferredRegister.create(ForgeRegistries.BLOCKS, MOD_ID);</span><br><span class="line"><span class="comment">//BlockItem的注册方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistryObject&lt;Item&gt; <span class="title function_">registryBlockItem</span><span class="params">(String name, Supplier&lt;T&gt; block, CreativeModeTab tab)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ItemRegistry.ITEMS.register(name,()-&gt;<span class="keyword">new</span> <span class="title class_">BlockItem</span>(block.get(), <span class="keyword">new</span> <span class="title class_">Item</span>.Properties().tab(tab)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Block的注册方法，并调用BlockItem注册方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistryObject&lt;T&gt; <span class="title function_">registryBlock</span><span class="params">(String name,RegistryObject&lt;T&gt; block,CreativeModeTab tab)</span>&#123;</span><br><span class="line">    RegistryObject&lt;T&gt; newBlock=BLOCKS.register(name,block);</span><br><span class="line">    registryBlockItem(name,newBlock,tab);</span><br><span class="line">    <span class="keyword">return</span> newBlock;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册Block</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;Block&gt; TEST_BLOCK =registryBlockWithItem(<span class="string">&quot;test_block&quot;</span>,()-&gt;<span class="keyword">new</span> <span class="title class_">TestBlock</span>(),CustomTab.instance);</span><br></pre></td></tr></table></div></figure>        <h2 id="Properties-属性"   >          <a href="#Properties-属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#Properties-属性" class="headerlink" title="Properties-属性"></a>Properties-属性</h2>      <p>原版方块的属性可在<code>net.minecraft.world.level.block.Blocks</code>中查看</p>        <h3 id="Properties方法一览"   >          <a href="#Properties方法一览" class="heading-link"><i class="fas fa-link"></i></a><a href="#Properties方法一览" class="headerlink" title="Properties方法一览"></a>Properties方法一览</h3>      <p><code>of(Material)</code>：设置方块的材质<br><code>destroyTime(float)</code>：设置挖掘时间<br><code>explosionResistance(float)</code>：设置爆炸抗性(须大于0F)<br><code>strength(float，float)</code>：调用以上两个方法<br><code>requireCorrectToolForDrops()</code><br><code>sound(SoundType)</code>：详见<span class="exturl"><a class="exturl__link"   href="https://mcforge.readthedocs.io/en/1.18.x/gameeffects/sounds/" >sounds</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><code>lightLevel((state)-&gt;)</code>：设置方块的亮度，通常为0~15(可通过state属性控制)<br><code>friction</code>：摩擦力，默认0.6，冰块为0.98。<br><code>speedFactor(float)</code>：对速度的影响，默认为1F(灵魂沙为0.4F,减速至40%左右)<br><code>jumpFactor(float)</code>：对跳跃的影响,默认为1F(蜂蜜块为0.5F，跳跃高度减至15%)<br><code>instabreak()</code><br><code>randomTicks()</code>：接收随机刻<br><code>noCollission()</code>：设为无碰撞方块(按钮等)但对速度，跳跃的影响依然生效<br><code>noOcclusion()</code>：是否会使玩家窒息<br><code>dynamicShape()</code><br><code>noDrops()</code>：无掉落<br><code>lootFrom()</code><br><code>air()</code><br><code>isValidSpawn(BlockBehaviour.StateArgumentPredicate&lt;EntityType&lt;?&gt;&gt;)</code><br><code>isRedstoneConductor(BlockBehaviour.StatePredicate)</code><br><code>copy(Block.BlockBehaviour)</code>：复制另一个方块的属性</p><p>所有这些方法都可以连锁调用。</p>        <h2 id="IForgeBlock接口"   >          <a href="#IForgeBlock接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#IForgeBlock接口" class="headerlink" title="IForgeBlock接口"></a>IForgeBlock接口</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果为true，会作为燃烧的方块对生物造成伤害</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isBurning</span><span class="params">(BlockState state, BlockGetter level, BlockPos pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> == Blocks.FIRE || <span class="built_in">this</span> == Blocks.LAVA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="其他Method"   >          <a href="#其他Method" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他Method" class="headerlink" title="其他Method"></a>其他Method</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家右键方块时调用</span></span><br><span class="line"><span class="keyword">public</span> InteractionResult <span class="title function_">use</span><span class="params">(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit)</span></span><br><span class="line"><span class="comment">//返回true时，方块可以种植植物</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canSustainPlant</span><span class="params">(BlockState state, BlockGetter world, BlockPos pos, Direction facing, IPlantable plantable)</span></span><br><span class="line"><span class="comment">//接收随机刻</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRandomlyTicking</span><span class="params">(BlockState state)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">randomTick</span><span class="params">(BlockState state, ServerLevel world, BlockPos pos, Random rand)</span></span><br><span class="line"><span class="comment">//玩家踩在方块上时调用(例子为施加加速效果)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stepOn</span><span class="params">(Level level,BlockPos pos,BlockState state,Entity entity)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!level.isClientSide())&#123;</span><br><span class="line"><span class="keyword">if</span>(entity <span class="keyword">instanceof</span> LivingEntity)&#123;</span><br><span class="line">            LivingEntity livingEntity=((LivingEntity)entity);</span><br><span class="line">            livingEntity.addEffect(<span class="keyword">new</span> <span class="title class_">MobEffectInstance</span>(MobEffects.MOVEMENT_SPEED,<span class="number">300</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（被实体）放置时调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPlacedBy</span><span class="params">(Level level, BlockPos pos, BlockState state, <span class="meta">@Nullable</span> LivingEntity placer, ItemStack stack)</span></span><br><span class="line"><span class="comment">//玩家左键方块时调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(BlockState state, Level level, BlockPos pos, Player player)</span></span><br><span class="line"><span class="comment">//在玩家破坏方块前调用(原版的活塞，TNT重写了此方法)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playerWillDestroy</span><span class="params">(Level level, BlockPos pos, BlockState state, Player player)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.playerWillDestroy(level,pos,state,player);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当有实体与方块碰撞/重叠时调用(如篝火)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entityInside</span><span class="params">(BlockState state, Level level, BlockPos pos, Entity entity)</span></span><br></pre></td></tr></table></div></figure><ul><li><code>playerDestroy </code>(used by beehives to release angry bees when you break them)</li><li><code>onRemove </code>: called when the block is destroyed for any reason</li><li><code>handleRain </code>: 1&#x2F;16 chance to be called each tick while its raining (used by cauldrons to fill with water)</li><li><code>fallOn </code>: called when an entity falls on the block. Deals the fall damage by calling <code>Entity.causeFallDamage(distance, damageMultiplier) </code>. (used by farm land to break the crop)</li><li><code>onPlace</code></li><li><code>getExpDrop </code>returns the number of experience points to give when broken (like some vanilla ores)</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use()使用案例</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> InteractionResult <span class="title function_">use</span><span class="params">(BlockState p_60503_, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult result)</span> &#123;</span><br><span class="line">    <span class="type">ItemStack</span> <span class="variable">held</span> <span class="operator">=</span> player.getItemInHand(hand);</span><br><span class="line">    <span class="keyword">if</span> (!world.isClientSide() &amp;&amp; held.getItem() == Items.GUNPOWDER) &#123;</span><br><span class="line">        world.explode(player, pos.getX(), pos.getY(), pos.getZ(), <span class="number">4.0F</span>, <span class="literal">true</span>, Explosion.BlockInteraction.DESTROY);</span><br><span class="line">        held.shrink(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> InteractionResult.CONSUME;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> InteractionResult.FAIL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Stair-x2F-Slab-x2F-Fence-x2F-Gate"   >          <a href="#Stair-x2F-Slab-x2F-Fence-x2F-Gate" class="heading-link"><i class="fas fa-link"></i></a><a href="#Stair-x2F-Slab-x2F-Fence-x2F-Gate" class="headerlink" title="Stair&#x2F;Slab&#x2F;Fence&#x2F;Gate"></a>Stair&#x2F;Slab&#x2F;Fence&#x2F;Gate</h2>      <p>楼梯，台阶，栅栏，栅栏门</p>        <h2 id="Door-x2F-Trapdoor-x2F-Button-x2F-PressurePlate"   >          <a href="#Door-x2F-Trapdoor-x2F-Button-x2F-PressurePlate" class="heading-link"><i class="fas fa-link"></i></a><a href="#Door-x2F-Trapdoor-x2F-Button-x2F-PressurePlate" class="headerlink" title="Door&#x2F;Trapdoor&#x2F;Button&#x2F;PressurePlate"></a>Door&#x2F;Trapdoor&#x2F;Button&#x2F;PressurePlate</h2>      <p>门&#x2F;活板门&#x2F;按钮&#x2F;压力板</p>        <h2 id="透明-x2F-半透明方块"   >          <a href="#透明-x2F-半透明方块" class="heading-link"><i class="fas fa-link"></i></a><a href="#透明-x2F-半透明方块" class="headerlink" title="透明&#x2F;半透明方块"></a>透明&#x2F;半透明方块</h2>      <p>继承<code>GlassBlock</code>，（或其父类）</p>        <h2 id="ItemBlockRenderTypes"   >          <a href="#ItemBlockRenderTypes" class="heading-link"><i class="fas fa-link"></i></a><a href="#ItemBlockRenderTypes" class="headerlink" title="ItemBlockRenderTypes"></a>ItemBlockRenderTypes</h2>      <div class="table-container"><table><thead><tr><th>ItemBlockRenderTypes</th><th align="left">Block</th></tr></thead><tbody><tr><td>RenderType.tripwire()</td><td align="left">绊线钩</td></tr><tr><td>cutoutMipped()</td><td align="left">草方块，铁栏杆，玻璃板</td></tr><tr><td>cutout()</td><td align="left">玻璃，床，门，蜘蛛网，各种花草</td></tr><tr><td>translucent()</td><td align="left">染色玻璃，粘液块，蜂蜜块</td></tr></tbody></table></div>        <h2 id="应用自定义模型"   >          <a href="#应用自定义模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用自定义模型" class="headerlink" title="应用自定义模型"></a>应用自定义模型</h2>      <p>设置碰撞箱：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE</span> <span class="operator">=</span> Block.box(x1,y1,z1,x2,y2,z2);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> VoxelShape <span class="title function_">getShape</span><span class="params">(BlockState state,BlockGetter level,BlockPos,pos,CollisionContext,context)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SHAPE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="Block-States"   >          <a href="#Block-States" class="heading-link"><i class="fas fa-link"></i></a><a href="#Block-States" class="headerlink" title="Block States"></a>Block States</h1>              <h2 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h2>      <p>一个特定的方块只存在一个实例，位于对应的注册器中。而BlockStates就是在此基础上附加了BlockPosition，BlockProperties，BlockStateProperties的实例，并通过<code>World(Level)</code>保存和修改。</p><p>方块的每个属性（property）都通过<code>Property&lt;?&gt;</code>的一个实例描述。属性包括但不限于：<br>instruments（<code>EnumProperty&lt;NoteBlockInstrument&gt;</code>）</p><p>facing（<code>DirectionProperty</code>）</p><p>poweredness（<code>Property&lt;Boolean&gt;</code>）</p>        <h2 id="使用BlockState-Properties"   >          <a href="#使用BlockState-Properties" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用BlockState-Properties" class="headerlink" title="使用BlockState Properties"></a>使用BlockState Properties</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomBlock</span> <span class="keyword">extends</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="comment">//创建property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BooleanProperty CLICKED=BooleanProperty.create(<span class="string">&quot;clicked&quot;</span>);</span><br><span class="line">    <span class="comment">//关联property</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createBlockStateDefinition</span><span class="params">(StateDefinition.Builder&lt;Block, BlockState&gt; pBuilder)</span> &#123;</span><br><span class="line">        pBuilder.add(CLICKED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用property</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InteractionResult <span class="title function_">use</span><span class="params">(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!level.isClientSide()&amp;&amp;hand==InteractionHand.MAIN_HAND)&#123;</span><br><span class="line">    <span class="comment">//获取当前CLICKED值</span></span><br><span class="line">    <span class="type">boolean</span> currentState=state.getValue(CLICKED);</span><br><span class="line">    <span class="comment">//修改CLICKED的值</span></span><br><span class="line">    level.setBlock(pos,state.setValue(CLICKED,!currentState),<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> InteractionResult.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用<code>BlockState#getValue(Property&lt;?&gt;)</code>可以获得属性的值。<br>调用<code>BlockState#setValue(Property&lt;T&gt;,T)</code>设置属性的值。<br>原版提供的实现如下：</p><ul><li><p><code>IntegerProperty</code>实现：<code>Property&lt;Integer&gt;</code></p><ul><li>创建：<code>IntegerProperty#create(String propertyName, int minimum, int maximum)</code></li></ul></li><li><p><code>BooleanProperty</code> 实现：<code>Property&lt;Boolean&gt;</code></p><ul><li>创建：<code>BooleanProperty#create(String propertyName)</code></li></ul></li><li><p><code>EnumProperty&lt;E extends Enum&lt;E&gt;&gt;</code>实现：<code>Property&lt;E&gt;</code></p><ul><li><p>创建：<code>EnumProperty#create(String propertyName, Class&lt;E&gt; enumClass)</code><br>※也可以仅使用Enum中的一个子集</p><p>（见<code>EnumProperty#create</code>重载）</p></li></ul></li><li><p><code>DirectionProperty</code>简化<code>EnumProperty&lt;Direction&gt;</code></p><ul><li>一些方法：<code>DirectionProperty.create(&quot;&lt;name&gt;&quot;, Direction.Plane.HORIZONTAL)</code></li><li><code>DirectionProperty.create(&quot;&lt;name&gt;&quot;, Direction.Axis.X)</code></li></ul></li></ul><p><code>BlockStateProperties</code>类包含了原版共通的属性，而无需自己创建。</p><p>当你有期望的<code>Property&lt;&gt;</code>，在你的block类中重写<code>Block#createBlockStateDefinition(StateDefinition$Builder)</code>，并在其中调用<code>StateDefinition$Builder#add(Property)</code>。</p><p>每个block都会有默认的state设置。你可以通过在构造器中调用<code>Block#registerDefaultState(BlockState)</code>修改默认属性。<br><code>DoorBlock</code>的默认属性：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.registerDefaultState(</span><br><span class="line">  <span class="built_in">this</span>.stateDefinition.any()</span><br><span class="line">    .setValue(FACING, Direction.NORTH)</span><br><span class="line">    .setValue(OPEN, <span class="literal">false</span>)</span><br><span class="line">    .setValue(HINGE, DoorHingeSide.LEFT)</span><br><span class="line">    .setValue(POWERED, <span class="literal">false</span>)</span><br><span class="line">    .setValue(HALF, DoubleBlockHalf.LOWER)</span><br><span class="line">);</span><br></pre></td></tr></table></div></figure><p>如果你希望在放置方块时改变<code>BlockState</code>，（比如依照玩家的朝向），你可以重写<code>Block#getStateForPlacement(BlockPlaceContext)</code></p><p>因为所有可能的<code>BlockState</code>都在初始化时生成，你可以使用<code>==</code>判断两个<code>BlockState</code>是否相等。</p><p>You can get and place <code>BlockState</code>‘s in the level using <code>Level#setBlockAndUpdate(BlockPos, BlockState)</code> and <code>Level#getBlockState(BlockState)</code>. If you are placing a <code>Block</code>, call <code>Block#defaultBlockState()</code> to get the “default” state, and use subsequent calls to <code>BlockState#setValue(Property&lt;T&gt;, T)</code> as stated above to achieve the desired state.</p>        <h2 id="BlockStates和模型的绑定"   >          <a href="#BlockStates和模型的绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#BlockStates和模型的绑定" class="headerlink" title="BlockStates和模型的绑定"></a>BlockStates和模型的绑定</h2>      <p>文件路径</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">├── assets</span><br><span class="line">│   └── MOD_ID</span><br><span class="line">│       ├── blockstates</span><br><span class="line">│       │   └── CustomBlock.json      </span><br></pre></td></tr></table></div></figure><p>文件内</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;variants&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clicked=false&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MOD_ID:block/custom_block_off&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="attr">&quot;clicked=true&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MOD_ID:block/custom_block_on&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Blocks&quot;   &gt;
          &lt;a href=&quot;#Blocks&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Blocks&quot; class=&quot;headerlink&quot; title=&quot;Blocks&quot;&gt;&lt;/a&gt;Blocks&lt;/h1&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Forge1.18-本地化</title>
    <link href="https://lzmustb.github.io/2022/05/06/my-forge-learning-localization/"/>
    <id>https://lzmustb.github.io/2022/05/06/my-forge-learning-localization/</id>
    <published>2022-05-06T07:51:08.000Z</published>
    <updated>2022-05-19T00:01:05.089Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Internationalization-and-localization"   >          <a href="#Internationalization-and-localization" class="heading-link"><i class="fas fa-link"></i></a><a href="#Internationalization-and-localization" class="headerlink" title="Internationalization and localization"></a>Internationalization and localization</h1>      <p>internationalization简称i18n，是一种让代码能够在不同语言下生效的设计。Localization则是将显示文字适应用户语言的过程。</p><span id="more"></span><p>i18n通过<em>translation keys</em>实现。translation key是一个字符串，用于识别一块可显示的文字，例如<code>block.minecraft.dirt</code>是Dirt block的translation key。</p>        <h2 id="Language-files"   >          <a href="#Language-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Language-files" class="headerlink" title="Language files"></a>Language files</h2>      <p>位于<code>assets/[namespace]/lang/[locale].json</code><br>例如<code>examplemod</code>的英文翻译位于<code>assets/examplemod/lang/en_us.json</code>。<br>翻译文件必须用UTF-8编码。</p>        <h2 id="Usage-with-Blocks-and-Items"   >          <a href="#Usage-with-Blocks-and-Items" class="heading-link"><i class="fas fa-link"></i></a><a href="#Usage-with-Blocks-and-Items" class="headerlink" title="Usage with Blocks and Items"></a>Usage with Blocks and Items</h2>      <p>方块，道具以及一些其他MC中的类已经提供了translation keys。这些translation keys可以通过重写<code>@getDescriptionId</code>定义。<em>Item also has</em><code>#getDescriptionId(ItemStack)</code> <em>which can be overridden to provide different translation keys depending on ItemStack NBT.</em></p><p><code>#getDescriptionId</code>默认返回<code>block</code>或<code>item</code>，例如，一个ID为<code>examplemod:example_item</code>的道具，其language file为：</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item.examplemod.example_item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Example Item Name&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="Localization-methods"   >          <a href="#Localization-methods" class="heading-link"><i class="fas fa-link"></i></a><a href="#Localization-methods" class="headerlink" title="Localization methods"></a>Localization methods</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://mcforge.readthedocs.io/en/1.18.x/concepts/internationalization/#localization-methods" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Internationalization-and-localization&quot;   &gt;
          &lt;a href=&quot;#Internationalization-and-localization&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Internationalization-and-localization&quot; class=&quot;headerlink&quot; title=&quot;Internationalization and localization&quot;&gt;&lt;/a&gt;Internationalization and localization&lt;/h1&gt;
      &lt;p&gt;internationalization简称i18n，是一种让代码能够在不同语言下生效的设计。Localization则是将显示文字适应用户语言的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="从零开始做mc模组" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%81%9Amc%E6%A8%A1%E7%BB%84/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
