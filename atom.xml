<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Distant Dreamer</title>
  
  <subtitle>No More Wasted Nights.</subtitle>
  <link href="https://lzmustb.github.io/atom.xml" rel="self"/>
  
  <link href="https://lzmustb.github.io/"/>
  <updated>2023-09-24T01:23:32.296Z</updated>
  <id>https://lzmustb.github.io/</id>
  
  <author>
    <name>Lzm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript与前端算法</title>
    <link href="https://lzmustb.github.io/2023/09/08/my-javascript-note/"/>
    <id>https://lzmustb.github.io/2023/09/08/my-javascript-note/</id>
    <published>2023-09-08T01:00:28.000Z</published>
    <updated>2023-09-24T01:23:32.296Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Javascript"   >          <a href="#Javascript" class="heading-link"><i class="fas fa-link"></i></a><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1>              <h2 id="ES6"   >          <a href="#ES6" class="heading-link"><i class="fas fa-link"></i></a><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2>              <h3 id="Map"   >          <a href="#Map" class="heading-link"><i class="fas fa-link"></i></a><a href="#Map" class="headerlink" title="Map"></a>Map</h3>      <p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。</p><p>为了解决这个问题，ES6 提供了 Map 数据结构。它也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p><p>也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“<strong>值—值</strong>”的对应，是一种更完善的 Hash 结构实现。</p><span id="more"></span><ul><li>实例化</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">//初始化map，通过数组表示键值对</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">   [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>],</span><br><span class="line">   [<span class="string">&#x27;age&#x27;</span>,<span class="number">16</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></div></figure><ul><li>方法</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="property">size</span> <span class="comment">//2</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//true</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//&#x27;Jack&#x27;</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;value&#x27;</span>); <span class="comment">//返回对象本身，可链式调用</span></span><br><span class="line">map.<span class="title function_">delete</span>(key); <span class="comment">//删除成功返回true</span></span><br><span class="line">map.<span class="title function_">clear</span>(); <span class="comment">//清除所有成员，无返回值</span></span><br><span class="line"></span><br><span class="line">&lt;!--遍历:--&gt;</span><br><span class="line">map.<span class="title function_">keys</span>(); <span class="comment">//返回键名的遍历器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">values</span>(); <span class="comment">//返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">entries</span>(); <span class="comment">//返回所有成员的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--与数组结合:--&gt;</span><br><span class="line">[...map.<span class="title function_">keys</span>()];</span><br><span class="line">[...map.<span class="title function_">values</span>()];</span><br><span class="line">[...map];</span><br><span class="line">[...map.<span class="title function_">entries</span>()];</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组filter创建新map</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">  [...map0].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></div></figure><p>※注意点</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有对同一个对象的引用，Map结构才将其视为同一个键</span></span><br><span class="line">map.<span class="title function_">set</span>([<span class="string">&#x27;a&#x27;</span>], <span class="number">555</span>);</span><br><span class="line">map.<span class="title function_">get</span>([<span class="string">&#x27;a&#x27;</span>]) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同样的值的两个实例，在 Map 结构中被视为两个键</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">map.<span class="title function_">set</span>(k1,<span class="number">1</span>);<span class="comment">//两者不同</span></span><br><span class="line">map.<span class="title function_">set</span>(k2,<span class="number">2</span>);<span class="comment">//两者不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined和null是两个键</span></span><br><span class="line"><span class="comment">//NaN为同一个键</span></span><br><span class="line"><span class="comment">//0，-0为同一个键</span></span><br></pre></td></tr></table></div></figure>        <h3 id="Class"   >          <a href="#Class" class="heading-link"><i class="fas fa-link"></i></a><a href="#Class" class="headerlink" title="Class"></a>Class</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.基本类语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"> name , age </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;,今年&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&#x27;岁&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会走路&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">say</span>(); <span class="comment">//成员方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">walk</span>(); <span class="comment">//静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.原型继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,age,gender</span>)&#123;</span><br><span class="line">        <span class="comment">//通过super可以调用父类构造器或方法</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span>=gender;</span><br><span class="line">        <span class="comment">//super作为对象时，指向父类的原型对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">func</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ES6中规定，子类的构造函数必须执行一次super函数。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.getter,setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用get和set关键字可设置存值函数和取值函数</span></span><br><span class="line"><span class="comment">//拦截该属性的存取行为</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="property">prop</span> = <span class="number">666</span>; <span class="comment">//setter: 666</span></span><br></pre></td></tr></table></div></figure><p>虽然引入了关键字，但ES6中并没有真的引入类这个概念，通过class定义的仍然是函数。class仅仅是通过更简单直观的语法去实现原型链继承。这种对语言功能没有影响、但是给程序员带来方便的新语法，被称为<strong>语法糖</strong>。</p><p>在 constructor 里面，super 的用法是 super()。它相当于一个函数，调用它等于调用父类的 constructor 。</p><p>但在普通方法里面，super 的用法是 super.prop 或者 super.method()，它相当于一个指向对象的 [[Prototype]] 的属性。</p>        <h2 id="前端算法"   >          <a href="#前端算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#前端算法" class="headerlink" title="前端算法"></a>前端算法</h2>              <h3 id="链表"   >          <a href="#链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#链表" class="headerlink" title="链表"></a>链表</h3>              <h4 id="双指针"   >          <a href="#双指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4>      <p>判断链表有无成环</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> slow = head;</span><br><span class="line"><span class="keyword">let</span> fast = head;</span><br><span class="line"><span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span>)&#123;</span><br><span class="line">fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">slow = slow.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">//快慢指针相遇说明链表成环</span></span><br><span class="line"><span class="keyword">if</span>(slow===fast) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="LRUcache"   >          <a href="#LRUcache" class="heading-link"><i class="fas fa-link"></i></a><a href="#LRUcache" class="headerlink" title="LRUcache"></a>LRUcache</h4>      <p>least recently use cache</p><p>Vue的<code>&lt;keep-alive&gt;</code>组件使用了<strong>LRUcache（最少最近使用缓存）</strong>。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">capacity</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxSize</span> = capacity; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key</span>)&#123;</span><br><span class="line">        <span class="comment">//若key对应的value存在，在返回之前将其排在队尾</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key))&#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key,tmp);</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">put</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key))&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span>&gt;=<span class="variable language_">this</span>.<span class="property">maxSize</span>)&#123;</span><br><span class="line">            <span class="comment">//如果新增元素将超过缓存容量，淘汰队首元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="位运算"   >          <a href="#位运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3>              <h4 id="组合权限认证"   >          <a href="#组合权限认证" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合权限认证" class="headerlink" title="组合权限认证"></a>组合权限认证</h4>      <ul><li>标记：通过二进制位标记某个属性</li><li>授权：<strong>或运算</strong>授予一个变量多个属性</li><li>校验：<strong>与运算</strong>判断有无该属性</li><li>删除：<strong>异或运算</strong>删除一个属性</li></ul><p>vue中判断虚拟DOM类型</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum <span class="title class_">ShapeFlags</span>&#123;</span><br><span class="line"><span class="variable constant_">ELEMENT</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="variable constant_">FUNCTIONAL_COMPONENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="variable constant_">STATEFUL_COMPONENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable constant_">COMPONENT</span> = <span class="title class_">ShapeFlags</span>.<span class="property">STATEFUL_COMPONENT</span> | <span class="title class_">ShapeFlags</span>.<span class="property">FUNCTIONAL_COMPONENT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>判断一个数是否为2的整数次幂</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n&gt;<span class="number">0</span> </span><br><span class="line">&amp;&amp;</span><br><span class="line">n &amp; (n-<span class="number">1</span>) === <span class="number">0</span> </span><br></pre></td></tr></table></div></figure><p>异或去重</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a^a^b^b^c <span class="comment">//c</span></span><br></pre></td></tr></table></div></figure>        <h3 id="树结构"   >          <a href="#树结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h3>      <p>递归翻转</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">invertTree=<span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line">[root.<span class="property">left</span>,root.<span class="property">right</span>]=[<span class="title function_">invertTree</span>(root.<span class="property">right</span>),<span class="title function_">invertTree</span>(root.<span class="property">left</span>)];</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="栈"   >          <a href="#栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈" class="headerlink" title="栈"></a>栈</h3>      <p>判断html标签是否闭合，简化路径</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack=[];</span><br><span class="line"><span class="keyword">let</span> paths=path.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;paths.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> p = paths[i];</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="string">&#x27;..&#x27;</span>)&#123;</span><br><span class="line">        spack.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p &amp;&amp; p!==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">     stack.<span class="title function_">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span>+stack.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="排序"   >          <a href="#排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#排序" class="headerlink" title="排序"></a>排序</h3>              <h4 id="快速排序"   >          <a href="#快速排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4>      <p> 每次将数组二分为<code>比x小的数组</code>和<code>比x大的数组</code>，递归至数组大小为1</p><p>O(n*logn）</p>        <h3 id="leftPad"   >          <a href="#leftPad" class="heading-link"><i class="fas fa-link"></i></a><a href="#leftPad" class="headerlink" title="leftPad"></a>leftPad</h3>      <p>二分优化</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">leftpad</span>(<span class="params">str,length,ch</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> len = length - str.<span class="property">length</span> ;</span><br><span class="line">    total = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &amp; <span class="number">1</span>)&#123; <span class="comment">//相当于len%2==1</span></span><br><span class="line">            total+=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> total+str</span><br><span class="line">        &#125;</span><br><span class="line">        ch+=ch;</span><br><span class="line">        len=len&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Javascript&quot;   &gt;
          &lt;a href=&quot;#Javascript&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h1&gt;
      
        &lt;h2 id=&quot;ES6&quot;   &gt;
          &lt;a href=&quot;#ES6&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;
      
        &lt;h3 id=&quot;Map&quot;   &gt;
          &lt;a href=&quot;#Map&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;
      &lt;p&gt;JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，ES6 提供了 Map 数据结构。它也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。&lt;/p&gt;
&lt;p&gt;也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“&lt;strong&gt;值—值&lt;/strong&gt;”的对应，是一种更完善的 Hash 结构实现。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基本乐理与声音设计</title>
    <link href="https://lzmustb.github.io/2023/07/19/my-music-note/"/>
    <id>https://lzmustb.github.io/2023/07/19/my-music-note/</id>
    <published>2023-07-19T14:52:54.000Z</published>
    <updated>2023-09-17T14:19:48.542Z</updated>
    
    <content type="html"><![CDATA[<p>音乐学习相关的笔记</p><span id="more"></span>        <h1 id="基本乐理"   >          <a href="#基本乐理" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本乐理" class="headerlink" title="基本乐理"></a>基本乐理</h1>              <h3 id="泛音-倍音，倍频"   >          <a href="#泛音-倍音，倍频" class="heading-link"><i class="fas fa-link"></i></a><a href="#泛音-倍音，倍频" class="headerlink" title="泛音(倍音，倍频)"></a>泛音(倍音，倍频)</h3>      <p><img src="/../images/image-20230901164632960.png" alt="image-20230901164632960"></p><p>整数次谐波&#x3D;&gt;基音，倍音<br><img src="/../images/image-20230901164700405.png" alt="image-20230901164700405"></p><p>和弦和单音在物理学意义上没有区别<br><img src="/../images/image-20230901164715003.png" alt="image-20230901164715003"></p>        <h2 id="音乐基础"   >          <a href="#音乐基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#音乐基础" class="headerlink" title="音乐基础"></a>音乐基础</h2>              <h3 id="三要素"   >          <a href="#三要素" class="heading-link"><i class="fas fa-link"></i></a><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3>      <ul><li>节奏</li><li>旋律</li><li>和声</li></ul>        <h3 id="音程-interval"   >          <a href="#音程-interval" class="heading-link"><i class="fas fa-link"></i></a><a href="#音程-interval" class="headerlink" title="音程-interval"></a>音程-interval</h3>      <div class="table-container"><table><thead><tr><th><strong>度数名</strong></th><th><strong>英語</strong></th><th><strong>例（ドの場合※）</strong></th><th><strong>半音数</strong></th><th><strong>テンションとして見た場合</strong></th></tr></thead><tbody><tr><td><strong>完全1度</strong></td><td>P1&#x2F;d2</td><td>ド（同じ音）</td><td>0</td><td></td></tr><tr><td>増1度&#x2F;短2度</td><td>m2&#x2F;A1</td><td>ド♯&#x2F;レ♭</td><td>1</td><td>♭9th</td></tr><tr><td>長2度&#x2F;減3度</td><td>M2&#x2F;d3</td><td>レ&#x2F;ミ♭♭</td><td>2</td><td>9th</td></tr><tr><td>増2度&#x2F;短3度</td><td>m3&#x2F;A2</td><td>レ#&#x2F;ミ♭</td><td>3</td><td>♯9th</td></tr><tr><td>長3度&#x2F;減4度</td><td>M3&#x2F;d4</td><td>ミ&#x2F;ファ♭</td><td>4</td><td></td></tr><tr><td><strong>完全4度</strong>&#x2F;増3度</td><td>P4&#x2F;A3</td><td>ファ&#x2F;ミ♯</td><td>5</td><td>11th</td></tr><tr><td>増4度&#x2F;減5度</td><td>A5&#x2F;d5</td><td>ファ♯&#x2F;ソ♭</td><td>6</td><td>♯11th</td></tr><tr><td><strong>完全5度</strong></td><td>P5</td><td>ソ</td><td>7</td><td></td></tr><tr><td>増5度&#x2F;短6度</td><td>A5&#x2F;m6</td><td>ソ♯&#x2F;ラ♭</td><td>8</td><td>♭13th</td></tr><tr><td>長6度&#x2F;減7度</td><td>M6&#x2F;d7</td><td>ラ&#x2F;シ♭♭</td><td>9</td><td>13th</td></tr><tr><td>短7度</td><td>m7</td><td>ラ♯&#x2F;シ♭</td><td>10</td><td></td></tr><tr><td>長7度</td><td>M7</td><td>シ</td><td>11</td><td></td></tr><tr><td><strong>完全8度</strong></td><td>P8</td><td>ド（オクターブ上）</td><td>12</td><td></td></tr></tbody></table></div><ul><li><strong>P</strong>…パーフェクト（完全）</li><li><strong>M</strong>…メジャー（長）</li><li><strong>m</strong>…マイナー（短）</li><li><strong>A</strong>…オーグメンテッド（増）</li><li><strong>d</strong>…ディミニッシュト（減）</li></ul><p>异名同音(×为##)：<br><img src="/../images/image-20230901164732238.png" alt="image-20230901164732238"></p>        <h3 id="大小调"   >          <a href="#大小调" class="heading-link"><i class="fas fa-link"></i></a><a href="#大小调" class="headerlink" title="大小调"></a>大小调</h3>      <p>与大调有关的三个小调：（只按自然小调标升降号）</p><ul><li>自然小调：组成音完全相同（C大调&#x2F;A小调）</li><li>和声小调：自然小调升第七个音</li><li>旋律小调：下行自然小调，上行自然小调升六七音</li></ul><p>12大调，48大小调</p>        <h3 id="冠音"   >          <a href="#冠音" class="heading-link"><i class="fas fa-link"></i></a><a href="#冠音" class="headerlink" title="冠音"></a>冠音</h3>      <p>最高音，大部分情况下是旋律音</p><p><img src="/../images/image-20230829115933572.png" alt="image-20230829115933572"></p><p><img src="/../images/image-20230901164746538.png" alt="image-20230901164746538"></p>        <h3 id="五度圈"   >          <a href="#五度圈" class="heading-link"><i class="fas fa-link"></i></a><a href="#五度圈" class="headerlink" title="五度圈"></a>五度圈</h3>      <p><img src="/../images/co5th.png" alt="PNG"></p><p>查看基调和弦：以A大调为例，由框内的六个音组成<br>    <img src="/../images/1694867599892.png" alt="1694867599892"></p>        <h2 id="和声"   >          <a href="#和声" class="heading-link"><i class="fas fa-link"></i></a><a href="#和声" class="headerlink" title="和声"></a>和声</h2>      <p>五音经常可以被省略，通常不影响和弦判断</p><p>三音和七音不能省</p>        <h3 id="钢琴指法"   >          <a href="#钢琴指法" class="heading-link"><i class="fas fa-link"></i></a><a href="#钢琴指法" class="headerlink" title="钢琴指法"></a>钢琴指法</h3>      <ul><li>m：三音左移半音</li><li>♯：全部右移半音</li><li>♭：全部左移半音</li><li>dim：三音，五音左移半音</li><li>sus4：三音右移半音（挂4和弦）</li><li>aug：五音右移半音</li><li>-5&#x2F;b5：五音左移半音（flat five）</li><li>6：七音在五音的右侧两个半音位置</li><li>7：七音在五音的右侧3个半音位置</li><li>9：短七音+九音</li><li>M7（Δ7）：七音在五音的右侧4个半音位置</li><li>add9：七音在根音的右侧两个半音位</li></ul>        <h3 id="cadence-x2F-终止"   >          <a href="#cadence-x2F-终止" class="heading-link"><i class="fas fa-link"></i></a><a href="#cadence-x2F-终止" class="headerlink" title="cadence&#x2F;终止"></a>cadence&#x2F;终止</h3>      <ul><li>Authentic&#x2F;正格终止（Ⅴ→Ⅰ）<ul><li>perfect authentic（根音&#x3D;和弦最低音&amp;和弦最高声部为Tonic）</li><li>imperfect authentic</li></ul></li><li>half&#x2F;半终止（→Ⅴ）</li><li>plagal&#x2F;变格终止（Ⅳ→Ⅰ）</li><li>deceptive&#x2F;伪终止（Ⅴ→Ⅵm）</li></ul>        <h3 id="和声机能"   >          <a href="#和声机能" class="heading-link"><i class="fas fa-link"></i></a><a href="#和声机能" class="headerlink" title="和声机能"></a>和声机能</h3>      <p><img src="/../images/1694871651941.png" alt="1694871651941"></p><p><img src="/../images/1694872296729.png" alt="1694872296729"></p><p>Ⅲm在有些时候会有<strong>T</strong>的作用</p><p><img src="/../images/image-20230917084451373.png" alt="image-20230917084451373"></p>        <h3 id="和声韵律-Harmonic-rhythm"   >          <a href="#和声韵律-Harmonic-rhythm" class="heading-link"><i class="fas fa-link"></i></a><a href="#和声韵律-Harmonic-rhythm" class="headerlink" title="和声韵律(Harmonic rhythm)"></a>和声韵律(Harmonic rhythm)</h3>              <h3 id="常见和声"   >          <a href="#常见和声" class="heading-link"><i class="fas fa-link"></i></a><a href="#常见和声" class="headerlink" title="常见和声"></a>常见和声</h3>      <ul><li>丸之内&#x2F;just the two of us</li></ul><p>$$<br>ⅣM7-Ⅲ7-Ⅵm7-Ⅰ7<br>$$</p>        <h2 id="人声的范围"   >          <a href="#人声的范围" class="heading-link"><i class="fas fa-link"></i></a><a href="#人声的范围" class="headerlink" title="人声的范围"></a>人声的范围</h2>      <p><img src="/../images/image-20230903194409225.png" alt="image-20230903194409225"></p>        <h2 id="转调"   >          <a href="#转调" class="heading-link"><i class="fas fa-link"></i></a><a href="#转调" class="headerlink" title="转调"></a>转调</h2>      <p><img src="/../images/image-20230903194746090.png" alt="image-20230903194746090"></p>        <h2 id="旋律"   >          <a href="#旋律" class="heading-link"><i class="fas fa-link"></i></a><a href="#旋律" class="headerlink" title="旋律"></a>旋律</h2>              <h3 id="五音音阶-Pentatonic"   >          <a href="#五音音阶-Pentatonic" class="heading-link"><i class="fas fa-link"></i></a><a href="#五音音阶-Pentatonic" class="headerlink" title="五音音阶 Pentatonic"></a>五音音阶 Pentatonic</h3>              <h3 id="注意点"   >          <a href="#注意点" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3>      <p>  <img src="/../images/image-20230903200858730.png" alt="image-20230903200858730"></p>        <h3 id="和弦外音"   >          <a href="#和弦外音" class="heading-link"><i class="fas fa-link"></i></a><a href="#和弦外音" class="headerlink" title="和弦外音"></a>和弦外音</h3>      <ul><li>经过音：两个和弦音之间的音</li><li>相邻音：两个相同的音之间差一个以上相邻的音</li><li>先现音：提前出现下一个和弦的音</li><li>跳脱音</li><li>倚音</li><li>悬挂音suspension&#x2F;retardation</li></ul>        <h3 id="付点-x2F-切分"   >          <a href="#付点-x2F-切分" class="heading-link"><i class="fas fa-link"></i></a><a href="#付点-x2F-切分" class="headerlink" title="付点&#x2F;切分"></a>付点&#x2F;切分</h3>              <h2 id="节奏"   >          <a href="#节奏" class="heading-link"><i class="fas fa-link"></i></a><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h2>              <h3 id="鼓的构成"   >          <a href="#鼓的构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#鼓的构成" class="headerlink" title="鼓的构成"></a>鼓的构成</h3>      <ul><li>Kick</li><li>Hi-Hat：通常是将节奏分的最细的部分，根据Hi-hat的节奏，将节奏类型分为8beat，16beat等</li><li>Snare</li></ul><p>ghost note</p><p><img src="/../images/1694958953650.png" alt="1694958953650"></p>        <h3 id="Syncopation"   >          <a href="#Syncopation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Syncopation" class="headerlink" title="Syncopation"></a>Syncopation</h3>      <p><img src="/../images/image-20230917220432748.png" alt="image-20230917220432748"></p>        <h3 id="Anticipation"   >          <a href="#Anticipation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Anticipation" class="headerlink" title="Anticipation"></a>Anticipation</h3>      <p><img src="/../images/image-20230917221947515.png" alt="image-20230917221947515"></p>        <h1 id="设计声音"   >          <a href="#设计声音" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计声音" class="headerlink" title="设计声音"></a>设计声音</h1>              <h2 id="物理学系统"   >          <a href="#物理学系统" class="heading-link"><i class="fas fa-link"></i></a><a href="#物理学系统" class="headerlink" title="物理学系统"></a>物理学系统</h2>      <ul><li><p>自由度：物体能够运动的方向的数量（三个平移自由度，三个转动自由度）在声音模型中通常假设仅有一个自由度</p></li><li><p>激励者：把能量带给系统的物体</p></li><li><p>受激：产生振动的物体</p><p>在声音的产生过程中，激励者和受激缺一不可</p></li></ul>        <h3 id="材料"   >          <a href="#材料" class="heading-link"><i class="fas fa-link"></i></a><a href="#材料" class="headerlink" title="材料"></a>材料</h3>      <ul><li>质量</li><li>弹性&#x2F;塑性</li><li>硬度</li><li>密度</li><li>结构与强度</li></ul><p>材料对声音的影响主要体现在质量和弹性两个方面。不同状态(固液气)的物体对声音的传导能力不同</p><p>体积模量K（E：杨氏模量；v：泊松比）：<br>$$<br>K&#x3D;\frac{E}{3(1-2v)}<br>$$</p>        <h3 id="波"   >          <a href="#波" class="heading-link"><i class="fas fa-link"></i></a><a href="#波" class="headerlink" title="波"></a>波</h3>      <ul><li><p>横波&#x2F;纵波&#x2F;扭转波</p></li><li><p>速度（质点速度，相速度，群速度）</p></li><li><p>幅度</p></li></ul><p><strong>声速</strong>（相速度phase velocity）c近似公式（K：杨氏模量；ρ：密度）：<br>$$<br>c&#x3D;\sqrt{\frac{K}{ρ}}<br>$$</p><p>$$<br>c&#x3D;fλ<br>$$</p><p><strong>群速度</strong>：取决于介质属性的常量，通常与相速度相等。当相速度和群速度不完全相等时，该介质弥散（dispersive），如水波冲刷海岸的现象。</p>        <h3 id="界面"   >          <a href="#界面" class="heading-link"><i class="fas fa-link"></i></a><a href="#界面" class="headerlink" title="界面"></a>界面</h3>      <p>当界面的两种物质相差极大时，声音中有很大一部分会被反射，很小一部分会传导。对于水和空气，这个比率约为99%。</p><p>入射角会影响反射波的强度，在布鲁斯特角，反射波会消失。</p><p><strong>固体界面处的弯曲波相位</strong>：对于坚硬界面的材料，波会反相反射；对于弹性界面的材料，波会同相反射。</p><p>反射波与入射波具有相同的波长和波速，但幅度较小。</p><p>被传导的波在新的介质中有新的波长，频率不变。</p><p><strong>驻波</strong>：持续不断的行波与反射波叠加干涉，形成驻波（在吉他中，第一个是基音，后面的是泛音）</p><p><img src="/../images/image-20230901105905563.png" alt="image-20230901105905563"></p>        <h3 id="模拟（analogue）"   >          <a href="#模拟（analogue）" class="heading-link"><i class="fas fa-link"></i></a><a href="#模拟（analogue）" class="headerlink" title="模拟（analogue）"></a>模拟（analogue）</h3>      <p>借由其他类似系统进行推理，达到连续测量的目的。在声音设计中主要考虑“电，力，声”三种系统。</p><ul><li><p>流动：</p><ul><li><p>电学：电流</p></li><li><p>力学：速度</p></li><li><p>声学：体积流动</p><p><img src="/../images/image-20230901115743564.png" alt="image-20230901115743564"></p></li></ul></li><li><p>质量：</p><ul><li><p>电学：电感</p></li><li><p>力学：质量</p></li><li><p>声学：声质量 <em>inertance</em></p><blockquote><p>（流动介质的质量除以波阵面的横截面积）</p></blockquote></li></ul></li><li><p>阻抗：</p><ul><li><p>电学：电阻</p></li><li><p>力学：摩擦</p></li><li><p>声学：粘滞力，介质的耗散属性</p><blockquote><p>（波阵面上的声波压强除以体积速度）</p></blockquote><p><img src="/../images/image-20230901115909642.png" alt="image-20230901115909642"></p></li></ul></li><li><p>容抗</p><ul><li>电学：电容</li><li>力学：柔度，硬度的倒数</li><li>声学：声容，与所施压强的变化相抗的量<br>  <img src="/../images/image-20230901115803986.png" alt="image-20230901115803986"></li></ul></li></ul><p><strong>将被敲打的弦的类比系统</strong>：</p><p><img src="/../images/image-20230901120723041.png" alt="image-20230901120723041"></p><p><strong>对钟和小提琴的entity-action解构</strong>：</p><p><img src="/../images/image-20230901120828572.png" alt="image-20230901120828572"></p>        <h3 id="振动"   >          <a href="#振动" class="heading-link"><i class="fas fa-link"></i></a><a href="#振动" class="headerlink" title="振动"></a>振动</h3>      <p>周期波听起来像有固定的音高，而非周期波听起来很复杂或类似噪声。</p><ul><li><p>弛豫振荡relaxation oscillator</p></li><li><p>简谐振荡</p></li></ul><p>弦的固有频率：(L:长度；T:张力；mu:单位长度质量)<br>$$<br>f&#x3D;\frac{1}{2L}\sqrt{\frac{T}{m_u}}<br>$$<br>简单几何形状的物体大致可以分为两类：能够自由振动的物体，和在张力下的物体。琴弦，鼓皮会以与它们所受张力有关的频率振动。</p>        <h4 id="受激振荡与谐振"   >          <a href="#受激振荡与谐振" class="heading-link"><i class="fas fa-link"></i></a><a href="#受激振荡与谐振" class="headerlink" title="受激振荡与谐振"></a>受激振荡与谐振</h4>      <p>共振系统在不同阻尼下的响应：</p><p><img src="/../images/image-20230901145420644.png" alt="image-20230901145420644"></p><p>将驱动振荡器看作是对能量流动的阻抗，随着驱动频率远离固有频率，能量的转移越来越小。</p><p>受激系统的行为就像是<strong>滤波器(filter)<strong>。当系统阻尼较小时，系统具有</strong>高谐振，窄带宽</strong>的特性，而受到强烈阻尼的系统具有<strong>低谐振，宽带宽</strong>的特性。</p>        <h2 id="声学系统"   >          <a href="#声学系统" class="heading-link"><i class="fas fa-link"></i></a><a href="#声学系统" class="headerlink" title="声学系统"></a>声学系统</h2>      <p>在声学中我们仅考虑<strong>纵波</strong>，总体积的行为。</p><p>空气中的声速方程：<br>$$<br>c&#x3D;\sqrt{\frac{γp}{ρ}}&#x3D;\sqrt{\frac{γRT}{M}}<br>$$<br>R：摩尔气体常数，T：绝对温度，M：摩尔质量</p>        <h3 id="声压级-amp-声强级"   >          <a href="#声压级-amp-声强级" class="heading-link"><i class="fas fa-link"></i></a><a href="#声压级-amp-声强级" class="headerlink" title="声压级&amp;声强级"></a>声压级&amp;声强级</h3>      <p>声压p是单位面积上的一个力，波的峰值声压反比于距离，所以若与声源相距为r，则峰值按1&#x2F;r减少。</p><p>声压级（Sound pressure level）是一个以分贝为单位的比率，设20μN&#x2F;m^2^作为声学上最小可测量值，则：<br>$$<br>SPL&#x3D;20log_{10}\frac{p(N&#x2F;m^2)}{2*10^{-5}}<br>$$<br>※声波的声压级不会超过194dB，这个值意味着疏部压强为真空压强。（在爆炸和闪电中存在压强大于194dB的单极性脉冲）</p><hr><p>声音强度I是单位面积上的功率，用W(瓦特)&#x2F;m^2表示，它正比于声压级的平方。</p><p>对于谐波平面波：（ρ：密度，c：相速度）<br>$$<br>I&#x3D;±\frac{p^2}{2ρc}<br>$$<br>声强级(sound intensity level)是以分贝为单位的比率，以10^-12^W&#x2F;m^2^作为参考值：<br>$$<br>SIL&#x3D;10log_{10}{\frac{I}{10^{-12}}}<br>$$</p>        <h3 id="位置与相干性"   >          <a href="#位置与相干性" class="heading-link"><i class="fas fa-link"></i></a><a href="#位置与相干性" class="headerlink" title="位置与相干性"></a>位置与相干性</h3>      <p>当观察者听到来自不同声源（或是反射波）的<strong>相关</strong>声音时，声音可能被加强或减小。当声源移动，则声音不断地加强或对消，观察者会听到一个扫频的陷波滤波效果。</p><p><img src="/../images/image-20230901153530820.png" alt="image-20230901153530820"></p><p>如果各个声源相似但由单独的机制产生（如合唱，一团蜜蜂）那么声源之间不具有<strong>相关性</strong>。</p><p>对于大量的声源集合，相关与否会导致观察到的平均幅度上的显著差异：<br>$$<br>A_{相关}&#x3D;A_a+A_b+A_c\cdots\<br>A_{不相关}&#x3D;\sqrtNaN<br>$$</p>        <h3 id="衰减"   >          <a href="#衰减" class="heading-link"><i class="fas fa-link"></i></a><a href="#衰减" class="headerlink" title="衰减"></a>衰减</h3>              <h4 id="距离导致的几何损耗"   >          <a href="#距离导致的几何损耗" class="heading-link"><i class="fas fa-link"></i></a><a href="#距离导致的几何损耗" class="headerlink" title="距离导致的几何损耗"></a>距离导致的几何损耗</h4>      <p><img src="/../images/image-20230901160653650.png" alt="image-20230901160653650"></p><p>对于圆柱模型（琴弦，或是繁忙的公路），辐射功率的耗散正比于距离。</p><p>对于球模型，功率耗散正比于距离的平方。</p>        <h4 id="吸收导致的能量损耗"   >          <a href="#吸收导致的能量损耗" class="heading-link"><i class="fas fa-link"></i></a><a href="#吸收导致的能量损耗" class="headerlink" title="吸收导致的能量损耗"></a>吸收导致的能量损耗</h4>      <p>声音频率越高，速度越快，吸收损耗越大（斯托克斯定律）</p><p>衰减α：(η：粘滞度)<br>$$<br>α&#x3D;\frac{2η2\pi\f^2}{3ρc^3}(Np&#x2F;m)\ *8.685889\rightarrow(dB&#x2F;m)<br>$$</p>        <h3 id="传播效应"   >          <a href="#传播效应" class="heading-link"><i class="fas fa-link"></i></a><a href="#传播效应" class="headerlink" title="传播效应"></a>传播效应</h3>      <p>P58补</p><ul><li>反射</li></ul><p>纵向的声波在反射时会保持相同的(压强)相位，我们将听到由直达波和反射波相互叠加所引起的效果，类似的驻波模式图样将出现在房间等声学空间中。<br><img src="/../images/image-20230904131043414.png" alt="image-20230904131043414"></p><ul><li><p>散射</p></li><li><p>弥散</p></li><li><p>折射</p></li><li><p>衍射</p></li></ul>        <h3 id="声学振荡"   >          <a href="#声学振荡" class="heading-link"><i class="fas fa-link"></i></a><a href="#声学振荡" class="headerlink" title="声学振荡"></a>声学振荡</h3>              <h2 id="心理声学"   >          <a href="#心理声学" class="heading-link"><i class="fas fa-link"></i></a><a href="#心理声学" class="headerlink" title="心理声学"></a>心理声学</h2>      <p>人类听觉的频率范围：20~20kHz</p><p>自然声音（语音和音乐）的大部分频率都在300~3kHz之间。</p>        <h3 id="定位"   >          <a href="#定位" class="heading-link"><i class="fas fa-link"></i></a><a href="#定位" class="headerlink" title="定位"></a>定位</h3>      <p>三大规律：</p><ul><li>高频声音比低频声音更容易定位，且声音刚开始的时候比延音更容易定位。</li><li>在户外或自由空间中对声音的定位能力好于在具有大量反射的小房间中的定位能力。</li><li>倾斜头部能获得更好的仰角感知，更容易定位</li></ul>        <h4 id="耳间强度差IID"   >          <a href="#耳间强度差IID" class="heading-link"><i class="fas fa-link"></i></a><a href="#耳间强度差IID" class="headerlink" title="耳间强度差IID"></a>耳间强度差IID</h4>      <p>抵达每只耳朵的相对幅度（即立体声系统中的<strong>声像定位-panning</strong>）</p><p>在频率高于700Hz开始有效，1.5kHz以上时完全工作。</p>        <h4 id="耳间时间差ITD"   >          <a href="#耳间时间差ITD" class="heading-link"><i class="fas fa-link"></i></a><a href="#耳间时间差ITD" class="headerlink" title="耳间时间差ITD"></a>耳间时间差ITD</h4>      <p>声音抵达两只耳朵的时间差值。当多于一个完整波长放到两耳之间（15~25cm），就会引起含糊不清。</p><p>因此耳间时间差对700Hz以下的声音最有效，在1.5kHz以上时无效。</p><p>(r:头部半径；θ：与鼻子方向中线的夹角)<br>$$<br>ITD&#x3D;r\frac{(θ+sinθ)}{c}<br>$$</p>        <h3 id="响度"   >          <a href="#响度" class="heading-link"><i class="fas fa-link"></i></a><a href="#响度" class="headerlink" title="响度"></a>响度</h3>      <p>声音的响度是一个主观数值，单位为sone。</p><p>1sone&#x3D;1kHz的正弦波在40dB SPL的响度。声压级增大10dB SPL，感受到的响度用sone表示会变为原来的2倍。</p><p>对于人耳，同声压级的一些频率比另一些频率听上去会更响，因此人们测量得到了等响度曲线，并定义</p><p>1phon&#x3D;1dB SPL的1kHz纯音</p><p><img src="/../images/image-20230904140147498.png" alt="image-20230904140147498"></p><p>声级表运用“计权滤波器”来补偿频率的相关性，其中A计权标度多用于环境噪声测量，BBC给出的ITU-R468标度用于广播和母带的处理。</p>        <h4 id="时域积分效应"   >          <a href="#时域积分效应" class="heading-link"><i class="fas fa-link"></i></a><a href="#时域积分效应" class="headerlink" title="时域积分效应"></a>时域积分效应</h4>      <p>对于200ms以内的持续时间，通过将声音拉长一些毫秒，就可以使它们具有更大的表观音量。</p>        <h3 id="音域"   >          <a href="#音域" class="heading-link"><i class="fas fa-link"></i></a><a href="#音域" class="headerlink" title="音域"></a>音域</h3>      <ul><li><strong>低音bass</strong><ul><li><strong>次低音sub</strong>：多用于给雷声等音响效果增加深度</li><li><strong>上低音upper bass</strong>：底鼓，贝斯基频，钢琴与吉他较低的八度</li></ul></li><li><strong>中音mid</strong>：人声，弦乐，铜管的最佳音区</li><li><strong>高音treble</strong><ul><li><strong>临场感presence</strong>：为人声和乐器增加清晰度</li><li><strong>上方top</strong>：镲片，类噪声音</li><li><strong>空气感air</strong>：所有最高泛音</li></ul></li></ul><p><img src="/../images/image-20230906090620166.png" alt="image-20230906090620166"></p>        <h3 id="分辨率"   >          <a href="#分辨率" class="heading-link"><i class="fas fa-link"></i></a><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3>      <p>人耳可以区分100Hz和105Hz的区别，但无法区分16000Hz和16005Hz的区别。</p>        <h3 id="频谱"   >          <a href="#频谱" class="heading-link"><i class="fas fa-link"></i></a><a href="#频谱" class="headerlink" title="频谱"></a>频谱</h3>      <p><strong>音色timbre</strong>是对频谱的主观感知量，是由一个稳定频谱产生的瞬时的听觉感受。</p>        <h4 id="明亮度"   >          <a href="#明亮度" class="heading-link"><i class="fas fa-link"></i></a><a href="#明亮度" class="headerlink" title="明亮度"></a>明亮度</h4>      <p>将具有一些较响的高频并不足以让一个声音明亮，声音的明亮度取决于<strong>频谱质心</strong>，以及<strong>起音attack</strong>。</p>        <h4 id="对时域结构的感知"   >          <a href="#对时域结构的感知" class="heading-link"><i class="fas fa-link"></i></a><a href="#对时域结构的感知" class="headerlink" title="对时域结构的感知"></a>对时域结构的感知</h4>              <h3 id="包络envelope"   >          <a href="#包络envelope" class="heading-link"><i class="fas fa-link"></i></a><a href="#包络envelope" class="headerlink" title="包络envelope"></a>包络envelope</h3>      <p>在声音设计中通常用四个词描述一个声音的包络：</p><ul><li>起音attack</li><li>衰减decay</li><li>延音sustain</li><li>释音release</li></ul>        <h4 id="Attack"   >          <a href="#Attack" class="heading-link"><i class="fas fa-link"></i></a><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h4>      <p>在这个阶段，声音从0开始上升到最大能量处。对于打击型声音，这个起音非常短；对于琴弦，可以长达几秒钟。</p><p>从斜面滑落空气的物体可以模拟起音的过程，该物体持续加速，同时摩擦激励产生一个越来越响的声音。</p>        <h4 id="Decay"   >          <a href="#Decay" class="heading-link"><i class="fas fa-link"></i></a><a href="#Decay" class="headerlink" title="Decay"></a>Decay</h4>      <p>衰减应用于那些在瞬变阶段后有能量持续供应的系统上。</p>        <h4 id="Sustain"   >          <a href="#Sustain" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sustain" class="headerlink" title="Sustain"></a>Sustain</h4>      <p>在这个阶段，系统的输入能量等于输出能量。</p>        <h4 id="Release"   >          <a href="#Release" class="heading-link"><i class="fas fa-link"></i></a><a href="#Release" class="headerlink" title="Release"></a>Release</h4>      <p>系统不再接受能量，只通过存储的能量产生一段声音。对于运动物体，这个数值对应于动量，对于流体则对应于存储能力。</p>        <h3 id="哈斯效应"   >          <a href="#哈斯效应" class="heading-link"><i class="fas fa-link"></i></a><a href="#哈斯效应" class="headerlink" title="哈斯效应"></a>哈斯效应</h3>      <p>又称先入为主效应，决定了我们在何处区分环境与声源。</p><p>大约30ms后接受到的反射声将被分配给环境，被听成单独的回声，比如在大厅里击掌产生的回声；发生在30ms内的反射声被融合到这个声音本身中，比如古典吉他的空腔内产生的回声</p>        <h3 id="Gabor极限"   >          <a href="#Gabor极限" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gabor极限" class="headerlink" title="Gabor极限"></a>Gabor极限</h3>      <p>Gabor极限标出了一个声音具有音高所需的最小持续时间，大约在10~20ms。</p>        <h1 id="合成器"   >          <a href="#合成器" class="heading-link"><i class="fas fa-link"></i></a><a href="#合成器" class="headerlink" title="合成器"></a>合成器</h1>              <h2 id="放大器Amplifier"   >          <a href="#放大器Amplifier" class="heading-link"><i class="fas fa-link"></i></a><a href="#放大器Amplifier" class="headerlink" title="放大器Amplifier"></a>放大器Amplifier</h2>              <h2 id="振荡器Oscillator"   >          <a href="#振荡器Oscillator" class="heading-link"><i class="fas fa-link"></i></a><a href="#振荡器Oscillator" class="headerlink" title="振荡器Oscillator"></a>振荡器Oscillator</h2>              <h3 id="音频振荡器"   >          <a href="#音频振荡器" class="heading-link"><i class="fas fa-link"></i></a><a href="#音频振荡器" class="headerlink" title="音频振荡器"></a>音频振荡器</h3>      <p>用于产生音频，不同波形会产生不同音色timbre的声音，振幅影响响度</p>        <h3 id="低频振荡器（LFO）"   >          <a href="#低频振荡器（LFO）" class="heading-link"><i class="fas fa-link"></i></a><a href="#低频振荡器（LFO）" class="headerlink" title="低频振荡器（LFO）"></a>低频振荡器（LFO）</h3>      <p>用于调制某个音频，让一个参数（音高，音量等）来回振荡，使音频的某些特性随时间变化。<br>慢速的调制通常用作改变行为（声音的表现），而快速调制则用来改变音色（声音本身的特征）</p>        <h2 id="滤波器Filter"   >          <a href="#滤波器Filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#滤波器Filter" class="headerlink" title="滤波器Filter"></a>滤波器Filter</h2>      <ul><li><p>Low-Pass Filter低通滤波器</p><p><img src="/../images/image-20230912205725143.png" alt="image-20230912205725143"></p><ul><li>Resonance：共振，增强截止频率周围的振幅</li><li>Frequency：滤波器的截止频率</li></ul></li></ul>        <h2 id="合成弹拨贝斯"   >          <a href="#合成弹拨贝斯" class="heading-link"><i class="fas fa-link"></i></a><a href="#合成弹拨贝斯" class="headerlink" title="合成弹拨贝斯"></a>合成弹拨贝斯</h2>      <div style='display:flex;width:100%;'><img style='width:50%;' src='../images/image-20230912210218103.png' /><img style='width:50%;' src='../images/image-20230912210242942.png' /></div><p>声音的”弹拨”性是由包络调制滤波器而生成的。 这会导致滤波器快速开合和关闭。</p>        <h3 id="音高失谐detune"   >          <a href="#音高失谐detune" class="heading-link"><i class="fas fa-link"></i></a><a href="#音高失谐detune" class="headerlink" title="音高失谐detune"></a>音高失谐detune</h3>      <ul><li><p>cents音分：一音分等于半音的百分之一</p></li><li><p>semitone半音</p><p>12semitone&#x3D;1个八度</p></li></ul>        <h2 id="噪声发生器"   >          <a href="#噪声发生器" class="heading-link"><i class="fas fa-link"></i></a><a href="#噪声发生器" class="headerlink" title="噪声发生器"></a>噪声发生器</h2>      <p>噪声发生器会生成没有音高的声音，可以用来模拟风或雨的声音。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;音乐学习相关的笔记&lt;/p&gt;</summary>
    
    
    
    <category term="音乐" scheme="https://lzmustb.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="音乐" scheme="https://lzmustb.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>安装与配置MySQL(Ubuntu)</title>
    <link href="https://lzmustb.github.io/2023/06/26/MySQL_commands/"/>
    <id>https://lzmustb.github.io/2023/06/26/MySQL_commands/</id>
    <published>2023-06-26T01:06:00.000Z</published>
    <updated>2023-09-25T12:55:46.067Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="安装mysql"   >          <a href="#安装mysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="查看mysql是否安装成功"   >          <a href="#查看mysql是否安装成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看mysql是否安装成功" class="headerlink" title="查看mysql是否安装成功"></a>查看mysql是否安装成功</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></div></figure>        <h2 id="设置root用户的密码"   >          <a href="#设置root用户的密码" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置root用户的密码" class="headerlink" title="设置root用户的密码"></a>设置root用户的密码</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql #登录mysql服务器</span><br></pre></td></tr></table></div></figure><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span>指令:</span><br><span class="line"><span class="comment">/*将new_password部分替换为你的新密码*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"><span class="comment">/*更新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES; </span><br><span class="line"><span class="comment">/*退出sql命令行*/</span></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>        <h2 id="查看mysql服务器运行状态"   >          <a href="#查看mysql服务器运行状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看mysql服务器运行状态" class="headerlink" title="查看mysql服务器运行状态"></a>查看mysql服务器运行状态</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql status</span><br></pre></td></tr></table></div></figure><p>如果MySQL正在运行，将显示”active (running)”</p>        <h2 id="启动mysql服务器"   >          <a href="#启动mysql服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动mysql服务器" class="headerlink" title="启动mysql服务器"></a>启动mysql服务器</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></div></figure>        <h2 id="本地连接mysql服务器"   >          <a href="#本地连接mysql服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地连接mysql服务器" class="headerlink" title="本地连接mysql服务器"></a>本地连接mysql服务器</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u &lt;username&gt; -p</span><br></pre></td></tr></table></div></figure><p>将<code>&lt;username&gt;</code>替换为用户名(未创建新用户则填root)</p>        <h2 id="查看MySQL服务器的ip地址"   >          <a href="#查看MySQL服务器的ip地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看MySQL服务器的ip地址" class="headerlink" title="查看MySQL服务器的ip地址"></a>查看MySQL服务器的ip地址</h2>      <p>通常主机外网ip即为服务器ip地址</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig #linux</span><br></pre></td></tr></table></div></figure>        <h2 id="配置MySQL服务器远程连接"   >          <a href="#配置MySQL服务器远程连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置MySQL服务器远程连接" class="headerlink" title="配置MySQL服务器远程连接"></a>配置MySQL服务器远程连接</h2>              <h3 id="编辑配置文件’mysqld-cnf’"   >          <a href="#编辑配置文件’mysqld-cnf’" class="heading-link"><i class="fas fa-link"></i></a><a href="#编辑配置文件’mysqld-cnf’" class="headerlink" title="编辑配置文件’mysqld.cnf’"></a>编辑配置文件’mysqld.cnf’</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></div></figure><p>在 <code>mysqld.cnf</code> 文件中找到 <code>bind-address</code> 选项，并将其注释掉或将其值设置为MySQL服务器的IP地址。默认情况下，此选项被设置为 <code>127.0.0.1</code>，只允许本地连接。如果要允许远程连接，请将其修改为服务器的实际IP地址或注释掉该行。例如：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#bind-address = 127.0.0.1</span><br></pre></td></tr></table></div></figure><p>保存并关闭<code>mysqld.cnf</code>文件（ctrl+x）</p>        <h3 id="重启MySQL服务器以应用更改"   >          <a href="#重启MySQL服务器以应用更改" class="heading-link"><i class="fas fa-link"></i></a><a href="#重启MySQL服务器以应用更改" class="headerlink" title="重启MySQL服务器以应用更改"></a>重启MySQL服务器以应用更改</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></div></figure>        <h3 id="创建或授予远程访问权限"   >          <a href="#创建或授予远程访问权限" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建或授予远程访问权限" class="headerlink" title="创建或授予远程访问权限"></a>创建或授予远程访问权限</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></div></figure><p>进入sql命令行</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*显示MySQL服务器上所有用户列表*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></div></figure><p>如果有用户拥有<code>%</code>主机的访问权限，则该用户可以进行远程访问。如果没有，则授予权限</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*替换&lt;password&gt;（包括大小于号）*/</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure><p>或创建新用户：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*替换&lt;username&gt;和&lt;password&gt;（包括大小于号）*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;&lt;username&gt;&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*授予新用户对所有数据库的完全权限*/</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;&lt;username&gt;&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>        <h2 id="查看MySQL服务器端口"   >          <a href="#查看MySQL服务器端口" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看MySQL服务器端口" class="headerlink" title="查看MySQL服务器端口"></a>查看MySQL服务器端口</h2>      <p>默认为3306，若进行了自定义设置可在<strong>sql命令行</strong>使用以下指令</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;port&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="关闭Ubuntu防火墙"   >          <a href="#关闭Ubuntu防火墙" class="heading-link"><i class="fas fa-link"></i></a><a href="#关闭Ubuntu防火墙" class="headerlink" title="关闭Ubuntu防火墙"></a>关闭Ubuntu防火墙</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">sudo ufw disable</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态，若显示<span class="string">&#x27;Status:inactive&#x27;</span>则关闭成功</span></span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></div></figure>        <h1 id="MySQL语言"   >          <a href="#MySQL语言" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySQL语言" class="headerlink" title="MySQL语言"></a>MySQL语言</h1>      ]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装mysql&quot;   &gt;
          &lt;a href=&quot;#安装mysql&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#安装mysql&quot; class=&quot;headerlink&quot; title=&quot;安装mysql&quot;&gt;&lt;/a&gt;安装mysql&lt;/h2&gt;
      &lt;figure class=&quot;highlight shell&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install mysql-server	&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《献给阿尔吉侬的花束》</title>
    <link href="https://lzmustb.github.io/2023/02/25/read-Flowers-for-Algernon/"/>
    <id>https://lzmustb.github.io/2023/02/25/read-Flowers-for-Algernon/</id>
    <published>2023-02-25T03:20:54.000Z</published>
    <updated>2023-09-25T13:03:19.304Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="引言"   >          <a href="#引言" class="heading-link"><i class="fas fa-link"></i></a><a href="#引言" class="headerlink" title="引言"></a>引言</h2>      <blockquote><p>箱子里有迷宫。</p><p>你在错综复杂的道路上前行。</p><p>你相信墙的另一侧一定有些什么，</p><p>时而失道却坚定地向着出口前进。</p><p>这身影对我有些耀眼。(阿尔吉侬)就是这样的一首曲子。</p><p style="text-align:right">——n-buna</p></blockquote><span id="more"></span><p>前段时间听夜鹿新曲<span class="exturl"><a class="exturl__link"   href="https://music.163.com/#/song?id=2020247157" >アルジャーノン(阿尔吉侬)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>得知其原型是科幻巨著《献给阿尔吉侬的花束》。</p><p>小说从主人公 查理·高登 的自述开始。通过没有逗号、错别字满篇的报告得知，他是一名30多岁的智力障碍者，在面包店做些清扫工作，同时在低能成人学校努力学习。他想变聪明，想让面包店的同事高兴，想理解他的朋友们所谈论的话题，并参与其中。</p><p>后来，他被带到声称能改造智力的科学实验室中，在那里遇到了高智商老鼠 阿尔吉侬。阿尔吉侬是唯一一个实验成功的老鼠，它快速走出迷宫的样子令查理感到无比的惊讶和敬佩。</p><p>科学家和医生看到查理天性善良，又有上进心，认为他是人体实验的不二之选。查理接受了手术，变成了天才。然而，等待他的不是为他自豪的朋友，而是他不曾体会的复杂世界。</p><p><font color='scarlet'><strong>※以下涉及剧透</strong></font></p>        <h2 id="人物关系图"   >          <a href="#人物关系图" class="heading-link"><i class="fas fa-link"></i></a><a href="#人物关系图" class="headerlink" title="人物关系图"></a>人物关系图</h2>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/flowersForAlgernon.png" alt="flowersForAlgernon"></p>        <h2 id="“比拥有高智商更重要的事”"   >          <a href="#“比拥有高智商更重要的事”" class="heading-link"><i class="fas fa-link"></i></a><a href="#“比拥有高智商更重要的事”" class="headerlink" title="“比拥有高智商更重要的事”"></a>“比拥有高智商更重要的事”</h2>      <p>在智力的飞速发展下，查理很快便掌握多门语言，读通最前沿的科学论文。一开始，他以为这就是正常人的世界，但此时的查理和其他人之间的隔阂却和手术前一样大。查理不能忍受尼姆等人追求名利，他在公开场合说的话虽然理性而正确，但让这些科学家们难堪。</p><p>高智商让他察觉人性中的丑恶，但却没有给他宽容这些丑恶的人情。</p><blockquote><p>但我可以告诉你一件事，在你手术之前，你并不是这个样子。你不会在自己的秽物中打滚，不会沉迷于自怜，不会整天整夜坐在电视机前污染自己的心灵，更不会大声对别人咆哮。你有些令我们尊敬的特质……没错，即使是过去的你。你身上有些我从来没有在其他弱智者身上见过的特别东西。</p><p style="text-align:right">——艾丽斯·纪尼安</p></blockquote>        <h2 id="献给阿尔吉侬"   >          <a href="#献给阿尔吉侬" class="heading-link"><i class="fas fa-link"></i></a><a href="#献给阿尔吉侬" class="headerlink" title="献给阿尔吉侬"></a>献给阿尔吉侬</h2>      <p>查理得知留给自己的时间不长后，把所有精力花在研究他自身发生的变化上。他并没有用他梦寐以求的聪明去做自己想做的事，而是用昙花一现的人类最高智力，去推进科学发展，为未来其他智障者开辟道路。</p><blockquote><p>我把阿尔吉侬的尸体放在一个小金属容器里带回家，我不会让他们把它丢进焚化炉。这样做有些愚蠢和伤感，但昨天深夜我把它埋在后院。把一束野花放在坟上时，我哭了起来。</p></blockquote><hr>        <h2 id="我"   >          <a href="#我" class="heading-link"><i class="fas fa-link"></i></a><a href="#我" class="headerlink" title="我"></a>我</h2>      <p>这本小说中会出现很多<strong>错字</strong>，但正是这一巧妙的设计让读者看到一个有血有肉的残疾人的一生。</p><p>我和查理没有什么共同点可言，无论是在他做手术前，还是之后。我想象自己如果在书中是个什么样的位置，最后发现可能只是面包店里默默工作的一员。我不会嘲笑和捉弄查理，也不会在他变成高智商时排挤他。但我的篇幅一定不会比金皮或者乔更多。或许查理会主动和我敞开心扉，而我多半对此爱莫能助；或许我从头到尾都不会知道查理对命运的伟大抗争。</p><p>全世界有7%左右的残疾人，其中智力残疾比肢体残疾要少一些。在我的20多年人生中，擦肩而过的可能有10来个，但不曾接触过他们中的任何人。我自认为与人交流时有注意不让对方尴尬难堪，但或许我并不比那些为残障机构捐款却从不与他们交流的富豪更有同情心。我自认为对任何人都没有歧视和偏见，但我实际能做到的只是表示理解，却不能提供真正的帮助。</p><p>我的心灵是一块开阔却贫瘠的土地，不会拒绝踏入的脚印，但也找不着一束可以献上的花。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;   &gt;
          &lt;a href=&quot;#引言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
      &lt;blockquote&gt;
&lt;p&gt;箱子里有迷宫。&lt;/p&gt;
&lt;p&gt;你在错综复杂的道路上前行。&lt;/p&gt;
&lt;p&gt;你相信墙的另一侧一定有些什么，&lt;/p&gt;
&lt;p&gt;时而失道却坚定地向着出口前进。&lt;/p&gt;
&lt;p&gt;这身影对我有些耀眼。(阿尔吉侬)就是这样的一首曲子。&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;——n-buna&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://lzmustb.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="感想" scheme="https://lzmustb.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>并发/并行&amp;同步/异步</title>
    <link href="https://lzmustb.github.io/2022/11/05/my-programing-note1/"/>
    <id>https://lzmustb.github.io/2022/11/05/my-programing-note1/</id>
    <published>2022-11-05T04:17:20.000Z</published>
    <updated>2023-09-08T01:01:42.438Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="并发vs并行"   >          <a href="#并发vs并行" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发vs并行" class="headerlink" title="并发vs并行"></a>并发vs并行</h1>              <h2 id="并发-Concurrency"   >          <a href="#并发-Concurrency" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发-Concurrency" class="headerlink" title="并发(Concurrency)"></a>并发(Concurrency)</h2>      <p>并发是一个宽泛概念，表示计算机同时执行多项任务。</p><p>对于单核处理器，可以通过分配时间片的方式（又称上下文切换context switching）</p>        <h2 id="并行-Parallelism"   >          <a href="#并行-Parallelism" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行-Parallelism" class="headerlink" title="并行(Parallelism)"></a>并行(Parallelism)</h2>      <p>在多核处理器中，真正意义上同时执行多项任务。</p><span id="more"></span>        <h1 id="同步vs异步"   >          <a href="#同步vs异步" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步vs异步" class="headerlink" title="同步vs异步"></a>同步vs异步</h1>              <h2 id="同步编程-Synchronous"   >          <a href="#同步编程-Synchronous" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步编程-Synchronous" class="headerlink" title="同步编程(Synchronous)"></a>同步编程(Synchronous)</h2>      <p>在执行完一项任务后才执行下一项任务，没有并发并行的概念</p>        <h2 id="异步编程-Async"   >          <a href="#异步编程-Async" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步编程-Async" class="headerlink" title="异步编程(Async)"></a>异步编程(Async)</h2>      <p>在<strong>单线程中</strong>同时执行多个任务的编程方式。无需考虑线程同步，线程竞争的问题。</p><p>适用于有网络操作，数据库访问等I&#x2F;O密集的应用程序。如果使用多线程，线程中的大部分时间在等待，反而浪费了线程切换和线程内存的开销。多线程适合计算量大的程序。</p>        <h3 id="Javascript"   >          <a href="#Javascript" class="heading-link"><i class="fas fa-link"></i></a><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3>      <p>Js中实现异步的方法有callback，Promise，async&#x2F;await</p>        <h4 id="async-x2F-await"   >          <a href="#async-x2F-await" class="heading-link"><i class="fas fa-link"></i></a><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h4>      <p>async将函数标记为异步函数，返回值为Promise对象。在async函数中可以调用await标记的异步函数。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;并发vs并行&quot;   &gt;
          &lt;a href=&quot;#并发vs并行&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并发vs并行&quot; class=&quot;headerlink&quot; title=&quot;并发vs并行&quot;&gt;&lt;/a&gt;并发vs并行&lt;/h1&gt;
      
        &lt;h2 id=&quot;并发-Concurrency&quot;   &gt;
          &lt;a href=&quot;#并发-Concurrency&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并发-Concurrency&quot; class=&quot;headerlink&quot; title=&quot;并发(Concurrency)&quot;&gt;&lt;/a&gt;并发(Concurrency)&lt;/h2&gt;
      &lt;p&gt;并发是一个宽泛概念，表示计算机同时执行多项任务。&lt;/p&gt;
&lt;p&gt;对于单核处理器，可以通过分配时间片的方式（又称上下文切换context switching）&lt;/p&gt;

        &lt;h2 id=&quot;并行-Parallelism&quot;   &gt;
          &lt;a href=&quot;#并行-Parallelism&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并行-Parallelism&quot; class=&quot;headerlink&quot; title=&quot;并行(Parallelism)&quot;&gt;&lt;/a&gt;并行(Parallelism)&lt;/h2&gt;
      &lt;p&gt;在多核处理器中，真正意义上同时执行多项任务。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>餐厅管理网页练习</title>
    <link href="https://lzmustb.github.io/2022/10/16/my-vue-practice1/"/>
    <id>https://lzmustb.github.io/2022/10/16/my-vue-practice1/</id>
    <published>2022-10-15T23:29:46.000Z</published>
    <updated>2022-10-16T00:42:05.956Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下这两天用vue模写网页的过程。</p><p>成品：</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/my-vue-practice1.png" alt="my-vue-practice1"></p><span id="more"></span><p>※设计图来自IQQNIC Design的<span class="exturl"><a class="exturl__link"   href="https://pixso.cn/community/file/iwhOWVDOeICw39kGAlSxrA" >免费餐厅管理模板</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>页面最外层：</p><ul><li><p>sidebar：固定像素，fixed固定在侧边</p></li><li><p>navigationBar+router-view：上下结构，这次只做了home界面所以路由不会切换</p></li></ul><p>黄色框内的元素均为响应式渲染，由store里的数据管理。</p>        <h1 id="解决的技术问题"   >          <a href="#解决的技术问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决的技术问题" class="headerlink" title="解决的技术问题"></a>解决的技术问题</h1>              <h2 id="滚动条显示异常"   >          <a href="#滚动条显示异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#滚动条显示异常" class="headerlink" title="滚动条显示异常"></a>滚动条显示异常</h2>      <p>在写<code>Home.vue</code>时，明明页面超出了屏幕，却不显示滚动条，也无法滑动。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--App.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;APPcontainer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SideBar</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;APPmain&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">NavigationBar</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mainView&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这部分超出了界面--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>解决方法</strong>：</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在最外层容器添加--&gt;</span><br><span class="line"><span class="selector-class">.APPcontainer</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>原理没搞懂，<code>height:100vh</code>比较关键，不加这句的话滚动条长得会比较奇怪。</p>        <h2 id="CSS简单动效"   >          <a href="#CSS简单动效" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS简单动效" class="headerlink" title="CSS简单动效"></a>CSS简单动效</h2>      <p><code>transition:[时间]</code>可以在元素样式产生变化时自动生成补间，像淡出淡入，侧栏展开等。</p><p><code>filter</code>属性可以改变元素的颜色，功能繁多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下这两天用vue模写网页的过程。&lt;/p&gt;
&lt;p&gt;成品：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/my-vue-practice1.png&quot; alt=&quot;my-vue-practice1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>网页设计学习笔记</title>
    <link href="https://lzmustb.github.io/2022/10/13/my-web-design-note/"/>
    <id>https://lzmustb.github.io/2022/10/13/my-web-design-note/</id>
    <published>2022-10-13T04:39:36.000Z</published>
    <updated>2023-09-25T05:37:28.900Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="页面尺寸的选择"   >          <a href="#页面尺寸的选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#页面尺寸的选择" class="headerlink" title="页面尺寸的选择"></a>页面尺寸的选择</h1>              <h2 id="网页宽度-amp-有效可视区"   >          <a href="#网页宽度-amp-有效可视区" class="heading-link"><i class="fas fa-link"></i></a><a href="#网页宽度-amp-有效可视区" class="headerlink" title="网页宽度&amp;有效可视区"></a>网页宽度&amp;有效可视区</h2>      <ul><li><strong>网页宽度</strong>：进行页面设计时画板的宽度</li><li><strong>有效可视区</strong>：网页内容所占的宽度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/2107_01.jpg" alt="img"></p><span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://gs.statcounter.com/screen-resolution-stats/desktop/worldwide" >Statcounter Global Stats</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上可以看到当前PC端显示器的流行尺寸，由此得出结论：</p><blockquote><p>网页宽度：1920</p><p>有效可视区：900~1200</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221013124444439.png" alt="image-20221013124444439"></p>        <h1 id="响应式布局"   >          <a href="#响应式布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1>      <p>若不希望可视区占比太小，可以采用响应式布局使得网页在不同的尺寸下有不同的布局。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/0117-1.png" alt="リキッドレイアウトの簡単な説明：レイアウトは同じでコンテンツの幅がディスプレイの幅に応じて変化する。"></p>        <h2 id="百分比"   >          <a href="#百分比" class="heading-link"><i class="fas fa-link"></i></a><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2>      <h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><p>相对于父元素，或无父元素则相对于视窗</p><div class="table-container"><table><thead><tr><th>属性</th><th align="left">百分比基准</th></tr></thead><tbody><tr><td>width</td><td align="left">基于父级的width</td></tr><tr><td>height</td><td align="left">基于父级的height</td></tr><tr><td>margin(四个方向)</td><td align="left">基于父级的width</td></tr><tr><td>padding(四个方向)</td><td align="left">基于父级的width</td></tr><tr><td>left,,right</td><td align="left">基于<strong>非static定位</strong>的父级的width</td></tr><tr><td>top,bottom</td><td align="left">基于<strong>非static定位</strong>的父级的height</td></tr></tbody></table></div>        <h3 id="vw-amp-vh"   >          <a href="#vw-amp-vh" class="heading-link"><i class="fas fa-link"></i></a><a href="#vw-amp-vh" class="headerlink" title="vw&amp;vh"></a>vw&amp;vh</h3>      <ul><li>1vw&#x3D;1%视窗宽度</li><li>1vh&#x3D;1%视窗高度</li><li>vmin：vw和vh中较小值</li><li>vmax：vw和vh中较大值</li></ul>        <h2 id="rem-font-size-of-the-root-element"   >          <a href="#rem-font-size-of-the-root-element" class="heading-link"><i class="fas fa-link"></i></a><a href="#rem-font-size-of-the-root-element" class="headerlink" title="rem(font size of the root element)"></a>rem(font size of the root element)</h2>      <p>rem为相对于<strong>根元素字体大小</strong>的单位</p>        <h2 id="媒体查询"   >          <a href="#媒体查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2>      <figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//页面宽度大于<span class="number">960px</span>小于<span class="number">1200px</span></span><br><span class="line"><span class="keyword">@media</span> screen </span><br><span class="line"><span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">960px</span>) </span><br><span class="line"><span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)&#123;</span><br><span class="line">        <span class="comment">/*---*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="flex布局"   >          <a href="#flex布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1>      <p>Flex布局中存在main axis(横向)和cross axis(纵向)两个轴，默认将元素在main axis从左向右排列</p>        <h2 id="justify-content"   >          <a href="#justify-content" class="heading-link"><i class="fas fa-link"></i></a><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h2>      <p>可以决定容器中元素在<strong>主轴</strong>方向的位置</p><ul><li><code>flex-start</code>：将元素对齐主轴首端</li><li><code>flex-end</code>：将元素对齐主轴末端</li><li><code>center</code>：将元素居中</li><li><code>space-between</code>：使第一个元素位于主轴首端，最后一个元素位于主轴末端</li><li><code>space-around</code>：将元素等距排列，且第一个元素和最后一个元素到边界的距离相当于元素间距离的一半</li></ul>        <h2 id="align-items"   >          <a href="#align-items" class="heading-link"><i class="fas fa-link"></i></a><a href="#align-items" class="headerlink" title="align-items"></a><code>align-items</code></h2>      <p>可以决定容器中元素在<strong>副轴</strong>方向的位置</p><ul><li><code>flex-start</code>：将元素对齐副轴首端</li><li><code>flex-end</code>：将元素对齐副轴末端</li><li><code>center</code>：将元素居中</li><li><code>stretch</code>：</li><li><code>baseline</code>：</li></ul>        <h2 id="align-self"   >          <a href="#align-self" class="heading-link"><i class="fas fa-link"></i></a><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h2>      <p>作用于flex布局内的<strong>元素</strong>。选项与<code>align-items</code>相同，用于具体修改某个元素的纵向布局。</p>        <h2 id="flex-direction"   >          <a href="#flex-direction" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h2>      <p>可以修改主轴的方向</p><ul><li><code>row</code>：主轴为横向，从左向右</li><li><code>row-reverse</code>：主轴为横向，从右向左</li><li><code>column</code>：主轴为纵向，从上向下</li><li><code>column-reverse</code>：主轴为纵向，从下向上</li></ul>        <h2 id="order"   >          <a href="#order" class="heading-link"><i class="fas fa-link"></i></a><a href="#order" class="headerlink" title="order"></a><code>order</code></h2>      <p>作用于flex布局内的<strong>元素</strong>。默认值为0，可选择任意<strong>整数值</strong>。数值大的元素将排列在后面。</p>        <h2 id="flex实现自动填充"   >          <a href="#flex实现自动填充" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex实现自动填充" class="headerlink" title="flex实现自动填充"></a>flex实现自动填充</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;auto-fill&quot;</span>&gt;</span>自动填充<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.auto-fill</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="Grid布局"   >          <a href="#Grid布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h1>      <p><code>fr</code>：grid专有单位，表示比例（fraction）</p>        <h2 id="grid-template"   >          <a href="#grid-template" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-template" class="headerlink" title="grid-template"></a><code>grid-template</code></h2>      <p><strong>容器属性</strong>，用于定义栅格行列的宽度，数量</p><ul><li><code>grid-template-columns</code></li><li><code>-rows</code></li><li>【选项】<code>repeat(重复次数,值)</code>：</li></ul><figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&quot;100px 100px 100px&quot;</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line"><span class="comment">//自动按照容器宽度填充（响应式）</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(auto-fill,<span class="number">100px</span>);</span><br></pre></td></tr></table></div></figure><ul><li>【选项】<code>minmax(最小值，最大值)</code></li><li>【选项】<code>auto</code></li><li>【选项】<code>网格线[...]</code></li><li><code>-areas</code>：设定网格区域：<figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-areas</span>:<span class="string">&#x27;a b c&#x27;</span> </span><br><span class="line"><span class="string">&#x27;d e f&#x27;</span>; </span><br><span class="line"><span class="comment">//匿名区域：&quot;.&quot;</span></span><br><span class="line"><span class="comment">//在项目上分配区域：&quot;grid-area:区域名;&quot;</span></span><br><span class="line"><span class="comment">//每个区域的起始网格线自动命名为&quot;区域名-start&quot;</span></span><br><span class="line"><span class="comment">//终止网格线自动命名为&quot;区域名-end&quot;</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="gap"   >          <a href="#gap" class="heading-link"><i class="fas fa-link"></i></a><a href="#gap" class="headerlink" title="gap"></a><code>gap</code></h2>      <p><strong>容器属性</strong>，设置行，列的间距。</p><ul><li><code>row-gap</code></li><li><code>column-gap</code></li><li><code>gap</code></li></ul>        <h2 id="grid-auto"   >          <a href="#grid-auto" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto" class="headerlink" title="grid-auto"></a><code>grid-auto</code></h2>              <h3 id="grid-auto-flow"   >          <a href="#grid-auto-flow" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a><code>grid-auto-flow</code></h3>      <p><strong>容器属性</strong>，设置自动排列的方向</p><ul><li>【选项1】<code>row</code>：按行排放（默认）</li><li>【选项1】<code>column</code>：按列排放</li><li>【选项2】<code>dense</code>：用后排项目填补空余部分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221104105341526.png" alt="image-20221104105341526"></p>        <h3 id="grid-auto-rows-columns"   >          <a href="#grid-auto-rows-columns" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto-rows-columns" class="headerlink" title="grid-auto-rows/columns"></a><code>grid-auto-rows/columns</code></h3>      <p><strong>容器属性</strong>，设置多出项目的宽(column)和高(row)</p>        <h2 id="对齐选项"   >          <a href="#对齐选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐选项" class="headerlink" title="对齐选项"></a>对齐选项</h2>              <h3 id="items"   >          <a href="#items" class="heading-link"><i class="fas fa-link"></i></a><a href="#items" class="headerlink" title="-items"></a><code>-items</code></h3>      <p><strong>容器属性</strong> ：决定项目在<strong>单元格内</strong>的对齐方式</p><ul><li><code>justify-items</code>：水平方向对齐</li><li><code>align-items</code>：垂直方向对齐<ul><li><code>start|end|center|stretch</code>：stretch为撑满单元格</li></ul></li><li><code>place-items</code>：&lt;align-items&gt; &lt;justify-items&gt;</li></ul>        <h3 id="content"   >          <a href="#content" class="heading-link"><i class="fas fa-link"></i></a><a href="#content" class="headerlink" title="-content"></a><code>-content</code></h3>      <p><strong>容器属性</strong>：决定网格区域在父元素内的对齐方式</p><ul><li><code>justify-content</code>：水平方向对齐</li><li><code>align-content</code>：垂直方向对齐<ul><li><code>start|end|center|stretch</code></li><li><code>space-around</code></li><li><code>space-between</code></li><li><code>space-evenly</code>：等间距分布（包括与边界的距离</li></ul></li></ul>        <h2 id="项目属性"   >          <a href="#项目属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2>              <h3 id="指定位置"   >          <a href="#指定位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#指定位置" class="headerlink" title="指定位置"></a>指定位置</h3>      <ul><li><p><code>grid-column/row-start/end</code></p><p>※简写:<code>grid-column:1/3;</code></p><p>※跨行写法：<code>grid-column-start:span 3;</code>(占三列)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221104114016154.png" alt="image-20221104114016154"></p><ul><li><code>grid-area</code>：指定所在区域</li></ul><figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-area</span>:区域名;</span><br><span class="line"><span class="attribute">grid-area</span>:<span class="number">1</span>/<span class="number">1</span>/<span class="number">3</span>/<span class="number">3</span>;</span><br><span class="line"><span class="comment">//简写column-start/column-end/row-start/row-end</span></span><br></pre></td></tr></table></div></figure>        <h3 id="对齐"   >          <a href="#对齐" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3>      <ul><li><code>justify-self/align-self</code>：设置项目在单元格内对齐方式</li></ul>        <h1 id="CSS技巧"   >          <a href="#CSS技巧" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS技巧" class="headerlink" title="CSS技巧"></a>CSS技巧</h1>      <p>box-shadow: offset-x(x偏移) offset-y(y偏移) blur(模糊半径) spread(扩展半径) color(颜色) position(inset内阴影);</p><p>透过上层点击到下层元素：给上层元素添加{pointer-events:none;}</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden;--溢出隐藏</span><br><span class="line"></span><br><span class="line">white-space:nowrap; --文本不换行，文本会继续在一行显示</span><br><span class="line"></span><br><span class="line">text-overflow:ellipsis;  --这时用此属性才能出现省略号</span><br></pre></td></tr></table></div></figure><p>text-overflow失效：父元素为flex布局</p><p><code>user-select: none</code> ：阻止用户选中文本</p>        <h2 id="Filter"   >          <a href="#Filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2>      <div class="table-container"><table><thead><tr><th>选项</th><th align="left">说明</th></tr></thead><tbody><tr><td>blur(<em>px</em>)</td><td align="left">给图像设置高斯模糊。默认是0；这个参数可设置css长度值，但不接受百分比值。</td></tr><tr><td>brightness(<em>%</em>)</td><td align="left">使图片看起来更亮或更暗，默认100%。</td></tr><tr><td>contrast(<em>%</em>)</td><td align="left">调整图像的对比度，默认100%。</td></tr><tr><td>drop-shadow(<em>h-shadow v-shadow blur spread color</em>)</td><td align="left">给图像设置一个阴影效果。</td></tr><tr><td>grayscale(<em>%</em>)</td><td align="left">将图像转换为灰度图像，默认为0，值在0%到100%之间。</td></tr><tr><td>hue-rotate(<em>deg</em>)</td><td align="left">给图像应用色相旋转，默认值是0deg。</td></tr><tr><td>invert(<em>%</em>)</td><td align="left">反转输入图像。默认为0，100%为完全反转。</td></tr><tr><td>opacity(<em>%</em>)</td><td align="left">转化图像的透明程度，默认为100%。</td></tr><tr><td>saturate(<em>%</em>)</td><td align="left">转换图像饱和度，默认100%。</td></tr><tr><td>sepia(<em>%</em>)</td><td align="left">将图像转换为深褐色，默认为0。</td></tr><tr><td>url()</td><td align="left">URL函数接受一个XML文件，该文件设置了 一个SVG滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。例如：<code>filter: url(svg-url#element-id)</code></td></tr></tbody></table></div>        <h2 id="混合模式"   >          <a href="#混合模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mix-blend-mode: normal; //正常</span><br><span class="line">mix-blend-mode: multiply; //正片叠底</span><br><span class="line">mix-blend-mode: screen; //滤色</span><br><span class="line">mix-blend-mode: overlay; //叠加</span><br><span class="line">mix-blend-mode: darken; //变暗</span><br><span class="line">mix-blend-mode: lighten; //变亮</span><br><span class="line">mix-blend-mode: color-dodge; //颜色减淡</span><br><span class="line">mix-blend-mode: color-burn; //颜色加深</span><br><span class="line">mix-blend-mode: hard-light; //强光</span><br><span class="line">mix-blend-mode: soft-light; //柔光</span><br><span class="line">mix-blend-mode: difference; //差值</span><br><span class="line">mix-blend-mode: exclusion; //排除</span><br><span class="line">mix-blend-mode: hue; //色相</span><br><span class="line">mix-blend-mode: saturation; //饱和度</span><br><span class="line">mix-blend-mode: color; //颜色</span><br><span class="line">mix-blend-mode: luminosity; //亮度</span><br><span class="line">mix-blend-mode: initial; //初始</span><br><span class="line">mix-blend-mode: inherit; //继承</span><br><span class="line">mix-blend-mode: unset; //复原</span><br></pre></td></tr></table></div></figure>        <h2 id="使用绝对定位做抽屉"   >          <a href="#使用绝对定位做抽屉" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用绝对定位做抽屉" class="headerlink" title="使用绝对定位做抽屉"></a>使用绝对定位做抽屉</h2>      ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;页面尺寸的选择&quot;   &gt;
          &lt;a href=&quot;#页面尺寸的选择&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#页面尺寸的选择&quot; class=&quot;headerlink&quot; title=&quot;页面尺寸的选择&quot;&gt;&lt;/a&gt;页面尺寸的选择&lt;/h1&gt;
      
        &lt;h2 id=&quot;网页宽度-amp-有效可视区&quot;   &gt;
          &lt;a href=&quot;#网页宽度-amp-有效可视区&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#网页宽度-amp-有效可视区&quot; class=&quot;headerlink&quot; title=&quot;网页宽度&amp;amp;有效可视区&quot;&gt;&lt;/a&gt;网页宽度&amp;amp;有效可视区&lt;/h2&gt;
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网页宽度&lt;/strong&gt;：进行页面设计时画板的宽度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有效可视区&lt;/strong&gt;：网页内容所占的宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/2107_01.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue3应用练习</title>
    <link href="https://lzmustb.github.io/2022/10/03/my-first-vue-app/"/>
    <id>https://lzmustb.github.io/2022/10/03/my-first-vue-app/</id>
    <published>2022-10-03T04:23:24.000Z</published>
    <updated>2023-09-25T12:47:55.333Z</updated>
    
    <content type="html"><![CDATA[<p>在跟着<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1QU4y1E7qo/" >Vue3通用后台管理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>敲完代码，又对着Vue3文档学了个大概后，做了个应用试手。</p><span id="more"></span><hr>        <h1 id="技术栈"   >          <a href="#技术栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1>      <ul><li>Vue3</li><li>Vite</li><li>vue-router</li><li>pinia</li><li>element-Plus</li></ul><hr>        <h1 id="实现的功能"   >          <a href="#实现的功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h1>      <ul><li>通过<code>增加批注</code>按钮给文章的选定段落增加批注。</li><li>批注包括<code>名称</code>，<code>批注内容</code>，<code>时间</code>，<code>选定段落</code></li><li>增加的<code>批注</code>会显示在文章的侧栏。</li><li><strong>点击批注</strong>会标记该批注和选定的段落，且同时只有一个批注会被选定。</li><li>在<strong>批注汇总</strong>页显示所有文章的所有批注。</li><li>在<strong>批注汇总</strong>页<strong>点击批注</strong>会跳转到目标批注所在的文章及段落，同时使该批注被选定。</li></ul><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221003124743017.png" alt="image-20221003124743017" style="zoom: 25%;" /><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221003124822698.png" alt="image-20221003124822698" style="zoom: 25%;" /><hr>        <h1 id="遇到的问题"   >          <a href="#遇到的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1>              <h2 id="onClick事件内注册的click侦听器会直接被触发"   >          <a href="#onClick事件内注册的click侦听器会直接被触发" class="heading-link"><i class="fas fa-link"></i></a><a href="#onClick事件内注册的click侦听器会直接被触发" class="headerlink" title="onClick事件内注册的click侦听器会直接被触发"></a>onClick事件内注册的click侦听器会直接被触发</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮绑定了onclick事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClickEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//update()会在按钮时直接被触发</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>解决方法</strong>：将<code>click</code>事件换成<code>mousedown</code></p>        <h2 id="在点击批注跳转后使该批注变成选定状态"   >          <a href="#在点击批注跳转后使该批注变成选定状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#在点击批注跳转后使该批注变成选定状态" class="headerlink" title="在点击批注跳转后使该批注变成选定状态"></a>在点击批注跳转后使该批注变成选定状态</h2>      <p><strong>解决方法</strong>：<code>onActivated()</code></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;onActivated&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">onActivated</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//每当页面被重新加载就会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h2 id="多行文字的截取省略"   >          <a href="#多行文字的截取省略" class="heading-link"><i class="fas fa-link"></i></a><a href="#多行文字的截取省略" class="headerlink" title="多行文字的截取省略"></a>多行文字的截取省略</h2>      <p><strong>解决方法</strong>：找准文字所在的块级元素</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>; //限制的行数</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>我的前端学习比较断断续续，缺乏练习和规范，导致实际操作起来试错很多。虽然遇到的问题最终都解决了，但做一个省略了UI的小功能应用还花了将近两天时间。而且这次实践也让我体会到UI设计并不容易，得进行系统的学习。更不要妄想不打设计稿，边敲代码边设计。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在跟着&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://www.bilibili.com/video/BV1QU4y1E7qo/&quot; &gt;Vue3通用后台管理&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;敲完代码，又对着Vue3文档学了个大概后，做了个应用试手。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="https://lzmustb.github.io/2022/09/25/Vue3-conclusion/"/>
    <id>https://lzmustb.github.io/2022/09/25/Vue3-conclusion/</id>
    <published>2022-09-25T14:03:42.000Z</published>
    <updated>2023-07-11T04:41:55.735Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Vue3"   >          <a href="#Vue3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1>      <p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><span id="more"></span><hr>        <h1 id="开发步骤"   >          <a href="#开发步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1>              <h2 id="step-0-构建"   >          <a href="#step-0-构建" class="heading-link"><i class="fas fa-link"></i></a><a href="#step-0-构建" class="headerlink" title="step_0_构建"></a>step_0_构建</h2>              <h3 id="Vite脚手架"   >          <a href="#Vite脚手架" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vite脚手架" class="headerlink" title="Vite脚手架"></a>Vite脚手架</h3>      <p>通过脚手架，可以快速构建项目预设，包含<code>main.js</code>，<code>App.vue</code>以及<code>/src</code>文件夹等。</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//安装vite脚手架并构建预设vue项目</span><br><span class="line">yarn[或cnpm] create vite my-vue-app --template vue</span><br><span class="line"></span><br><span class="line">//进入项目根目录，安装</span><br><span class="line">cd my-vue-app</span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">//创建本地服务器，进入开发模式</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></div></figure>        <h3 id="elementPlus引入"   >          <a href="#elementPlus引入" class="heading-link"><i class="fas fa-link"></i></a><a href="#elementPlus引入" class="headerlink" title="elementPlus引入"></a>elementPlus引入</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入根目录，安装element-Plus</span></span><br><span class="line">cnpm install element-plus --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">cnpm install -D unplugin-vue-components unplugin-auto-<span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入到vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>完整引入Icon</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) &#123;</span><br><span class="line">  app.<span class="title function_">component</span>(key, component)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="安装-amp-配置-vue-router"   >          <a href="#安装-amp-配置-vue-router" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-amp-配置-vue-router" class="headerlink" title="安装&amp;配置 vue-router"></a>安装&amp;配置 vue-router</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//项目根目录，安装4.0以上vue-router</span></span><br><span class="line">npm install vue-router@<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;src/router/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储路径</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;intro&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/Intro.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></div></figure>        <h3 id="安装-amp-配置-pinia"   >          <a href="#安装-amp-配置-pinia" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-amp-配置-pinia" class="headerlink" title="安装&amp;配置 pinia"></a>安装&amp;配置 pinia</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根目录</span></span><br><span class="line">npm install pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;src/store/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;id&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">isCollapse</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">currentMenu</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">tabsList</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">menu</span>:[</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">token</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h2 id="step-1-创建应用实例"   >          <a href="#step-1-创建应用实例" class="heading-link"><i class="fas fa-link"></i></a><a href="#step-1-创建应用实例" class="headerlink" title="step_1_创建应用实例"></a>step_1_创建应用实例</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main.<span class="property">js</span><span class="comment">//入口文件</span></span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">1.</span>创建应用实例--&gt;</span><br><span class="line"><span class="comment">//导入createApp，单文件根组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//createApp(根组件,根组件Props[可选])</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">/*---外部导入↑或↓内联---*/</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="comment">/*内联根组件*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">2.</span>引入router,pinia--&gt;</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">3.</span>将应用实例挂载在一个容器元素中--&gt;</span><br><span class="line"><span class="comment">//mount(DOM元素或CSS选择器)</span></span><br><span class="line"><span class="comment">//每个应用实例仅能调用一次mount()</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">/*---CSS选择器↑或↓DOM元素---*/</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>)</span><br></pre></td></tr></table></div></figure><p>App相关方法，属性</p><ul><li><code>unmount()</code>：卸载一个已挂载的应用</li><li><a href="https://cn.vuejs.org/api/application.html#app-provide"><code>provide()</code></a>：提供一个值，在应用中的所有后代组件中注入使用。</li><li><a href="https://cn.vuejs.org/api/application.html#app-component"><code>component()</code></a>：注册组件</li><li><a href="https://cn.vuejs.org/api/application.html#app-directive"><code>directive()</code></a>：注册指令</li><li><a href="https://cn.vuejs.org/api/application.html#app-use"><code>use()</code></a>：安装一个插件</li><li><code>version</code>：当前应用所使用的 Vue 版本号</li><li><a href="https://cn.vuejs.org/api/application.html#app-config"><code>config</code></a>：对这个应用的配置设定</li><li><a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties"><code>config.globalProperties</code></a>：注册能够被应用内所有组件访问的全局属性的对象</li></ul>        <h2 id="step2-组件-component"   >          <a href="#step2-组件-component" class="heading-link"><i class="fas fa-link"></i></a><a href="#step2-组件-component" class="headerlink" title="step2_组件(component)"></a>step2_组件(component)</h2>      <p>命名建议：PascalCase(所有首字母大写)</p>        <h3 id="pinia的使用"   >          <a href="#pinia的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#pinia的使用" class="headerlink" title="pinia的使用"></a>pinia的使用</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="创建组件"   >          <a href="#创建组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3>              <h2 id="step3-测试"   >          <a href="#step3-测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#step3-测试" class="headerlink" title="step3_测试"></a>step3_测试</h2>              <h3 id="单元测试"   >          <a href="#单元测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/scaling-up/testing.html#unit-testing" >单元测试</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>侧重于逻辑上的正确性，只关注应用整体功能的一小部分。</p><hr>        <h1 id="单文件组件"   >          <a href="#单文件组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1>      <blockquote><p><strong>前端开发的关注点不是完全基于文件类型分离的</strong>。在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。</p></blockquote><p>将一个Vue组件的模板(html)，逻辑(javascript)，样式(css)封装在单个文件<code>*.vue</code>中。</p><p>每个文件都由三种顶层语言模块构成：<code>&lt;template&gt;</code> <code>&lt;style&gt;</code> <code>&lt;script&gt;</code> </p>        <h2 id="lt-template-gt"   >          <a href="#lt-template-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-template-gt" class="headerlink" title="&lt;template&gt;"></a>&lt;template&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件最多包含一个<code>&lt;template&gt;</code>标签。标签中可以使用原生html，<code>\&lt;router-view/&gt;</code>，以及element-Plus等UI框架提供的API等。</li></ul>        <h2 id="lt-style-gt"   >          <a href="#lt-style-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-gt" class="headerlink" title="&lt;style&gt;"></a>&lt;style&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件可以包含<strong>多个</strong> <code>&lt;style&gt;</code> 标签。标签内使用css相关语言</li></ul>        <h3 id="lt-style-scoped-gt"   >          <a href="#lt-style-scoped-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-scoped-gt" class="headerlink" title="&lt;style scoped&gt;"></a>&lt;style scoped&gt;</h3>      <p>带有<code>scoped</code>属性的style标签值会影响当前组件内的元素。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">-----↓↓↓通过 PostCSS 将内容转化↓↓↓-----</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span><span class="selector-attr">[data-v-f3f3eg9]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">data-v-f3f3eg9</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>※子组件的根元素只有<strong>一个</strong>时<font color=#aaa>(<code>&lt;template&gt;</code>内的最外层元素)</font>会附带父组件的<code>data-v-hash</code>，同时被父组件的样式和子组件的样式影响。</p><p><strong>当子组件和父组件有同名class的选择器时，父组件样式会覆盖子组件样式</strong>。</p><p>子组件设置<code>inheritAttrs</code>为<code>false</code>，非<code>props</code>属性不会应用到子组件根元素上。但父组件使用标签选择器时，子组件样式依然被影响。</p>        <h4 id="选择器"   >          <a href="#选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4>      <ul><li><code>:deep()</code></li><li><code>:slotted()</code></li><li><code>:global()</code></li><li><strong>小心递归组件中的后代选择器</strong>！对于一个使用了 <code>.a .b</code> 选择器的样式规则来说，如果匹配到 <code>.a</code> 的元素包含了一个递归的子组件，那么所有的在那个子组件中的 <code>.b</code> 都会匹配到这条样式规则。</li></ul>        <h3 id="lt-style-module-gt"   >          <a href="#lt-style-module-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-module-gt" class="headerlink" title="&lt;style module&gt;"></a>&lt;style module&gt;</h3>      <p>编译为CSS Modules(<span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/sfc-css-features.html#css-modules" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p>        <h3 id="v-bind"   >          <a href="#v-bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-bind" class="headerlink" title="v-bind()"></a>v-bind()</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(color);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>自定义属性会通过内联样式的方式应用到组件的根元素上，并且在源值变更的时候响应式地更新</p>        <h3 id="预处理器"   >          <a href="#预处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/sfc-spec.html#pre-processors" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="lt-script-gt"   >          <a href="#lt-script-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-script-gt" class="headerlink" title="&lt;script&gt;"></a>&lt;script&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件最多可以包含一个<code>&lt;script&gt;</code>和 <code>&lt;script setup&gt;</code></li></ul>        <h3 id="构成"   >          <a href="#构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#构成" class="headerlink" title="构成"></a>构成</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 返回值会暴露给模板和其他的选项式 API 钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      count</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>) <span class="comment">// 0</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="export"   >          <a href="#export" class="heading-link"><i class="fas fa-link"></i></a><a href="#export" class="headerlink" title="export"></a>export</h3>      <p><code>export</code>用于导出单文件组件的<strong>选项对象</strong>，以便在其他组件中用<code>import</code>引入。<code>export default</code>导出为一整个模块，<code>export</code>可以分别命名导出的模块。一个js中只能由一个<code>export default</code>，但可以有多个<code>export</code>。</p><p>main.js在构造根组件时，如果根组件包含其他子组件，那么Vue会通过引入的<strong>选项对象</strong>构造对应的组件。</p>        <h2 id="组件使用"   >          <a href="#组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2>              <h3 id="注册子组件"   >          <a href="#注册子组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册子组件" class="headerlink" title="注册子组件"></a>注册子组件</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//局部组件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//注册子组件，可在模板中任意使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//全局组件(main.js中)</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line">app.component(&#x27;Child&#x27;,ChildComponent)</span><br></pre></td></tr></table></div></figure><p>每个组件都是独立的实例，维护独立的属性。</p>        <h3 id="组件参数-Props"   >          <a href="#组件参数-Props" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件参数-Props" class="headerlink" title="组件参数-Props"></a>组件参数-Props</h3>      <ul><li>通过Props属性，子组件可以从父组件接收参数。</li><li>当使用对象形式声明props时，值为该prop预期类型的构造函数。该方法可以在prop传入错误类型时抛出警告。</li><li>可以用一个<code>const</code>变量取接收<code>defineProps()</code>返回的对象</li><li>所有prop都是可选的，除非声明<code>required:true</code></li><li>未传递的prop默认值为<code>undefined</code>或Boolean则为<code>false</code></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props=<span class="title function_">defineProps</span>([<span class="string">&#x27;title&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    &lt;!--或者--&gt;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">propA</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义类型校验</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">validator</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--也可通过v-bind传递变量--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--批量传入Props(post对象包含所有props)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">v-bind</span>=<span class="string">&quot;post&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值</p><p><font color=#b00>※prop在子组件中是只读的，当你尝试修改时，vue会抛出警告</font></p><blockquote><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。</p><p>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在大多数场景下，子组件应该<strong>抛出一个事件</strong>来通知父组件做出改变。</p></blockquote>        <h3 id="组件事件-Emits"   >          <a href="#组件事件-Emits" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件事件-Emits" class="headerlink" title="组件事件-Emits"></a>组件事件-Emits</h3>      <ul><li>通过Emits属性，子组件可以抛出一个事件，给父组件接收</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineEmits</span>([<span class="string">&#x27;enlarge-text&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span>Enlarge text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize : postFontSize +&#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> @<span class="attr">enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="事件参数-amp-事件校验"   >          <a href="#事件参数-amp-事件校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件参数-amp-事件校验" class="headerlink" title="事件参数&amp;事件校验"></a>事件参数&amp;事件校验</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/events.html#event-arguments" >略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="插槽-slot"   >          <a href="#插槽-slot" class="heading-link"><i class="fas fa-link"></i></a><a href="#插槽-slot" class="headerlink" title="插槽-slot"></a>插槽-slot</h3>      <p>通过slot，父组件可以向子组件传递元素，从而在子组件中完成渲染。</p><p>※插槽的内容无法访问到子组件的状态</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AlertBox</span>&gt;</span></span><br><span class="line">  Something bad happened.</span><br><span class="line"><span class="tag">&lt;/<span class="name">AlertBox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件中,slot部分会被父组件传入的元素取代--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>可在此填入默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="具名插槽"   >          <a href="#具名插槽" class="heading-link"><i class="fas fa-link"></i></a><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4>      <p>带 <code>name</code> 属性的插槽被称为具名插槽 (named slots)，未提供<code>name</code>则隐式地命名为“default”。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--或简写--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 插槽的内容放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="作用域插槽"   >          <a href="#作用域插槽" class="heading-link"><i class="fas fa-link"></i></a><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/slots.html#scoped-slots" >略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="动态切换组件"   >          <a href="#动态切换组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态切换组件" class="headerlink" title="动态切换组件"></a>动态切换组件</h3>      <p>通过<code>component</code>元素和<code>is</code>属性可以实现动态组件，<code>is</code>的值可以是<strong>被注册的组件名</strong>或<strong>导入的组件对象</strong>。一般情况下，被切换的组件会被销毁。在下次切换回该组件时，会创建一个初始状态的新实例。</p><p>通过<code>&lt;KeepAlive&gt;</code>内置组件包装动态组件，可以缓存被切换的组件。</p><p>可选属性：</p><ul><li><code>max</code>：限制被缓存的数量</li><li><code>include/exclude</code>：可以筛选需要缓存的组件，传入正则表达式或数组，匹配组件的<code>name</code></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123;Component&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:max</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="透传属性"   >          <a href="#透传属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#透传属性" class="headerlink" title="透传属性"></a>透传属性</h3>      <p>当一个属性传递给子组件时，若该属性未被子组件声明为<code>props</code>,<code>emits</code>,<code>v-on</code>事件监听器，则称为<strong>透传attribute</strong>或<code>Non-props</code>。</p><ul><li><p>当子组件<strong>只含单个根元素</strong>，则透传属性会被自动添加到该元素上，并和元素上原有的属性合并。</p></li><li><p>如果子组件A中是另一个组件B，透传属性会传递给组件B</p></li><li><p>在组件<code>export default</code>中设置<code>inheritAttrs: false</code>可以禁用组件透传。</p></li><li><p>在设为禁用后，在子组件中可以通过<code>$attrs</code><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/attrs.html#disabling-attribute-inheritance" >访问</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>所有透传属性，并通过<code>v-bind=&quot;$attrs&quot;</code>将透传属性绑定到任意元素上。</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyButton组件只含一个button元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--最终渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;child father&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span></span><br><span class="line">click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="在Js中访问attrs"   >          <a href="#在Js中访问attrs" class="heading-link"><i class="fas fa-link"></i></a><a href="#在Js中访问attrs" class="headerlink" title="在Js中访问attrs"></a>在Js中访问attrs</h4>      <p>以下<code>attrs</code>为非响应式。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 透传 attribute 被暴露为 ctx.attrs</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">attrs</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h1 id="组合式API"   >          <a href="#组合式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1>      <blockquote><ul><li>使用函数而不是声明选项的方式书写Vue组件</li><li>包括响应式API，生命周期钩子，依赖注入</li></ul></blockquote>        <h2 id="组合式API的优势"   >          <a href="#组合式API的优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合式API的优势" class="headerlink" title="组合式API的优势"></a>组合式API的优势</h2>      <p>更灵活地组织代码，让逻辑相关的代码能够集中在一处</p><blockquote><p>组合式 API 不像选项式 API 那样会手把手教你该把代码放在哪里。但反过来，它却让你可以像编写普通的 JavaScript 那样来编写组件代码。这意味着<strong>你能够，并且应该在写组合式 API 的代码时也运用上所有普通 JavaScript 代码组织的最佳实践</strong>。如果你可以编写组织良好的 JavaScript，你也应该有能力编写组织良好的组合式 API 代码。</p></blockquote>        <h2 id="响应式API"   >          <a href="#响应式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h2>              <h3 id="理解响应性"   >          <a href="#理解响应性" class="heading-link"><i class="fas fa-link"></i></a><a href="#理解响应性" class="headerlink" title="理解响应性"></a>理解响应性</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#what-is-reactivity" >Vue的解释</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>响应性是可以声明式地处理变化的编程范式，使一个对象发生变化时，与其相关联的对象也能随之发生变化。</p></blockquote><p>响应式对象： Vue 能够跟踪，访问，修改其属性的对象，实际是JavaScript Proxy。</p>        <h3 id="定义响应式变量-reactive"   >          <a href="#定义响应式变量-reactive" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义响应式变量-reactive" class="headerlink" title="定义响应式变量-reactive()"></a>定义响应式变量-reactive()</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="reactive-规则"   >          <a href="#reactive-规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#reactive-规则" class="headerlink" title="reactive()规则"></a>reactive()规则</h4>      <ul><li><p>Proxy和原始对象并非全等，因此使用Vue 的响应式系统应<strong>仅使用你声明对象的代理版本</strong>。</p></li><li><p>已存在的代理对象传入<code>reactive()</code>会返回该代理本身。</p></li><li><p>同一个对象传入<code>reactive()</code>总是会返回同一个代理对象。</p></li><li><p><code>reactive()</code>对原始数据类型无效。</p></li><li><p>将<code>reactive()</code>响应式对象解构或传入函数时，失去响应性连接。</p></li><li><p>当一个变量多次接受<code>reactive()</code>返回的代理对象，旧的响应式连接会丢失。</p></li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 上面的 (&#123; count: 0 &#125;) 将不再被追踪</span></span><br><span class="line">state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></div></figure>        <h3 id="定义响应式变量-ref"   >          <a href="#定义响应式变量-ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义响应式变量-ref" class="headerlink" title="定义响应式变量-ref()"></a>定义响应式变量-ref()</h3>      <p><code>ref()</code>可以创建任何值类型的响应式，且传给函数或是从一般对象上被解构时，不会丢失响应性，可用于将逻辑提取到 <span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/reusability/composables.html" >组合函数</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">const object = &#123;foo:ref(1)&#125;</span><br><span class="line">//ref()将创建一个带value属性的对象</span><br><span class="line">//count=&#123;value:0&#125;</span><br><span class="line">//count.value=0</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure><p>当ref是模板渲染上下文的顶层属性或文本插值计算的最终值时将自动解包</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- ↓解包，结果为：0 --&gt;</span><br><span class="line">&#123;&#123; count &#125;&#125;</span><br><span class="line">&lt;!-- ↓解包，结果为：1 --&gt;</span><br><span class="line">&#123;&#123;object.foo&#125;&#125;</span><br><span class="line">&lt;!-- ↓不解包，结果为：[object Object]1 --&gt;</span><br><span class="line">&#123;&#123;object.foo+1&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#ref-unwrapping-in-reactive-objects" >ref在响应式对象中的解包</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（略）</p>        <h3 id="计算属性"   >          <a href="#计算属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3>      <p><code>computed()</code>方法接收一个getter函数，并返回一个计算属性<strong>ref</strong>，与一般ref用法类似。计算属性会自动追踪响应式依赖并随之变化。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setup内</span></span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> sign = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number&gt;<span class="number">0</span>?<span class="string">&#x27;plus&#x27;</span>:<span class="string">&#x27;minus&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><p>与直接调用方法相比，计算属性会有<strong>缓存</strong>功能，只要其响应式依赖不改变，计算属性就会立即返回先前的结果而不重复计算。<br>一般方法会在每次页面重渲染时执行<br><font color='#aaa'>※计算函数不应进行计算以外的作用(如更改DOM或做异步请求)</font></p>        <h2 id="生命周期钩子"   >          <a href="#生命周期钩子" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2>      <p>在<strong>某一时刻</strong>会<strong>自动执行</strong>的函数</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/lifecycle.16e4c08e.png" alt="组件生命周期图示"></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在实例生成之前</span></span><br><span class="line"><span class="title function_">beforeCreate</span>()</span><br><span class="line"><span class="comment">//在实例生成之后</span></span><br><span class="line"><span class="title function_">created</span>()</span><br><span class="line"><span class="comment">//组件渲染前</span></span><br><span class="line"><span class="title function_">beforeMount</span>()</span><br><span class="line"><span class="comment">//在组件被渲染到页面后</span></span><br><span class="line"><span class="title function_">mounted</span>()</span><br><span class="line"><span class="comment">//在数据发生变化前</span></span><br><span class="line"><span class="title function_">beforeUpdate</span>()</span><br><span class="line"><span class="comment">//在数据发生变化，页面重新渲染后</span></span><br><span class="line"><span class="title function_">updated</span>()</span><br><span class="line"><span class="comment">//当实例销毁前</span></span><br><span class="line"><span class="title function_">beforeUnmounted</span>()</span><br><span class="line"><span class="comment">//实例销毁后</span></span><br><span class="line"><span class="title function_">unmounted</span>()</span><br></pre></td></tr></table></div></figure><p>以上API全部在<code>setup()</code>阶段被调用</p><p>router-view切换时调用：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onActivated, onDeactivated &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用时机为首次挂载</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以及每次从缓存中被重新插入时</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onDeactivated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在从 DOM 上移除、进入缓存</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以及组件卸载时调用</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="依赖注入"   >          <a href="#依赖注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2>              <h2 id="使用组合式API"   >          <a href="#使用组合式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用组合式API" class="headerlink" title="使用组合式API"></a>使用组合式API</h2>              <h3 id="setup"   >          <a href="#setup" class="heading-link"><i class="fas fa-link"></i></a><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3>      <p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口，通常只在以下情况下使用：</p><ol><li>需要在非单文件组件中使用组合式 API 时。</li><li>需要在基于选项式 API 的组件中使用组合式 API 的代码时。</li></ol><p><strong>其他情况下，都应优先使用&lt;script setup&gt;语法。</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;    </span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props,context) &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line">    // 通过return返回的变量会暴露给模板和其他的选项式API钩子</span><br><span class="line">    return &#123;</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure><blockquote><p>在模板中访问从 <code>setup</code> 返回的 <span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/reactivity-core.html#ref" >ref</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 时，它会<span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#deep-reactivity" >自动浅层解包</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，因此你无须再在模板中为它写 <code>.value</code>。当通过 <code>this</code> 访问时也会同样如此解包。<br><code>setup()</code> 自身并不含对组件实例的访问权，即在 <code>setup()</code> 中访问 <code>this</code> 会是 <code>undefined</code>。你可以在选项式 API 中访问组合式 API 暴露的值，但反过来则不行。</p></blockquote>        <h3 id="lt-script-setup-gt"   >          <a href="#lt-script-setup-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-script-setup-gt" class="headerlink" title="&lt;script setup&gt;"></a>&lt;script setup&gt;</h3>      <ul><li><code>defineProps()</code>：声明</li></ul>        <h1 id="Vue指令"   >          <a href="#Vue指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1>              <h2 id="动态属性"   >          <a href="#动态属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:</span>[<span class="attr">name</span>]=<span class="string">&#x27;message&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name=<span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message=<span class="string">&#x27;helloworld&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-text"   >          <a href="#v-text" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2>      <p>更新文本内容</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="v-show"   >          <a href="#v-show" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2>      <p>设置内联<code>display</code>属性</p>        <h2 id="v-if-x2F-v-else-if-x2F-v-else"   >          <a href="#v-if-x2F-v-else-if-x2F-v-else" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-if-x2F-v-else-if-x2F-v-else" class="headerlink" title="v-if&#x2F;v-else-if&#x2F;v-else"></a>v-if&#x2F;v-else-if&#x2F;v-else</h2>      <p>可用于<code>&lt;template&gt;</code>表示仅包含文本或多个元素的条件块。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-for"   >          <a href="#v-for" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2>      <p>v-for中对<strong>对象</strong>迭代时，最多可使用值，键，索引三个相关变量(顺序固定)</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> list=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key1</span>:value1,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key2</span>:value2</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//循环十次</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-on"   >          <a href="#v-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2>              <h3 id="修饰符"   >          <a href="#修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件修饰符:stop,prevent,capture,self,once,passive</span><br><span class="line">click:left,right,middle...</span><br><span class="line">keydown:enter,tab,delete</span><br><span class="line">精确修饰符:exact</span><br></pre></td></tr></table></div></figure>        <h2 id="v-bind-1"   >          <a href="#v-bind-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-bind-1" class="headerlink" title="v-bind"></a>v-bind</h2>              <h2 id="v-once"   >          <a href="#v-once" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2>              <h2 id="v-model"   >          <a href="#v-model" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message=[];</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;VALUE&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="v-model-lazy"   >          <a href="#v-model-lazy" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-lazy" class="headerlink" title="v-model.lazy"></a>v-model.lazy</h3>      <p>数据同步减慢，当事件不再被触发的时候再更新数据</p>        <h3 id="v-model-number"   >          <a href="#v-model-number" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-number" class="headerlink" title="v-model.number"></a>v-model.number</h3>      <p>绑定时进行数据类型转换</p>        <h3 id="v-model-trim"   >          <a href="#v-model-trim" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-trim" class="headerlink" title="v-model.trim"></a>v-model.trim</h3>      <p>去除前后空格</p>        <h1 id="TIPS"   >          <a href="#TIPS" class="heading-link"><i class="fas fa-link"></i></a><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1>      <ul><li><p>内容超出屏幕不显示滚动条：父元素设置<code>overflow:scroll</code></p></li><li><p>flex布局单个子元素靠右：<code>margin-left:auto</code></p></li><li><p>绝对定位居中：</p><ul><li><code>margin:auto</code></li><li><code>top:50%;left:50%</code></li><li><code>transform:translate(-50%,-50)</code></li></ul></li></ul>        <h1 id="路由切换-x2F-router"   >          <a href="#路由切换-x2F-router" class="heading-link"><i class="fas fa-link"></i></a><a href="#路由切换-x2F-router" class="headerlink" title="路由切换&#x2F;router"></a>路由切换&#x2F;router</h1>      ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue3&quot;   &gt;
          &lt;a href=&quot;#Vue3&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;
      &lt;p&gt;Vue (发音为 &amp;#x2F;vjuː&amp;#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java坦克大战个人总结</title>
    <link href="https://lzmustb.github.io/2022/04/29/my-TankWar-conclusion/"/>
    <id>https://lzmustb.github.io/2022/04/29/my-TankWar-conclusion/</id>
    <published>2022-04-29T07:03:30.000Z</published>
    <updated>2022-09-25T09:17:44.301Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;刚学完Java，为了巩固所学，做了个坦克大战。这次主要挑战了下自定义地图和敌人寻路两个功能。</p><span id="more"></span>        <h2 id="自定义地图"   >          <a href="#自定义地图" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义地图" class="headerlink" title="自定义地图"></a>自定义地图</h2>      <p>自定义地图比较简单，只要将地图作为外部文件读取就可以了。</p><p>如这么一个txt文件，W是墙壁，P是玩家起始位置，E是敌人起始位置（可以有多个）：</p><blockquote><p>WWWWWW<br>WPOOOW<br>WOOOEW<br>WWWWWW</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/tankwar.png"></p><p>读取文件基本结构：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String filePath=<span class="string">&quot;../maps/&quot;</span>+name+<span class="string">&quot;.txt&quot;</span>;<span class="comment">//用String生成文件路径，可以根据传入的name读取不同文件</span></span><br><span class="line">      InputStream inputStream=getClass().getResourceAsStream(filePath);</span><br><span class="line">      <span class="type">int</span> data;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span>((data=inputStream.read())!=-<span class="number">1</span>)&#123;<span class="comment">//read()返回-1，说明读取完毕</span></span><br><span class="line">              <span class="type">char</span> ele=(<span class="type">char</span>)data;<span class="comment">//将以整数读取的数据转换为字符</span></span><br><span class="line">              ......</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="敌人寻路"   >          <a href="#敌人寻路" class="heading-link"><i class="fas fa-link"></i></a><a href="#敌人寻路" class="headerlink" title="敌人寻路"></a>敌人寻路</h2>      <p>&amp;emsp;&amp;emsp;常用的寻路算法有广度优先搜索，A-star算法等等。但这次我还是打算自己挑战一下写一个适合这个程序的算法。<del>其实是没学会怎么写</del><br>最后经舍友启发，写出了一个虽然不是最优路径，但很简短的寻路算法。</p>        <h3 id="核心思路"   >          <a href="#核心思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3>      <p>从起点开始依次遍历相邻方格，并让它们指向起点的方向（好比单向链表），形象点说就是在所有可以行走的方格画上箭头，指向起点。待所有方格填完，再从<strong>终点</strong>沿着箭头寻回起点，就形成了一条唯一的路径。（最后还要反转一下）</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/tankwar2.png"></p>        <h3 id="地图存储方式"   >          <a href="#地图存储方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#地图存储方式" class="headerlink" title="地图存储方式"></a>地图存储方式</h3>      <p>对于寻路来说，不需要知道地图的所有信息，只要知道每个方格能否通过就行。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> Px;</span><br><span class="line">    <span class="type">int</span> Py;</span><br><span class="line">    <span class="type">boolean</span> canPass;<span class="comment">//是否可以通过（水流，墙壁为无法通过的地形）</span></span><br><span class="line">    Node last=<span class="literal">null</span>;<span class="comment">//用于在寻路算法中形成指向起点的链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用Vector存储结点集合</span></span><br><span class="line">Vector&lt;Node&gt; nodes=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line"><span class="comment">//用于获取相邻4个结点中可以通过的方格的方法，在后续寻路时起到重要作用</span></span><br><span class="line">    Vector&lt;Node&gt; <span class="title function_">neighbors</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        Vector&lt;Node&gt; neighborNodes=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Node n:nodes)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n.Px-x==-<span class="number">1</span>||n.Px-x==<span class="number">1</span>)&amp;&amp;(n.Py==y)&amp;&amp;(n.isOpen&amp;&amp;n.canPass))&#123;</span><br><span class="line">                neighborNodes.add(n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((n.Px==x)&amp;&amp;(n.Py-y==-<span class="number">1</span>||n.Py-y==<span class="number">1</span>)&amp;&amp;(n.isOpen&amp;&amp;n.canPass))&#123;</span><br><span class="line">                neighborNodes.add(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neighborNodes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>用Graph类存储所有方格的信息，并提供寻路中要用到的算法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    Vector&lt;Node&gt; nodes=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">setGraph</span><span class="params">()</span>;<span class="comment">//根据读取的文件初始化所有方格的信息（略）</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">clearAll</span><span class="params">()</span>;<span class="comment">//使所有node的last=null，以便下一轮寻路（略）</span></span><br><span class="line">     Node <span class="title function_">findNode</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;<span class="comment">//根据坐标找到相应的node（略）</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">setVector</span><span class="params">(Node now)</span>;<span class="comment">//核心算法，给所有方格填上箭头</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">setRoute</span><span class="params">(Node start,Node goal,Vector&lt;Node&gt; route)</span>;<span class="comment">//寻回起点，形成路径</span></span><br><span class="line">     Vector&lt;Node&gt; <span class="title function_">reverseRoute</span><span class="params">(Vector&lt;Node&gt; route)</span>;<span class="comment">//反转路径【Vector竟然没提供（略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="寻路算法"   >          <a href="#寻路算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#寻路算法" class="headerlink" title="寻路算法"></a>寻路算法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">findRoute</span><span class="params">()</span>&#123;</span><br><span class="line">    Vector&lt;Node&gt; newRoute=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line">    <span class="type">int</span> Tx=MyPanel.player1.p_x;</span><br><span class="line">    <span class="type">int</span> Ty=MyPanel.player1.p_y;</span><br><span class="line">    Node start=graph.findNode(p_x,p_y);<span class="comment">//自身所在位置</span></span><br><span class="line">    Node goal=graph.findNode(Tx,Ty);<span class="comment">//目标所在位置</span></span><br><span class="line">    graph.setVector(start);<span class="comment">//“画箭头”的方法</span></span><br><span class="line">    graph.setRoute(start,goal,newRoute);<span class="comment">//从终点寻回起点，形成路径</span></span><br><span class="line">    route=graph.reverseRoute(newRoute);<span class="comment">//反转路径，从起点指向终点</span></span><br><span class="line">    graph.clearAll();<span class="comment">//清除所有箭头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="用递归”画箭头”"   >          <a href="#用递归”画箭头”" class="heading-link"><i class="fas fa-link"></i></a><a href="#用递归”画箭头”" class="headerlink" title="用递归”画箭头”"></a>用递归”画箭头”</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setVector</span><span class="params">(Node now)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Node n:neighbors(now.Px,now.Py))&#123;</span><br><span class="line">    <span class="comment">//对于now相邻的每个方格n，如果还没有画上箭头，就让n.last=now</span></span><br><span class="line">        <span class="keyword">if</span>(n.last==<span class="literal">null</span>)&#123;</span><br><span class="line">            n.last=now;</span><br><span class="line">            setVector(n);<span class="comment">//递归，直到其相邻方格均画上箭头就停止</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="从终点寻回起点，形成路径"   >          <a href="#从终点寻回起点，形成路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#从终点寻回起点，形成路径" class="headerlink" title="从终点寻回起点，形成路径"></a>从终点寻回起点，形成路径</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setRoute</span><span class="params">(Node start,Node goal,Vector&lt;Node&gt; route)</span>&#123;</span><br><span class="line">    Node now=goal;</span><br><span class="line">    route.add(now);<span class="comment">//将now从终点开始沿着箭头位移，并加入到route</span></span><br><span class="line">    <span class="keyword">while</span>(!now.equals(start))&#123;</span><br><span class="line">        now=now.last;</span><br><span class="line">        route.add(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="多线程能做的事"   >          <a href="#多线程能做的事" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程能做的事" class="headerlink" title="多线程能做的事"></a>多线程能做的事</h2>      <p>&amp;emsp;&amp;emsp;本次坦克大战和飞机大战相比，最大的不同还是用到了多线程。在专业的游戏中，渲染引擎，物理引擎等都是在不同线程下以不同频率工作。相比单线程，更加发挥出了硬件的性能，流畅地运行计算量更大的游戏。<br>我在坦克大战中，将每个敌人作为一个线程，同时每个敌人的【攻击判断，移动，路径生成】为单独的线程，路径每隔3秒生成一次，攻击判断和移动间隔为30毫秒。<br>将行为包装为抽象类，子类行为只要重写job()和canUse()方法就行</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run()为启用线程时执行的方法，job()为抽象方法，子类须重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(KEY!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(canUse())&#123;</span><br><span class="line">                job();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">30</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></div></figure><p>刚刚接触多线程，设计还不到位（比如没有把渲染和物理分离），希望在将来的学习中改进。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;刚学完Java，为了巩固所学，做了个坦克大战。这次主要挑战了下自定义地图和敌人寻路两个功能。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>飞机大战-详细流程</title>
    <link href="https://lzmustb.github.io/2022/04/09/my-GameMakingProcess/"/>
    <id>https://lzmustb.github.io/2022/04/09/my-GameMakingProcess/</id>
    <published>2022-04-09T13:58:20.000Z</published>
    <updated>2023-09-25T12:49:07.258Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下详细的流程</p><span id="more"></span>        <h2 id="easyX库"   >          <a href="#easyX库" class="heading-link"><i class="fas fa-link"></i></a><a href="#easyX库" class="headerlink" title="easyX库"></a>easyX库</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://easyx.cn/" >easyX</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是针对C++的免费绘图库，在制作飞机大战时，需要用该库中的函数来绘制图像。<br><strong>下载安装该库后，使用时需要包含头文件&lt;graphics.h&gt;</strong><br>下面是一定需要用到的函数：</p>        <h3 id="initgraph-width-height"   >          <a href="#initgraph-width-height" class="heading-link"><i class="fas fa-link"></i></a><a href="#initgraph-width-height" class="headerlink" title="initgraph(width,height)"></a>initgraph(width,height)</h3>      <p>&amp;emsp;&amp;emsp;用于初始化一个宽为width，高为height的绘图窗口<br>&amp;emsp;&amp;emsp;默认不会打开控制台，但如下填入第三个参数，可同时打开控制台，用于调试。<br>（比如给一个函数加上cout&lt;&lt;”success”,检测有没有调用这个函数）<br>initgraph(width,height,EW_SHOWCONSOLE)<br>&amp;emsp;&amp;emsp;第三个参数还可以填入其他值，详见<span class="exturl"><a class="exturl__link"   href="https://docs.easyx.cn/zh-cn/initgraph" >文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="cleardevice"   >          <a href="#cleardevice" class="heading-link"><i class="fas fa-link"></i></a><a href="#cleardevice" class="headerlink" title="cleardevice()"></a>cleardevice()</h3>      <p>&amp;emsp;&amp;emsp;使用当前背景色（默认为黑）清空绘图窗口。在显示新画面前一般都要调用这个函数</p>        <h3 id="loadimage-amp-img-T-“-x2F-image-png”"   >          <a href="#loadimage-amp-img-T-“-x2F-image-png”" class="heading-link"><i class="fas fa-link"></i></a><a href="#loadimage-amp-img-T-“-x2F-image-png”" class="headerlink" title="loadimage(&amp;img,_T(“.&#x2F;image.png”))"></a>loadimage(&amp;img,_T(“.&#x2F;image.png”))</h3>      <p>&amp;emsp;&amp;emsp;将图片加载到img(该变量名可以自定义)这个对象上。至少填入两个值，前一个为easyX的IMAGE类的对象（要传入其地址），后一个在引号内填图片的路径<br>&amp;emsp;&amp;emsp;IMAGE类是easyX这个库自带的对象，用于保存图片的各种数据。<br>&amp;emsp;&amp;emsp;其成员函数getwidth()&#x2F;getheight()返回图片的宽&#x2F;高<br>&amp;emsp;&amp;emsp;为了在其他电脑上也能正确找到图片地址，路径应使用相对路径</p>        <h3 id="putimage-x-y-amp-img"   >          <a href="#putimage-x-y-amp-img" class="heading-link"><i class="fas fa-link"></i></a><a href="#putimage-x-y-amp-img" class="headerlink" title="putimage(x,y,&amp;img)"></a>putimage(x,y,&amp;img)</h3>      <p>将先前加载的图片绘制到窗口上。参数为<strong>图像的左上角在窗口上对应的坐标</strong></p>        <h3 id="easyX的坐标系"   >          <a href="#easyX的坐标系" class="heading-link"><i class="fas fa-link"></i></a><a href="#easyX的坐标系" class="headerlink" title="easyX的坐标系"></a>easyX的坐标系</h3>      <p>需要注意的是，easyX的坐标系默认是以<strong>向右为正，向下为负，以窗口左上角为原点</strong>。且所有图片的定位都是看其左上角对应的坐标。<br>绘制图像时，坐标可以为负数或超出窗口的宽高，这样的话会绘制一半在窗口中，或完全不显示在窗口中。（但该图像依然存在）</p>        <h2 id="文件的结构"   >          <a href="#文件的结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件的结构" class="headerlink" title="文件的结构"></a>文件的结构</h2>      <p>和以往的作业不同，这是一个较大的项目。一方面，代码里包含了许多的类，另一方面，在程序本身之外还有图像等资源文件（统称为assets）。如果把所有类写在一个文件，改写的时候就非常难找，因此最好尝试把各个类分文件写<br>大致这样👇</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spacewar//根目录</span><br><span class="line">├── main.cpp</span><br><span class="line">└── player.cpp</span><br><span class="line">└── enemy.cpp</span><br><span class="line">└── images//文件夹，用于存放所有图像文件</span><br></pre></td></tr></table></div></figure><p>在包含另一文件时，有以下两种方法：</p><blockquote><p>#include &lt;graphics.h&gt; &#x2F;&#x2F;用尖括号表示优先查找系统文件<br>#include “player.cpp” &#x2F;&#x2F;用引号表示优先从当前文件夹查找，自己写的文件都最好用这个方法</p></blockquote>        <h2 id="游戏的架构"   >          <a href="#游戏的架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏的架构" class="headerlink" title="游戏的架构"></a>游戏的架构</h2>              <h3 id="外层结构"   >          <a href="#外层结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#外层结构" class="headerlink" title="外层结构"></a>外层结构</h3>      <p>要想做一个画面实时变化的游戏，就要像视频一样，以人眼难以分辨的频率去不断绘制画面，因此，程序的最简结构如下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">initgraph</span>();<span class="comment">//初始化绘图窗口</span></span><br><span class="line">init各种东西();</span><br><span class="line"><span class="comment">//初始化需要用到的所有变量，包括但不限于玩家飞机，敌人系统，分数，道具系统等等</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//游戏的主循环，每一轮循环都要画出所有元素，一次循环为一帧</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="主循环"   >          <a href="#主循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h3>      <p>虽然每个人做的游戏规则不同，但在主循环中，大致要做如下的事情（执行顺序要视情况调整）：</p><ul><li>判断玩家，敌人，子弹间的碰撞</li><li>按照一定频率生成敌人，道具等</li><li>接收玩家输入的操作，并处理结果</li><li>绘制玩家，敌人，子弹，分数等元素，同时处理移动</li><li>控制帧率</li></ul><p>其中控制帧率最简单的方法是在循环的结尾加Sleep()</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sleep</span>(time);<span class="comment">//需要头文件&lt;windows.h&gt;</span></span><br><span class="line"><span class="comment">//time为毫秒，例如time=33.3时，帧率(FPS)为30，即每秒刷新30次画面</span></span><br></pre></td></tr></table></div></figure><p>实际上在sleep()前执行函数的时间也要计算，但飞机大战这个规模还没有什么影响，就忽略不计了</p>        <h3 id="接收玩家指令的方式"   >          <a href="#接收玩家指令的方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#接收玩家指令的方式" class="headerlink" title="接收玩家指令的方式"></a>接收玩家指令的方式</h3>      <p>“_kbhit()”函数在用户按下按键时返回true，否则返回false<br>“_getch()”函数<strong>等待并返回</strong>用户按下按键的ASCII码<br>只使用_getch()，程序需要等待用户输入按键，也就会导致玩家不动，敌人也不动的现象。<br>这里专门给玩家设置一个执行指令的函数，是为了后续能清楚地分清与玩家相关的指令和不相关的指令。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> cmd = _getch();</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用玩家对象的command函数</span></span><br><span class="line"><span class="keyword">default</span>:Player.<span class="built_in">command</span>(cmd); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="试着先让自己的飞机动起来"   >          <a href="#试着先让自己的飞机动起来" class="heading-link"><i class="fas fa-link"></i></a><a href="#试着先让自己的飞机动起来" class="headerlink" title="试着先让自己的飞机动起来"></a>试着先让自己的飞机动起来</h3>      <p>我自己在写的时候也不是一次性就加入敌人，子弹等等内容，先别想那么多，让飞机在窗口上动起来🎵</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">player</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_x;</span><br><span class="line"><span class="type">int</span> m_y;</span><br><span class="line"><span class="type">int</span> m_speed;</span><br><span class="line">IMAGE m_img;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">player</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//载入图片</span></span><br><span class="line"><span class="built_in">loadimage</span>(&amp;m_img, _T(<span class="string">&quot;./images/player.png&quot;</span>));</span><br><span class="line"><span class="comment">//先随便给个值，但注意不要超出窗口大小！</span></span><br><span class="line">m_x=<span class="number">100</span>;</span><br><span class="line">m_y=<span class="number">100</span>;</span><br><span class="line">m_speed=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPlayer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制玩家的函数</span></span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_img,);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">command</span><span class="params">(<span class="type">char</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//执行玩家指令的函数</span></span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根据指令让对应坐标+或-速度</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:m_y-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:m_x-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:m_y+= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:m_x+= m_speed; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>将它放到main函数中：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">500</span>,<span class="number">800</span>);</span><br><span class="line">player Player;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cleardevice</span>();</span><br><span class="line">Player.<span class="built_in">drawPlayer</span>();</span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> cmd = _getch();</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">default</span>:Player.<span class="built_in">command</span>(cmd); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="设计类"   >          <a href="#设计类" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h2>      <p>以我的做法，最少需要4个类：玩家，子弹，敌人，敌群<br>其中【玩家，敌人，子弹】都有共通的属性：坐标，速度，宽高，因此可以继承自一个Object类。<br><strong>敌群</strong>这个类的作用，在于管理所有的敌人。因为所有的敌人都需要和玩家判断碰撞，并且在超出屏幕时及时删除<br>敌群类(enemies)和敌人类(enemy)不同于继承，叫做组合，是“A有B”的关系。</p>        <h4 id="object类"   >          <a href="#object类" class="heading-link"><i class="fas fa-link"></i></a><a href="#object类" class="headerlink" title="object类"></a>object类</h4>      <p>object基类很简洁，只需要记录几个必要信息，并做所有物体通用的碰撞检测</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">object</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_x;<span class="comment">//横坐标</span></span><br><span class="line"><span class="type">int</span> m_y;<span class="comment">//纵坐标</span></span><br><span class="line"><span class="type">int</span> m_width;<span class="comment">//图像宽度</span></span><br><span class="line"><span class="type">int</span> m_height;<span class="comment">//图像高度</span></span><br><span class="line"><span class="type">int</span> m_speed;<span class="comment">//速度</span></span><br><span class="line"><span class="type">int</span> map_width=<span class="number">550</span>;<span class="comment">//窗口宽度(用于判断越界)</span></span><br><span class="line"><span class="type">int</span> map_height=<span class="number">850</span>;<span class="comment">//窗口高度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//判断碰撞的函数，使用时传入子类指针就行。不用static其实也可以</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">isHit</span><span class="params">(object* ptr1,object* blt)</span></span>;</span><br></pre></td></tr></table></div></figure><p>※isHit()详见<span class="exturl"><a class="exturl__link"   href="https://ustb-lzm.gitee.io/ustb-lzm/2022/03/26/my-firstGame/" >第一次游戏制作</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="敌人类-amp-敌群类"   >          <a href="#敌人类-amp-敌群类" class="heading-link"><i class="fas fa-link"></i></a><a href="#敌人类-amp-敌群类" class="headerlink" title="敌人类&amp;敌群类"></a>敌人类&amp;敌群类</h4>      <p>敌人最少只要object所继承的属性外加一张图片就可以。<br>敌群要控制敌人的生成，</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">enemy</span>:<span class="keyword">public</span> object &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">enemies</span>;<span class="comment">//将权限给敌群类</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IMAGE m_img;<span class="comment">//用于保存敌机图片的IMAGE对象</span></span><br><span class="line">…………</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">enemies</span> &#123;</span><br><span class="line"><span class="type">int</span> enemyCount;<span class="comment">//记录敌人数量(但我并没用到)</span></span><br><span class="line"><span class="type">int</span> interval;<span class="comment">//敌人产生的间隔</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">enemy* ePtr[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//敌人类指针数组,上限为30个敌人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createEnemy</span><span class="params">()</span></span>;<span class="comment">//生成敌人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawEnemies</span><span class="params">()</span></span>;<span class="comment">//绘制所有敌人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteEnemies</span><span class="params">()</span></span>;<span class="comment">//删除死亡/超出屏幕的敌人</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isEnemiesHit</span><span class="params">()</span></span>;<span class="comment">//给每个敌人判断碰撞</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shoot</span><span class="params">()</span></span>;<span class="comment">//如果敌人可以发射子弹，最好在敌群类统一管理（要和玩家判断碰撞）</span></span><br></pre></td></tr></table></div></figure>        <h3 id="子弹类"   >          <a href="#子弹类" class="heading-link"><i class="fas fa-link"></i></a><a href="#子弹类" class="headerlink" title="子弹类"></a>子弹类</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bullet</span>:<span class="keyword">public</span> object &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IMAGE m_bullet;</span><br><span class="line"><span class="type">double</span> m_angle;<span class="comment">//发射角度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBullet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_bullet);</span><br><span class="line">m_x += m_speed * <span class="built_in">sin</span>(m_angle);<span class="comment">//所有子弹通用的移动，只需确定方向和速度</span></span><br><span class="line">m_y += m_speed * <span class="built_in">cos</span>(m_angle);<span class="comment">//但要注意x和y为整数，角度太细会丢失精度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOut</span><span class="params">()</span></span>;<span class="comment">//判断子弹是否超出屏幕</span></span><br></pre></td></tr></table></div></figure>        <h3 id="玩家类"   >          <a href="#玩家类" class="heading-link"><i class="fas fa-link"></i></a><a href="#玩家类" class="headerlink" title="玩家类"></a>玩家类</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">player</span>:<span class="keyword">public</span> object &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IMAGE m_img;</span><br><span class="line">bullet* m_blt[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shoot</span><span class="params">()</span></span>;<span class="comment">//发射子弹</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">command</span><span class="params">(<span class="type">char</span> cmd)</span></span>;<span class="comment">//接收指令</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judgeOverflow</span><span class="params">(<span class="type">char</span> cmd)</span></span>;<span class="comment">//移动时判断防止超出屏幕</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPlayerAndBullet</span><span class="params">()</span></span>;<span class="comment">//绘制玩家和子弹</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下详细的流程&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>第一次游戏制作</title>
    <link href="https://lzmustb.github.io/2022/03/26/my-firstGame/"/>
    <id>https://lzmustb.github.io/2022/03/26/my-firstGame/</id>
    <published>2022-03-26T04:11:19.000Z</published>
    <updated>2023-09-25T12:48:10.470Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;因学校程序设计课的作业要求，第一次游戏制作献给了飞机大战。一开始还嫌麻烦，但基本框架打好之后就得心应手了，开始添加各种元素，比玩游戏还上头🤩三天能交的作业硬是拖了一周。<br>&amp;emsp;&amp;emsp;本来还有各种主意想要实现，但再做下去也学不到什么新东西了，就暂且割爱了。</p><span id="more"></span>        <h2 id="起因"   >          <a href="#起因" class="heading-link"><i class="fas fa-link"></i></a><a href="#起因" class="headerlink" title="起因"></a>起因</h2>      <blockquote><p>游戏的编写能用到C++学习过程中的很多知识，数组、函数和面向对象。这个练习是一个开放式的练习，你可以在基本要求的基础上进行任何扩充。<br>游戏编写的基本要求，参看附件。</p><blockquote><p>扩充下游戏1定义的飞机大战游戏的功能：<br>增加多个界面，初始化界面，说明游戏功能；结束界面，提示用户的得分情况，以及是否开始一个新的游戏；<br>随着积分的增加，可以考虑增加难度，加快敌机的下落速度，和出现的速度；<br>功能上做更多的性能处理：例如防止玩家操控飞机飞出边界，击中&#x2F;碰撞检测的处理<br>增加按Esc键后游戏暂停的功能<br>增加图形界面（EasyX,Qt, MFC）以及面向对象的程序设计</p></blockquote></blockquote><blockquote><p>要求：提交完成一定功能或性能扩充后的源代码，以及一个word文档，说明你做的功能完善的目标，设计以及程序实现和测试效果。</p></blockquote><p>虽说是作业，但毕竟是值得纪念的第一作，因此我决定发挥自己目前最大水平做个完整的游戏。</p>        <h2 id="游戏下载"   >          <a href="#游戏下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏下载" class="headerlink" title="游戏下载"></a>游戏下载</h2>      <p>※有闲空的可以玩玩看，就是普通的飞机大战。<br>（Win10应该能正常运行，Win7没试过）</p><p>规则：</p><ul><li>wasd移动，空格切换子弹类型，q使用道具，esc暂停，道具只能存一个</li><li>敌人的血量，频率，移速会随着score增加而增加</li></ul><blockquote><p>链接：<span class="exturl"><a class="exturl__link"   href="https://pan.baidu.com/s/1iB6d0R82fL6XXXTTvJWdIA" >https://pan.baidu.com/s/1iB6d0R82fL6XXXTTvJWdIA</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>提取码：0519</p></blockquote>        <h2 id="游戏制作"   >          <a href="#游戏制作" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏制作" class="headerlink" title="游戏制作"></a>游戏制作</h2>              <h3 id="绘图库的选择"   >          <a href="#绘图库的选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#绘图库的选择" class="headerlink" title="绘图库的选择"></a>绘图库的选择</h3>      <p>&amp;emsp;&amp;emsp;使用的是<span class="exturl"><a class="exturl__link"   href="https://easyx.cn/" >EasyX</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,在上学期刚入门C++的时候正好用过就沿用了，简单易上手。</p>        <h3 id="文件结构"   >          <a href="#文件结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20220326132332034.png" alt="image-20220326132332034"><br>图中父子结点表示class的继承关系（右继承左）<br>其中（itemSystem–itemBlock),(enemies–enemy)是友元关系</p><ul><li>enemies（敌群）用于初始化敌人的类型，速度等参数，并随着得分情况而改变产生敌人频率。</li><li>itemSystem作用和enemies相同，控制道具的生成类型和生成频率</li><li>object父类成员为所有和物体位置相关的变量，以及一个处理碰撞的函数</li><li>player包含一个bullet指针数组，用于一并管理玩家发出的所有子弹，方便和敌人进行碰撞判断(enemies同理)</li></ul>        <h3 id="操作输入结构"   >          <a href="#操作输入结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#操作输入结构" class="headerlink" title="操作输入结构"></a>操作输入结构</h3>      <p>这个方法一次只能接收一个指令，无法做到斜方向的丝滑移动。希望在今后的学习中找到改进方案</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断输入暂停还是玩家操作</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> cmd = _getch();</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">27</span>:<span class="built_in">systemPause</span>(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:p1.<span class="built_in">command</span>(cmd); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家操作输入（judgeOverflow用于判断玩家是否超出窗口）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">command</span><span class="params">(<span class="type">char</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeYOverflow</span>(cmd))m_y-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeXOverflow</span>(cmd))m_x-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeYOverflow</span>(cmd))m_y+= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeXOverflow</span>(cmd))m_x+= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="built_in">useItem</span>(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="comment">//实现在0~3号子弹发射模式中切换</span></span><br><span class="line">            bltType = ((bltType == <span class="number">3</span>) ? <span class="number">0</span> : bltType+<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-1-解决运行时闪屏问题"   >          <a href="#问题-1-解决运行时闪屏问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-1-解决运行时闪屏问题" class="headerlink" title="问题-1 解决运行时闪屏问题"></a>问题-1 解决运行时闪屏问题</h3>      <p>&amp;emsp;&amp;emsp;在绘制图像过多时，EasyX会出现不定时闪屏问题，为此需要使用批量绘图函数<br>详见：<span class="exturl"><a class="exturl__link"   href="https://docs.easyx.cn/zh-cn/BeginBatchDraw" >https://docs.easyx.cn/zh-cn/BeginBatchDraw</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BeginBatchDraw</span>();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//各种元素的绘制函数</span></span><br><span class="line"><span class="built_in">FlushBatchDraw</span>();<span class="comment">//将之前绘制的图像一并输出倒窗口上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EndBatchDraw</span>();</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-2：对不规则物体判断碰撞"   >          <a href="#问题-2：对不规则物体判断碰撞" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-2：对不规则物体判断碰撞" class="headerlink" title="问题-2：对不规则物体判断碰撞"></a>问题-2：对不规则物体判断碰撞</h3>      <p>&amp;emsp;&amp;emsp;常规的判断碰撞就是用两物体的x,y,width,height比较，但由于子弹和飞船形状都不是矩形，使用上述方法会导致判定过于宽松，玩家死都不知道怎么死的🐕。</p><p>我的改进方案：<br>在常规判断法之外，利用EasyX库中getpixel()扫描子弹即将达到的位置区域内有没有背景色以外的颜色。这样的话就可以把误差减小到子弹的方格(大概3px内)</p><p>缺点：</p><ul><li>因判断条件，背景色不能过多(最终我的背景是双色)。</li><li>如果子弹面积过大的话边角误差也较大</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/hitRange.png" alt="img"></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">isHit</span><span class="params">(object* ptr1,object* blt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr1 == <span class="number">0</span> || blt == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr1-&gt;m_x - blt-&gt;m_x &gt; blt-&gt;m_width || ptr1-&gt;m_x+(ptr1-&gt;m_width)&lt;blt-&gt;m_x)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr1-&gt;m_y - blt-&gt;m_y &gt; blt-&gt;m_height || ptr1-&gt;m_y+(ptr1-&gt;m_height)&lt; blt-&gt;m_y)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; blt-&gt;m_width;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; blt-&gt;m_height; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getpixel</span>(blt-&gt;m_x + i, blt-&gt;m_y + j) != BLACK</span><br><span class="line">                   &amp;&amp; <span class="built_in">getpixel</span>(blt-&gt;m_x + i, blt-&gt;m_y + j) != <span class="number">0x000033</span>)</span><br><span class="line">&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-3：无法输出透明图片"   >          <a href="#问题-3：无法输出透明图片" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-3：无法输出透明图片" class="headerlink" title="问题-3：无法输出透明图片"></a>问题-3：无法输出透明图片</h3>      <p>&amp;emsp;&amp;emsp;EasyX不支持输出带Alpha通道的png图片，但在游戏进行时会出现很多元素重叠的情况，为了防止图片的黑边挡住下面的图片，需要做透明化处理<br>解决方案：利用三元光栅操作，对图片进行位运算<br>详见：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/q781634081/article/details/108107639" >https://blog.csdn.net/q781634081/article/details/108107639</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="built_in">loadimage</span>(&amp;m_img, _T(<span class="string">&quot;./images/enemy_normal.png&quot;</span>));</span><br><span class="line"><span class="built_in">loadimage</span>(&amp;m_alpha, _T(<span class="string">&quot;./images/enemy__normal_alpha.png&quot;</span>));</span><br><span class="line"><span class="comment">//输出图片</span></span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_alpha, SRCAND);</span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_img, SRCPAINT);</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-4：窗口大小受系统设置影响，显示不全"   >          <a href="#问题-4：窗口大小受系统设置影响，显示不全" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-4：窗口大小受系统设置影响，显示不全" class="headerlink" title="问题-4：窗口大小受系统设置影响，显示不全"></a>问题-4：窗口大小受系统设置影响，显示不全</h3>      <p>&amp;emsp;&amp;emsp;在打包游戏发给室友测试的时候，发现游戏窗口的大小和预想中的不一样，原因是显示设置中修改了缩放比例。为了在不同缩放比例的电脑上都能正常显示，使用了以下方式。</p><p>详见<span class="exturl"><a class="exturl__link"   href="https://codebus.cn/yangw/dpi-awareness" >创建一个不受系统缩放设置（DPI）影响的绘图窗口 - CodeBus</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WINVER 0x0A00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WIN32_WINNT 0x0A00</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ShellScalingApi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Shcore.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SetProcessDpiAwareness</span>(PROCESS_PER_MONITOR_DPI_AWARE);  </span><br></pre></td></tr></table></div></figure>        <h2 id="心得"   >          <a href="#心得" class="heading-link"><i class="fas fa-link"></i></a><a href="#心得" class="headerlink" title="心得"></a>心得</h2>      <p>&amp;emsp;&amp;emsp;生涯第一次制作完整的游戏，还是非常兴奋的。此前一直想学Unity，但作为计算机专业还是要加强底层设计能力。耗时一周，共900多行代码，虽然对我来说算是一次不小的挑战，但跟独立游戏的规模比起来，还是“路漫漫其修远兮，任重而道远。”【By初中物理老师<br>&amp;emsp;&amp;emsp;除了代码之外，图像制作也是一大麻烦事，而且技术要求也不低。本次游戏只有爆炸效果有3帧的动画，其他元素都是一图流🏳</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;因学校程序设计课的作业要求，第一次游戏制作献给了飞机大战。一开始还嫌麻烦，但基本框架打好之后就得心应手了，开始添加各种元素，比玩游戏还上头🤩三天能交的作业硬是拖了一周。&lt;br&gt;&amp;amp;emsp;&amp;amp;emsp;本来还有各种主意想要实现，但再做下去也学不到什么新东西了，就暂且割爱了。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>unsignedchar的学习</title>
    <link href="https://lzmustb.github.io/2022/01/27/my-study-UnsignedChar/"/>
    <id>https://lzmustb.github.io/2022/01/27/my-study-UnsignedChar/</id>
    <published>2022-01-27T12:18:46.000Z</published>
    <updated>2023-09-25T12:54:33.087Z</updated>
    
    <content type="html"><![CDATA[<p>实际上是借助容量最小的unsigned char类型学习位运算的应用</p><span id="more"></span>        <h2 id="unsigned-char-与-char-的区别"   >          <a href="#unsigned-char-与-char-的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#unsigned-char-与-char-的区别" class="headerlink" title="unsigned char 与 char 的区别"></a>unsigned char 与 char 的区别</h2>      <p>char的最高位为符号位，而unsigned char无符号位，因此：</p><blockquote><p>char：-127<del>127<br>unsigned char：0</del>255</p></blockquote>        <h2 id="unsigned-char-闭环"   >          <a href="#unsigned-char-闭环" class="heading-link"><i class="fas fa-link"></i></a><a href="#unsigned-char-闭环" class="headerlink" title="unsigned char 闭环"></a>unsigned char 闭环</h2>      <p>当unsigned char取得负数<strong>x</strong>时，其值相当于**(256-|x|)**</p><p>例：<img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201272027432.png" alt="img"></p><details><summary>答案</summary><b>10 + 246 = 256, C</b></details>        <h2 id="将unsigned-char作为Flag使用"   >          <a href="#将unsigned-char作为Flag使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#将unsigned-char作为Flag使用" class="headerlink" title="将unsigned char作为Flag使用"></a>将unsigned char作为Flag使用</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flags = <span class="number">0</span>; <span class="comment">//共8位,每位表示一个Flag</span></span><br><span class="line"><span class="comment">//用枚举类型保存至多8个flag</span></span><br><span class="line"><span class="comment">//（实际情况下每个flag都有具体名称表示）</span></span><br><span class="line"><span class="keyword">enum</span>&#123;</span><br><span class="line">    Flag1,Flag2,Flag3,Flag4,</span><br><span class="line">    Flag5,Flag6,Flag7,Flag8,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//检测某个Flag开闭状态的函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkFlag</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> f)</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> t = flags;</span><br><span class="line">    t &gt;&gt;= f;<span class="comment">//相当于t = t/(2^f);</span></span><br><span class="line">    t &lt;&lt;= <span class="number">7</span>;<span class="comment">//相当于t*128,如果t为奇数，结果为128，否则为0</span></span><br><span class="line">    <span class="keyword">return</span> (t != <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开启某个Flag的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setFlag</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> f)</span></span>&#123;</span><br><span class="line">    flags |= (<span class="number">1</span> &lt;&lt; f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭某个Flag的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resetFlag</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> f)</span></span>&#123;</span><br><span class="line">    flags &amp;= ~(<span class="number">1</span> &lt;&lt; f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证，输出‘success’</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">setFlag</span>(Flag2);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">checkFlag</span>(Flag2))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>上述代码中，enum型的Flag1<del>8的值为0</del>7，为了让它们对应到8bit中的每位，在setFlag()和resetFlag()中要进行位移操作：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&lt;&lt;f <span class="comment">//将1向左移动f位,相当于2^f</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;实际上是借助容量最小的unsigned char类型学习位运算的应用&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>程序设计题目——整数分治</title>
    <link href="https://lzmustb.github.io/2022/01/15/my-programing-Problem/"/>
    <id>https://lzmustb.github.io/2022/01/15/my-programing-Problem/</id>
    <published>2022-01-15T00:06:20.000Z</published>
    <updated>2023-09-25T12:53:00.717Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a href="#题目" class="headerlink" title="题目"></a>题目</h2>      <p>&amp;emsp;&amp;emsp;程序设计专业课期末考试上的一道题：</p><blockquote><p><strong>输入两个整数n，k，将n划分为k个整数，且每份均不能为0。求共有多少种划分方案</strong><br>※没有顺序之分，比如对于n&#x3D;4,k&#x3D;3,(1,1,2)和(2,1,1)只能算一种方案。<br>输入样例：7 3<br>输出样例：4</p></blockquote><p>当时考试还剩20分钟，本想着绰绰有余，但没带草稿纸而本人又是心算苦手，就直接白给 <del>但最后还是抖机灵把样例输出凑上了</del></p><span id="more"></span>        <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>      <p>&amp;emsp;&amp;emsp;对于每个数据<strong>n</strong>(n&gt;k)，由于每一份都不能为“0”，所以我们可以首先从<strong>n</strong>中拿出<strong>k</strong>个“1”而不改变结果。假设我要使用 <strong>Func(n,k)</strong> 使其输出答案 <strong>A</strong>，则：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A == Func(n,k) == Func(n-k,k) + S</span><br></pre></td></tr></table></div></figure><p>&amp;emsp;&amp;emsp;在拿出<strong>k</strong>个“1”后，要注意剩下的 <strong>(n-k)</strong> 是可以分出“0”的，所以在 <strong>Func(n-k,k)</strong> 的基础上还要加一个<strong>S</strong>。<br>&amp;emsp;&amp;emsp;而S为：将<strong>n-k</strong>分成<strong>k</strong>份，且其中有<strong>1~(k-1)</strong> 个“0”。<br>&amp;emsp;&amp;emsp;由此推出，对于给定的 <strong>n</strong>和<strong>k</strong>，：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S == Func(n-k,k-1)+Func(n-k,k-2)+…+Func(n-k,1)</span><br></pre></td></tr></table></div></figure><p>将第一条等式中的S替换，就可以得出：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A == Func(n,k) == Func(n-k,k)+…+Func(n-k,1)</span><br></pre></td></tr></table></div></figure><p>到这一步，递推关系已经出来了，接下来是寻找结束条件。</p><ul><li>首先不难想到，<strong>k&#x3D;&#x3D;1</strong>时，<strong>Func(n,1)&#x3D;&#x3D;1</strong></li><li>其次考虑当<strong>n&#x3D;&#x3D;k</strong>时，<strong>Func(n,k)&#x3D;&#x3D;1</strong></li><li>当<strong>n&lt;k</strong>时，<strong>Func(n,k)&#x3D;&#x3D;0</strong></li></ul>        <h2 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Func</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>||n == k)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; k)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        n = n - k;</span><br><span class="line">        <span class="keyword">while</span> (k &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += <span class="built_in">Func</span>(n,k); </span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">Func</span>(n,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>递归题虽然思考过程很痛苦，但看到写出来的代码如此简介还是很爽👍</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;   &gt;
          &lt;a href=&quot;#题目&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;
      &lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;程序设计专业课期末考试上的一道题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入两个整数n，k，将n划分为k个整数，且每份均不能为0。求共有多少种划分方案&lt;/strong&gt;&lt;br&gt;※没有顺序之分，比如对于n&amp;#x3D;4,k&amp;#x3D;3,(1,1,2)和(2,1,1)只能算一种方案。&lt;br&gt;输入样例：7 3&lt;br&gt;输出样例：4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当时考试还剩20分钟，本想着绰绰有余，但没带草稿纸而本人又是心算苦手，就直接白给 &lt;del&gt;但最后还是抖机灵把样例输出凑上了&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
    <category term="递归" scheme="https://lzmustb.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="算法" scheme="https://lzmustb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】大学生为了制作一部游戏而经历的地狱</title>
    <link href="https://lzmustb.github.io/2022/01/14/trans-make-game-bymyself/"/>
    <id>https://lzmustb.github.io/2022/01/14/trans-make-game-bymyself/</id>
    <published>2022-01-14T02:48:58.000Z</published>
    <updated>2023-09-25T13:13:25.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<br><span class="exturl"><a class="exturl__link"   href="https://note.com/dom_cob1/n/n8eaf211cba2b?magazine_key=mcaf9d5648d65" >大学生が自作ゲームを1本作るまでに経験した数々の地獄のお話</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>原作者：<br><span class="exturl"><a class="exturl__link"   href="https://note.com/dom_cob1/" >Matsumoto</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="译者摘要"   >          <a href="#译者摘要" class="heading-link"><i class="fas fa-link"></i></a><a href="#译者摘要" class="headerlink" title="译者摘要"></a>译者摘要</h2>      <p>这篇文章讲述了一位非科班的大学生从学习编程，到最后制作出一款完整的游戏所经历的种种磨难。从他的回忆中，我能感受到作者满溢的创作热情，其中的许多经验，以及最后的话语也给我莫大的鼓励和启发。</p><span id="more"></span>        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>      <p>初次见面。虽然有些唐突，但各位！</p><p>一定也有过“人生至少要做一次游戏制作者！”这样的想法吧。</p><p>这篇文章讲述的就是我，从大二开始学习制作游戏，到实际完成所经历的种种地狱。</p><p>至于为什么把这件事特意写成文章，在最后会解释。</p><p>不限于游戏，如果你正想要开始某些事情，请务必看一看。</p>        <h2 id="经济学院的地狱"   >          <a href="#经济学院的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#经济学院的地狱" class="headerlink" title="经济学院的地狱"></a>经济学院的地狱</h2>      <p>常说“如果没有想做的事，就先去大学增加未来的选项”,但我想对高中时的自己说，并不是到了大学就会找到想做的事情。</p><p>什么都没考虑就选择了经济学。</p><p>课程对我而言很无聊不说，还因为看不起经济学院那群逼王，没有交到朋友，大概有一年没去学校。</p><p>在那个时期我开始思考就职的事情，而一看同学的求职方向大多都是银行，证券公司，周围的人就像坏掉的机器人一样一天到晚求职咨询。而且大家比起说是对工作内容感兴趣，嘴上聊的都是年收入和头衔的话题。而我，一边觉得他们扯淡，却也找不到自己想做的事。</p><p>从这个时候，我开始思考自己真正想做的事情。</p>        <h2 id="编程的地狱"   >          <a href="#编程的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#编程的地狱" class="headerlink" title="编程的地狱"></a>编程的地狱</h2>      <p>因为觉得编程就像黑客一样酷炫，我决定学习编程。</p><p>因为编程的话题根本不好玩，所以我就不展开来谈了，但大约遇到过5次挫折。</p><p>看不懂写着“猫也能看懂”的书而对猫肃然起敬；搞不来环境配置而扬言自己的电脑不适合编程；去向工学院的教授问“安装”是什么意思被批了一通等等。</p><p>但我想对接下来要学习编程的所有人说一句话。</p><p><strong>就算完全不懂也没关系，尝试着自己去使用它</strong></p><p>这点非常重要，像考试科目那样“先掌握基础，再去理解整体~”这样的学法对编程是不怎么管用的。</p><p>还有就是不要去看推特上的大佬。  </p><p>经过一段时间后，我就试着用python做了一个2048。<br><span align='center'><img src='https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201141420300.png' width=60%></span></p><p>当看到程序按照自己所想的一样运作时，我从中第一次感受到了游戏制作的乐趣。</p><p>建议在学编程学完函数和类左右的时候，可以试着自己思考做些程序。</p>        <h2 id="从Python转到C-的地狱"   >          <a href="#从Python转到C-的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#从Python转到C-的地狱" class="headerlink" title="从Python转到C++的地狱"></a>从Python转到C++的地狱</h2>      <p>因为有人说做游戏的话学C更好，我就开始学习C++。</p><p>了解过的人应该知道，C++和Python完全不同。差不多就像Wii Sports的保龄球和真实的保龄球那种程度不同。</p><p>开始出现指针，变量声明之类从未接触的术语，而且又败在了环境配置这一步。</p><p>编程初学者的最大敌人就是环境配置。具体就不展开说了，但如今我更喜欢易阅读的C++。</p>        <h2 id="Unity的天堂"   >          <a href="#Unity的天堂" class="heading-link"><i class="fas fa-link"></i></a><a href="#Unity的天堂" class="headerlink" title="Unity的天堂"></a>Unity的天堂</h2>      <p>就算是没有做过游戏的人，想必也听说过Unity。简而言之就是能做游戏的工具。</p><p>第一次接触的时候，得知它能演算重力，判定碰撞等等各种事情，让我非常感动。</p><p>在Unity中需要用到C#这门语言，但就算没学过也问题不大，在想要实现某种功能时现查就可以了。</p><p>就像先前说过的，“尝试着自己去使用它”。我就在按照书本制作游戏的途中记住了编程的方法。</p><p>实际看到自己的角色动起来的时候，真的是很有乐趣。</p>        <h2 id="实习的地狱"   >          <a href="#实习的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#实习的地狱" class="headerlink" title="实习的地狱"></a>实习的地狱</h2>      <p>就在这个时期，我看机会难得，就参加了游戏公司的实习。</p><p>因为要进行作品评比，我花了一个月左右，从ddl三天前开始熬夜赶工做出了以下这款游戏。<br><span align='center'><img src='https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201141437310.png' width=60%></span></p><p>游戏机制什么的都比较单薄，而且说实话比看上去还要不好玩，道具按钮也只是个单纯的按钮。<br>但毕竟是独立完成的游戏，就自信满满参加了评比会。</p><p>轮到我发表的时候，本来还自信满满的，但被问到有趣在哪里，怎么游玩的时候却几乎答不上来。</p><p>轮到下一个人——“这是日本游戏大奖的获奖作品……”</p><p>再下一个人——“这是我拿去参加韩国的比赛的作品……”</p><p>再下一个人——“这是可以在Wii上运行的……”</p><p>差不多到这个时候我就感觉社死了，心情非常消沉，觉得自己完全不是一个水平。</p><p>轮到最后一个人——“对不起，看了别人的作品我还是决定不拿出来献丑了……”</p><p>正当我为找到同伴而稍微安心的时候，评委说就算这样也可以拿出来看一看。确实作为游戏的完成度还不够，但想法非常有创意。很难具体表达，但我感觉像是能火的有趣作品。</p><p>那天以后，我想着自己又没技术，又没创意，全都玩完了，过了一段暴饮暴食的日子。</p>        <h2 id="想不出创意的地狱"   >          <a href="#想不出创意的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#想不出创意的地狱" class="headerlink" title="想不出创意的地狱"></a>想不出创意的地狱</h2>      <p>后来我的精神又恢复了过来，准备再次挑战的时候，却迟迟没法下手。</p><p>以往我只是把角色动起来就很满意了，但这次开始觉得如果不好玩的话做出来也没有意义。</p><p>无法忘记在评比会上看到的那些游戏专业学生的作品，或是有足够创意的作品，尤其是那个拿了大奖的作品，我还经常想起来，在油管上反复观看。</p><p>那个悲惨时期的我就只能跟朋友吹吹“我跟这样的大佬一起参加过实习”。</p><p>只是，多亏实习的失败经历，我查阅了很多GameJam，游戏奖，独立游戏等等相关的资料，并认识了很多优秀的游戏。</p><p>然后我想着先不管怎么说要做点东西出来，就把想到的主意逐个做成了demo。<br>以下是我废弃的辣鸡游戏，追悼。</p><ul><li>边躲避激光边搬运武器的游戏</li><li>移动箭头对战的游戏</li><li>数字俄罗斯方块（想法还可以就是没能做出来）</li><li>把战车和洗车混合的游戏<font color='gray'>(※日文中战车和洗车发音相同)</font></li><li>通过预知能力躲避攻击的游戏</li><li>在自动扶梯上逆行的游戏</li><li>让电梯恰好停住的游戏</li><li>很多隐藏砖块的坑人游戏</li><li>不容易被敌人干掉的游戏</li><li>血条和蓝条共用的游戏</li><li>改变角色大小的游戏</li><li>立体停车场（没想好要怎么玩）</li><li>屏幕画面之外非常乱的游戏</li><li>变成虫子诱导人（已经有了）</li></ul><p>像这样做了很多游戏，虽然大部分都不是很有趣。但是！！最后有两个游戏存活了下来。</p><ul><li>关卡会旋转的游戏</li><li>和透明的敌人战斗，然后重播后观看自己动作的游戏<br>它们会在后文提到。</li></ul>        <h2 id="编程的地狱-Part2"   >          <a href="#编程的地狱-Part2" class="heading-link"><i class="fas fa-link"></i></a><a href="#编程的地狱-Part2" class="headerlink" title="编程的地狱 Part2"></a>编程的地狱 Part2</h2>      <p>既然做不出创意，就用编程能力一决胜负吧！然而，从结果来看就是我的错觉。在技术上取胜是世界第一难事。</p><p>但总之，不能全部依赖引擎！要自己写出重力和画面！！！这么想着，我买了一本书——《在成为游戏工程师之前应该记住的技术》。</p><p>真的是地狱。</p><p>看了书之后我才发现自己至今的编程都只是图一乐。</p><p>必须在完全理解了指针，继承，二进制等等才能看得进去。</p><p>现在来看，那个时期学的知识都有很大的帮助，但我也不希望萌新看了这本书而被劝退。<br>不过对于学编程比较轻松的人来说，我还是非常推荐这本书。</p><p>顺便一提，我因为实在是搞不懂，至少敲了100次桌子，还在阳台大喊“谁tm搞这个”，也因为太过挫败深夜骑自行车去金阁寺，在推特上发过“我真是一无是处”，在麦当劳暴饮暴食吃胖了15kg。</p>        <h2 id="自制游戏的地狱"   >          <a href="#自制游戏的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#自制游戏的地狱" class="headerlink" title="自制游戏的地狱"></a>自制游戏的地狱</h2>      <p>好不容易看了书，事实后该不用引擎制作游戏了！这么想着，我完成了“关卡会旋转的游戏”。<br>别看只有“完成了”这么三个字，过程是真的累死累活。当遇到报错的时候，那个波浪线总是划在不是我写的代码的地方（标准库），让我完全不知道哪里出了错。</p><p>就好像是迷路的时候看一眼手机发现导航显示自己在大海上一样。</p><p>这样的事情一天至少要发生10次。</p><p>或许大佬不同，但我的话至少有70%左右的时间花在了寻找出错原因上面。</p><p>这段时间又因为真的搞不懂而经历了暴饮暴食，去银阁寺的路上迷路，无所事事地改改字体大小等等。</p><p>结果就完成了这么个游戏。</p><p><span align='center'><img src='https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201141716419.jpg' width=60%></span></p><p>图画是朋友帮忙画的，右下角的猫是玩家。</p><p>虽然我写的都是怎么怎么受挫，但一旦不用引擎完成了自制游戏，那成就感是非同一般的。<br>比如，从菜单到关卡选择的迁移方式都需要自己考虑，还自制了保存制成的关卡名的时候的文本框。</p><p>一边怀疑自己是不是走偏了，一边又用谁也想不到的方法制作，运行成功的时候，我是发自内心感到兴奋的。</p><p>我真是天才！！（然后30分钟后因为各种报错而崩溃)</p><p>可惜最后还是有判定奇怪等种种问题，没能达到发行的质量。</p>        <h2 id="虚幻引擎的天国"   >          <a href="#虚幻引擎的天国" class="heading-link"><i class="fas fa-link"></i></a><a href="#虚幻引擎的天国" class="headerlink" title="虚幻引擎的天国"></a>虚幻引擎的天国</h2>      <p>具体时间有些搞不清了，但我偶然看到这个视频，大受感动，开始使用虚幻引擎。</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Y5411s7Sa" >虚幻5技术演示(B站)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>就算现在再看也让我起鸡皮疙瘩，让我觉得“可以亲手创造这样美丽而充满激情的世界吗！”<br>然后我就回想起纯粹制作游戏的感觉，开始学习虚幻引擎。</p><p>虚幻引擎不需要任何编程就可以做游戏，利用一种叫蓝图的可视化脚本语言，让角色动起来，或是制作机关。顺便一提，我用它制作的游戏也一次都没有写代码。</p><p>然后我就想，和之前不同，既然用了引擎就一定要做出有趣的游戏，把技术力抛在脑后，一个劲打磨游戏的趣味性。</p><p>就在这时，我想到了“和透明的敌人战斗，然后重播后观看自己动作的游戏”，因为重播自己的动作很有趣，从而想到制作一款把自己的动作倒放，然后和倒放的自己合作的游戏。</p>        <h2 id="自制游戏的地狱-Part2"   >          <a href="#自制游戏的地狱-Part2" class="heading-link"><i class="fas fa-link"></i></a><a href="#自制游戏的地狱-Part2" class="headerlink" title="自制游戏的地狱 Part2"></a>自制游戏的地狱 Part2</h2>      <p>虽然写着地狱，但和先前的游戏制作比起来，这次的经历绝对是最让我快乐的。</p><p>一方面是自己对这个游戏的有趣程度有自信，一方面是由于引擎而让想法的实现变得简单了。<br>但也有一些比较心累的地方：</p><ol><li>看到推特上的大佬会无法避免地产生自卑感</li><li>存档和包装等为了游戏发行而不得不考虑的事情</li></ol><p>第一点想必对哪个领域都一样。真正厉害的人是真的厉害，不去看他们更好。写Qiita<font color='gray'>(日本一个工程师论坛)</font>的人也都是天才。他们的人生估计已经五周目了，一周目的我就满怀感激地接受教导吧。</p><p>第二点应该是大多数人受挫的原因。同样是做游戏，随意制作的人和完整地制作一部的人是完全不同的。就像做意大利面也有买酱回来做的人和从酱开始做的人。除了包装之外，我也考虑了美工和建模等等问题。</p><p>即便如此，这也是真的很快乐的事情。</p><p><strong>不用去学会所有的东西</strong></p><p><strong>只要查阅自己创作所需要的就行</strong></p><p><strong>制作自己认为有趣的东西</strong></p><p><strong>想象着自己的游戏大卖然后出名</strong></p><p>以上这些应该就是感到快乐的原因。关于游戏的设计，我也看了不少制作人的演讲，游戏分析博主的视频等等，还疯狂拜托别人去试玩。</p>        <h2 id="开始怀疑是否有趣的地狱"   >          <a href="#开始怀疑是否有趣的地狱" class="heading-link"><i class="fas fa-link"></i></a><a href="#开始怀疑是否有趣的地狱" class="headerlink" title="开始怀疑是否有趣的地狱"></a>开始怀疑是否有趣的地狱</h2>      <p>中途开始患上了担心这个游戏实际上没意思的病。不过后来知道这种情况在游戏开发者身上是常有的。<br>当时问了朋友们对试玩版的感想，大家可能是比较善良，都说很好玩。我就坚信他们的话坚持了下来。<br>顺便一提其中有一个朋友因为太过热衷而把大学考试全翘掉了，学科全挂。<br>爱死你了！经济学院！</p>        <h2 id="游戏被别人玩的天国"   >          <a href="#游戏被别人玩的天国" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏被别人玩的天国" class="headerlink" title="游戏被别人玩的天国"></a>游戏被别人玩的天国</h2>      <p>历经坎坷，游戏终于在steam上公开了试玩版，推特上的宣传也被转发了3742次！当时太过开心，给试玩的朋友门疯狂打电话。<br><font color='gray'>（※游戏名【Relash】steam上可以看到商店界面）</font></p>        <h2 id="想说的话"   >          <a href="#想说的话" class="heading-link"><i class="fas fa-link"></i></a><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h2>      <p>在刚刚接触游戏制作时，我觉得那些爆火的都是天选的人。但实际上到现在，我也依然边抱怨搞不懂边做着游戏。</p><p>我写这篇文章，就是想让那些今后想要制作游戏的人意识到，“原来大家都会受挫折”，“做出没有意思的作品也是理所当然的”。</p><p>我在开始制作游戏时，最想知道的，就是<strong>不知道也没关系</strong>。</p><p>就是因为不知道这点，我好几次都差点放弃制作游戏。</p><p>我还只是完成了一款游戏，但因为不想被别的开发者认为是在装逼，所以我会马上就说我并不厉害。</p><p>但这正是在过去让我痛苦的话语。</p><p>因为那些比我厉害的人，摆着一副这种程度理所应当的表情，所以才会觉得“是我不适合”。</p><p>正因如此我才要勇敢地说出来，我能制作一款完整的游戏，是一件很厉害的事情，但更多地，是一件非常吃力的事情，充满了未知的事情。</p><p>所以我才希望今后想要制作游戏的人意识到<strong>不知道也没关系</strong>，以“做出来就很厉害！”的心态去面对。<br>以上就是我制作一款游戏所经历的种种地狱。</p>        <h2 id="笔记"   >          <a href="#笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2>      <blockquote><p>肩書き(かたがき)：头衔，官衔<br>殆ど(ほとんど)：几乎<br>垢(あか)：污垢，油泥<br>遷移(せんい)：变迁，迁移<br>ダントツ：压倒性地出众，领先<br>語呂合わせ(ごろあわせ)： 双关，谐音<br>別格(べっかく)：特别处理，特殊待遇</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/dom_cob1/n/n8eaf211cba2b?magazine_key=mcaf9d5648d65&quot; &gt;大学生が自作ゲームを1本作るまでに経験した数々の地獄のお話&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;原作者：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/dom_cob1/&quot; &gt;Matsumoto&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

        &lt;h2 id=&quot;译者摘要&quot;   &gt;
          &lt;a href=&quot;#译者摘要&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#译者摘要&quot; class=&quot;headerlink&quot; title=&quot;译者摘要&quot;&gt;&lt;/a&gt;译者摘要&lt;/h2&gt;
      &lt;p&gt;这篇文章讲述了一位非科班的大学生从学习编程，到最后制作出一款完整的游戏所经历的种种磨难。从他的回忆中，我能感受到作者满溢的创作热情，其中的许多经验，以及最后的话语也给我莫大的鼓励和启发。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="翻译" scheme="https://lzmustb.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】古川本铺-聊聊作词的方法</title>
    <link href="https://lzmustb.github.io/2022/01/14/trans-hurukawa-lyric/"/>
    <id>https://lzmustb.github.io/2022/01/14/trans-hurukawa-lyric/</id>
    <published>2022-01-14T00:16:30.000Z</published>
    <updated>2022-01-14T02:39:40.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<br><span class="exturl"><a class="exturl__link"   href="https://sp.uta-net.com/today/news.php?id=12288" >https://sp.uta-net.com/today/news.php?id=12288</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>原作者：<br>古川本铺</p></blockquote>        <h2 id="译者摘要"   >          <a href="#译者摘要" class="heading-link"><i class="fas fa-link"></i></a><a href="#译者摘要" class="headerlink" title="译者摘要"></a>译者摘要</h2>      <p>古川本铺是我最喜欢的音乐创作者之一，在舒适的旋律之外，他的歌词也总是充满文艺，清新的色彩。本篇文章来自Uta-Net，日本的音乐资讯网站，讲述了古川本人创作歌词的过程。</p><span id="more"></span>        <h2 id="正文"   >          <a href="#正文" class="heading-link"><i class="fas fa-link"></i></a><a href="#正文" class="headerlink" title="正文"></a>正文</h2>      <p>&amp;emsp;&amp;emsp;新年好，我是古川。<br>&amp;emsp;&amp;emsp;从去年时隔六年复出，到现在也有一年了。创立个人事务所后打拼至今，还是手忙脚乱的状态。<br>&amp;emsp;&amp;emsp;去年11月末，我发行了复出后的第三首曲子<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1X44y1a7f9" >「Ordinaries feat.古川亮」</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。关于歌词，以往我都以让它在乐曲的世界里完结为理想，但大概从这首曲子开始，我逐渐会去思考“如何让歌词和日常生活有所关联”。这首歌在我的作品中也是非常独特新颖的一首，请一定听听看。<br>&amp;emsp;&amp;emsp;那么，今天既然是歌词随笔，我就聊一聊我平时作词时的方法和小技巧。<br>&amp;emsp;&amp;emsp;作词首先要从确保词曲对应的舒适开始。<br><font color='gray'>※这里原词是<strong>譜割り</strong>，是在歌曲创作中把歌词细分到音符的行为，没找到中文对应的术语，还请谅解</font><br>比如，无论如何都需要4个音符(字)的歌词，却强行填入三个字。</p><blockquote><p>⭕おにぎり(饭团，o ni gi ri)<br>❌うどおん(乌冬，原本是 u do n，此处填成：u do o n)</p></blockquote><p>&amp;emsp;&amp;emsp;你可能会吐槽什么鬼歌词，但只是举个例子。这个时候如果一定要用うどん(乌冬)这个词，就必须强行拉长元音以对应音符，但通常在作词过程中我会尽量避免这种情况出现。<br>&amp;emsp;&amp;emsp;话虽如此，也不是说从一开始就要考虑这个问题，实际创作过程也没有那么顺利。因此，我的作词过程有一定程度的模式化，并且总是先作曲，再作词。</p><ol><li>先作曲到能进行部分弹唱为止。</li><li>用既不是英文也不是日语的谜之语言弹唱录音。</li><li>挑选出弹唱过程中有意义的单词和句子。</li><li>从挑选出的词句衍生出文章，这个阶段先无视旋律。</li><li>修改文章，使其能够对应音符。</li><li>尝试用有特色的词句插入或替换。</li><li>加入感叹号、句号等，让歌词更像文章。</li><li>再弹唱，录音，如果没有违和感就OK。</li><li>第二天重新听一遍，然后弃用。</li></ol><p>&amp;emsp;&amp;emsp;理想是不达到⑨完成创作，但现实没有这么简单。<br>&amp;emsp;&amp;emsp;在上述工序中比较重要的是③。在用比较随便的词句反复哼唱旋律的过程中，总会有那么一两个词跟旋律非常搭配。我把它当成是<strong>歌曲在呼唤的文字</strong>，并从此衍生出整个歌词。所以我通常不会定下主题或对象开始创作。</p><hr>        <h3 id="1-先作曲到能进行部分弹唱为止。"   >          <a href="#1-先作曲到能进行部分弹唱为止。" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-先作曲到能进行部分弹唱为止。" class="headerlink" title="1. 先作曲到能进行部分弹唱为止。"></a>1. 先作曲到能进行部分弹唱为止。</h3>      <p>不用说也知道，创作歌词不是写诗，如果最后不成曲调就没有意义。所以首先要确定旋律，到能唱的状态。不过最终可能会优先歌词而改变旋律。</p>        <h3 id="2-用既不是英文也不是日语的谜之语言弹唱录音。"   >          <a href="#2-用既不是英文也不是日语的谜之语言弹唱录音。" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-用既不是英文也不是日语的谜之语言弹唱录音。" class="headerlink" title="2. 用既不是英文也不是日语的谜之语言弹唱录音。"></a>2. 用既不是英文也不是日语的谜之语言弹唱录音。</h3>      <p>&amp;emsp;&amp;emsp;这个阶段，我认为用什么语言其实无所谓，最优先的是作为歌词发音的舒适程度。<br>&amp;emsp;&amp;emsp;偶尔会有人说英语歌词比较逊，但我想告诉作词者的是，这种意见全部可以无视掉。只是，如果一段歌词能统一语言的话，节奏会更舒适。</p>        <h3 id="3-挑选出弹唱过程中有意义的单词和句子。"   >          <a href="#3-挑选出弹唱过程中有意义的单词和句子。" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-挑选出弹唱过程中有意义的单词和句子。" class="headerlink" title="3. 挑选出弹唱过程中有意义的单词和句子。"></a>3. 挑选出弹唱过程中有意义的单词和句子。</h3>      <p>&amp;emsp;&amp;emsp;如果没有做到这点就从1重新开始。实在找不出的话，就弃用。</p>        <h3 id="4-从挑选出的词句衍生出文章，这个阶段先无视旋律。"   >          <a href="#4-从挑选出的词句衍生出文章，这个阶段先无视旋律。" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-从挑选出的词句衍生出文章，这个阶段先无视旋律。" class="headerlink" title="4. 从挑选出的词句衍生出文章，这个阶段先无视旋律。"></a>4. 从挑选出的词句衍生出文章，这个阶段先无视旋律。</h3>      <p>&amp;emsp;&amp;emsp;如果在这个阶段考虑音符的对应，我就感觉会变成所谓“平庸的歌词”。这道工序应该是形成世界观的过程，但我并不是很喜欢“世界观”这个用法，所以也不会特别在意这方面的好坏。我比较关注的是曲子的气氛和文章的气氛是否一致。</p>        <h3 id="5-修改文章，使其能够对应音符。"   >          <a href="#5-修改文章，使其能够对应音符。" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-修改文章，使其能够对应音符。" class="headerlink" title="5. 修改文章，使其能够对应音符。"></a>5. 修改文章，使其能够对应音符。</h3>      <p>&amp;emsp;&amp;emsp;这个过程我做的比较机械，主要是检查字数是否吻合音符，有没有强行延长元音，等等。</p>        <h3 id="6-尝试用有特色的词句插入或替换。"   >          <a href="#6-尝试用有特色的词句插入或替换。" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-尝试用有特色的词句插入或替换。" class="headerlink" title="6. 尝试用有特色的词句插入或替换。"></a>6. 尝试用有特色的词句插入或替换。</h3>      <p>&amp;emsp;&amp;emsp;这是给歌词添加个性的重要环节，因此我在这个部分会花比较多的时间。比如在「Ordinaries」中，既有“溜息を燃やす”这样的表达，也会刻意加入“ブラリと歩いた”这样比较土的词句。如果让听众在读词的时候感到“哦？”，或者“哦！”就是我的胜利。</p>        <h3 id="7-加入感叹号、句号等，让歌词更像文章。"   >          <a href="#7-加入感叹号、句号等，让歌词更像文章。" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-加入感叹号、句号等，让歌词更像文章。" class="headerlink" title="7. 加入感叹号、句号等，让歌词更像文章。"></a>7. 加入感叹号、句号等，让歌词更像文章。</h3>      <p>&amp;emsp;&amp;emsp;这是我个人特色的部分，也是我每次作词必做的环节。加句号是为了确认歌词是否作为文章产生美感，加感叹号是为了表现出歌曲不足以表达完整的那部分情感。<br>&amp;emsp;&amp;emsp;可能也有人认为只用音乐表现就可以了，但在我心中，歌词有歌词，乐曲有乐曲的表现领域，而这两者不一定需要完全一致，也可以从不同的角度表达出深意。</p>        <h3 id="8-再弹唱，录音，如果没有违和感就OK。"   >          <a href="#8-再弹唱，录音，如果没有违和感就OK。" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-再弹唱，录音，如果没有违和感就OK。" class="headerlink" title="8. 再弹唱，录音，如果没有违和感就OK。"></a>8. 再弹唱，录音，如果没有违和感就OK。</h3>      <p>&amp;emsp;&amp;emsp;本来在这一步还会制作<strong>歌词卡</strong>，但因为只是个人兴趣所以不展开谈了。只是检查一下歌词作为文章排版之后是否够帅。至于有什么好坏标准，我自己也不是很清楚。</p>        <h3 id="9-第二天重新听一遍，然后弃用。"   >          <a href="#9-第二天重新听一遍，然后弃用。" class="heading-link"><i class="fas fa-link"></i></a><a href="#9-第二天重新听一遍，然后弃用。" class="headerlink" title="9. 第二天重新听一遍，然后弃用。"></a>9. 第二天重新听一遍，然后弃用。</h3>      <p>&amp;emsp;&amp;emsp;80%的作品都是这个结局。我会努力不走到这一步。</p><hr><p>&amp;emsp;&amp;emsp;古川的歌词就是通过上述的方法创作的。要点在于，不是先<strong>决定想要表现的内容</strong>，而是<strong>给想要表现的事物创造轮廓</strong>。<br>&amp;emsp;&amp;emsp;在此之后，我会一边思考它究竟适合表现什么事物，一边进行修正，添加。<br>&amp;emsp;&amp;emsp;这次，在11月发行的曲子「Ordinaries」表现的是“日常”。并不是像“平凡的日常也非常美丽”这样含蓄的话题，而是说<strong>“今天是普通的，普通的一天”</strong>，仅此而已的曲子。很难说它是美丽或者无趣，但看来至少不是糟糕的一天。我希望这首曲子能为这样的日子增添一抹光亮。</p>        <h2 id="笔记"   >          <a href="#笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2>      <blockquote><p>段取り：计划，方法<br>手合い(てあい)：小子，家伙&#x2F;对局&#x2F;种类<br>お蔵(おくら)：电影戏剧等停止公映，或事物不再使用<br>省く(はぶく)：省略，减去</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://sp.uta-net.com/today/news.php?id=12288&quot; &gt;https://sp.uta-net.com/today/news.php?id=12288&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;原作者：&lt;br&gt;古川本铺&lt;/p&gt;
&lt;/blockquote&gt;

        &lt;h2 id=&quot;译者摘要&quot;   &gt;
          &lt;a href=&quot;#译者摘要&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#译者摘要&quot; class=&quot;headerlink&quot; title=&quot;译者摘要&quot;&gt;&lt;/a&gt;译者摘要&lt;/h2&gt;
      &lt;p&gt;古川本铺是我最喜欢的音乐创作者之一，在舒适的旋律之外，他的歌词也总是充满文艺，清新的色彩。本篇文章来自Uta-Net，日本的音乐资讯网站，讲述了古川本人创作歌词的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="翻译" scheme="https://lzmustb.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="音乐" scheme="https://lzmustb.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="古川本铺" scheme="https://lzmustb.github.io/tags/%E5%8F%A4%E5%B7%9D%E6%9C%AC%E9%93%BA/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】拓宽版面设计的视角</title>
    <link href="https://lzmustb.github.io/2022/01/13/trans-LayoutDesign/"/>
    <id>https://lzmustb.github.io/2022/01/13/trans-LayoutDesign/</id>
    <published>2022-01-13T07:23:04.000Z</published>
    <updated>2022-09-25T09:20:09.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<br><span class="exturl"><a class="exturl__link"   href="https://note.com/harahiroshi/n/n3af079dc17e9" >レイアウトデザインの視点を増やす 思考＆Tips</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>原作者：<br><span class="exturl"><a class="exturl__link"   href="https://note.com/harahiroshi/" >ハラヒロシ</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="译者摘要"   >          <a href="#译者摘要" class="heading-link"><i class="fas fa-link"></i></a><a href="#译者摘要" class="headerlink" title="译者摘要"></a>译者摘要</h2>      <p>本文面向入门设计者，用了图例和很多比喻，生动形象地介绍了布局排版，留白处理的技巧。<br>在上一篇文章中，我把“情報”照搬成情报，而后认为翻译成信息更合适，因此在这篇文章中全部采用了后者。</p><span id="more"></span>        <h2 id="形似水流"   >          <a href="#形似水流" class="heading-link"><i class="fas fa-link"></i></a><a href="#形似水流" class="headerlink" title="形似水流"></a>形似水流</h2>      <p>&amp;emsp;&amp;emsp;在布局的时候，通常先决定信息的优先级，再用板块面积区分主次。光到这一步，还只是单纯地堆在一起，而没有流动感。为了让视线能平滑地浏览内容，在创造留白的时候可以想象河流的感觉。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131539348.jpg" alt="picture_pc_519942b46e253091dc646bfcf05c209d"></p><details><summary>原文</summary><b>川の流れのように</b><p>レイアウトするにあたっては、情報の優先順位を決めてそれをボリュームで割り当てるのが基本です。ただし、これだけだと単に積み重ねているだけで流れが悪いので、視線が滑らかに移動するように“川の流れ”を意識して余白を作っていきます。流れが明確であれば、左右入れ替えてもOKです。</details>        <h2 id="画面要有纵深感"   >          <a href="#画面要有纵深感" class="heading-link"><i class="fas fa-link"></i></a><a href="#画面要有纵深感" class="headerlink" title="画面要有纵深感"></a>画面要有纵深感</h2>      <p>&amp;emsp;&amp;emsp;网页虽然只是一个平面，但也和实景一样，人们通常会先识别最吸引眼球的地方，再按顺序获取信息。作为设计者，必须有意识地利用这点去调整画面的纵深。<br>&amp;emsp;&amp;emsp;在下面的例子中，文字标题和橙色的方块是最抢眼的，然后再是绿色区域，蓝色区域。所以并不是说全都从上往下排列就ok了。<br>&amp;emsp;&amp;emsp;刚上手的时候，思路可能容易局限于单纯地将元素上下堆积。内容之间的关联，视线的动向，下一步的响应都考虑到的同时，从纵深，左右，时间等多重角度审视设计，就可以拓宽思路。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131603983.jpg" alt="picture_pc_d2eb1880b7c33ee76cd1ffeb82a2e56a"></p><details><summary>原文</summary><b>画面には「奥行き」がある</b><p>webは画面という「平面」に対してだいたい同じ距離感で見るものですが、実は景色と同じで、誘目性の高いものから認識し、順を追って情報を得ていきます。つまりそこには「奥行き」があります。<br>作り手としてはそれを意識し、利用しながら、画面から離れたり近づいたりしながらデザインを調整していくことが大事です。<p>以下の例では、文字とともにその下のオレンジ色が誘目性が高く、次に緑、青と順を追って認識していきます。決して「上から順に」配置していけばいいというわけではありませんね。<p>最初のうちは上下にブロックを積みあげていくだけの思考に留まってしまう場合が多いです。コンテンツの関係性や視線の流れ、次へのアクションなどをしっかりおさえつつ、奥行き、左右、時間…という複数の重なりの視点を持つとそこから抜け出せると思います。</details>        <h2 id="“通风透气”"   >          <a href="#“通风透气”" class="heading-link"><i class="fas fa-link"></i></a><a href="#“通风透气”" class="headerlink" title="“通风透气”"></a>“通风透气”</h2>      <p>&amp;emsp;&amp;emsp;留白可以诱导视线，让用户注意力转向设计者期望的内容。在布局的时候，不是将元素填入空间，而是通过制作留白让画面“通风透气”。要点在于，制造一条通道，让气流能刚好触碰到重要的信息。<br>以下的例子中，如果用户的视线跟着留白走，就能自然地注意到文字内容。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131611974.jpg" alt="picture_pc_0adf0b12355d3a0c60b166110560dc00"><br>&amp;emsp;&amp;emsp;要想验证是否做到有效的视线诱导，可以试着在自己的设计上画箭头，如果画箭头的时候感到犹豫，就可以说没有起到很好的诱导效果。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131613870.jpg" alt="picture_pc_df8185ba06f7e71cc1de7c63a66954f5"></p><details><summary>原文</summary><b>空気の流れを良くする</b><p>「余白」は視線誘導し、意図した情報に注目させることに利用できます。レイアウトするとき、要素をスペースに埋めようとするのではなく、余白を作って「風通しよく」してあげます。ポイントは、逃げ道をつくり、重要な情報を空気の流れに触れさせてあげること。余白がなく、息が詰まるな、と思ったら空気の流れがしっかり通っているかチェックするとよいでしょう。<p>以下は、余白を追っていくとコピーが自然と視界に入ってくるレイアウト例です。<p>なお、ちゃんと視線誘導できているかは、自分のデザインに矢印を描きこんでみるとよいです。矢印に迷いがあれば、誘導が上手くいっていないといえます。</details>        <h2 id="从树干衍生出枝叶"   >          <a href="#从树干衍生出枝叶" class="heading-link"><i class="fas fa-link"></i></a><a href="#从树干衍生出枝叶" class="headerlink" title="从树干衍生出枝叶"></a>从树干衍生出枝叶</h2>      <p>&amp;emsp;&amp;emsp;就拿刚才的素材，这次将关注点从留白转向构图。在布局的时候，要决定一条轴线。扎实的轴线可以增强可读性，也可以在引入变化时不让整体垮掉<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131655643.jpg" alt="picture_pc_9a28de0112cc45b698575e7f97b26591"><br>&amp;emsp;&amp;emsp;要点在于把轴线当成树干，像衍生出旁支一样布局。（轴线可以不在画面中心)在枝叶上可以自由变换。</p><details><summary>原文</summary><b>「木の幹」を意識して枝を作っていく</b><p>では同じ素材で、今度は「余白」ではなく「図」に目を向けてみましょう。レイアウトするとき「軸」を決めます。軸がしっかりしていると読みやすいし、崩しを入れても破綻しにくいのです。<p>ポイントは「木の幹」を意識して枝を作っていくことです（軸は真ん中でなくてもよいです）。枝で変化つけると自由さが広がります。</details>        <h2 id="重心意识"   >          <a href="#重心意识" class="heading-link"><i class="fas fa-link"></i></a><a href="#重心意识" class="headerlink" title="重心意识"></a>重心意识</h2>      <p>&amp;emsp;&amp;emsp;进行有动向的布局时，需要有重心意识。以对角线作为辅助线就一目了然。通过调整元素的大小和位置，让重心不偏向画面的一边，就可以平衡地布局。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131702816.jpg" alt="picture_pc_e7811a7a4d67d790ecc87bd05be51a17"></p><details><summary>原文</summary><b>重心を意識する</b><p>上下・左右に要素を散らすなど、動きのあるレイアウトを行うときは「重心」を意識することが重要です。その際、対角線などの補助線を描くとわかりやすいです。重心がどちらかに傾かないようにオブジェクトのサイズと位置を調整するとバランスよく配置できます。</details>        <h2 id="布局要整齐划一"   >          <a href="#布局要整齐划一" class="heading-link"><i class="fas fa-link"></i></a><a href="#布局要整齐划一" class="headerlink" title="布局要整齐划一"></a>布局要整齐划一</h2>      <p>&amp;emsp;&amp;emsp;<strong>对齐</strong>是设计的四大原则之一，但通常在设计中会要引入<strong>变化</strong>和<strong>强调</strong>，以吸引用户的注意力。但这个变化必须建立在保持协调之上，设计者应该牢记先整齐布局后再加入变化。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131731290.jpg" alt="picture_pc_0a13a8c3767ee3bf1db201fc5603def5"></p><details><summary>原文</summary><b>レイアウトは整理整頓</b><p>デザイン四原則には「整列」がありますが、それだけだと注意を引きつけられない場合があるので「変化」「強調」という引っかかりをつける必要があります。ただし、その変化は、あくまでも調和を守ったうえでのことです。調和の中でしか変化は成り立ちません。まずはしっかりと整理整頓したうえで、変化をつけるように心がけたいものです。</details>        <h2 id="检验分组好坏的技巧"   >          <a href="#检验分组好坏的技巧" class="heading-link"><i class="fas fa-link"></i></a><a href="#检验分组好坏的技巧" class="headerlink" title="检验分组好坏的技巧"></a>检验分组好坏的技巧</h2>      <p>&amp;emsp;&amp;emsp;当担心分组恰当与否时，可以采取模糊全图，看看期望的分组是否形成一个整体。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131745255.png" alt="picture_pc_0eda9846d1b9f6bf79685cbe5c0a625d"></p><details><summary>原文</summary><b>グルーピングを確認するためのTips</b><p>整列に関連して。グルーピングがうまくいっているか迷ったときは、全体をぼかしてみて、意図したグループが塊として見えるかどうかを試してみるとよいです。</details>        <h2 id="从正反两面观察"   >          <a href="#从正反两面观察" class="heading-link"><i class="fas fa-link"></i></a><a href="#从正反两面观察" class="headerlink" title="从正反两面观察"></a>从正反两面观察</h2>      <p>&amp;emsp;&amp;emsp;对于难以制造留白的场合，试着调换留白和信息所占的区域。通过这个方法，可以更清楚地捕捉留白的形状，从而判断留白究竟是杂乱的还是协调的。要点在于能否同时从正反两种视角去调整。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131813323.jpg" alt="picture_pc_ea7c171d1905b0e31e46373735059369"></p><details><summary>原文</summary><b>ポジとネガで見てみる</b><p>余白つくるのが苦手な場合は、ポジとネガの視点切り替えを意識するとよいです。ネガ（余白）の形をしっかり捉えてみると、ネガとの対比でポジ（図）が見えていることや、余白がバラバラになっていることなどに気づけます。ポジとネガ、両方見てコントロールできるかがポイントです。</details>        <h2 id="地平线的位置"   >          <a href="#地平线的位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#地平线的位置" class="headerlink" title="地平线的位置"></a>地平线的位置</h2>      <p>&amp;emsp;&amp;emsp;有时在叠加背景和图像时会拉一条地平线，而地平线的位置也会改变整体的印象。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131818593.png" alt="picture_pc_d9b0d3264d28589dabe43c913a7186d4"><br>左：图像与背景重叠部分较多，体现安定感，一体感。<br>中：地平线在图像下方，使图像突出，更有动感。<br>右：让背景渐变，加强纵深感。</p><details><summary>原文</summary><b>地平線をどこに引くか</b><p>図と背景を重ねるときの「地平線」を引くことがあると思いますが、その地平線の位置で随分印象は変わります。安定させるか、動きを感じさせたいか、なじませたいか、など。相手の視点を決める重要なポイントです。<p>上のほう：図と背景の重なりが多い分、安定感、一体感があります<br>下のほう：逆に関わりが薄くなる分、不安定となり動きを感じます<br>グラデーションを引くと馴染んで、奥行きを感じさせるレイアウトになります。</details>        <h2 id="点，线，面"   >          <a href="#点，线，面" class="heading-link"><i class="fas fa-link"></i></a><a href="#点，线，面" class="headerlink" title="点，线，面"></a>点，线，面</h2>      <p>&amp;emsp;&amp;emsp;在需要体现出叙事性，或强弱区分的时候，可以将分散的点排布到轨迹上，构造动作或流向。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201132002194.png" alt="picture_pc_dccfb3714b3f0665908d90c378196831"></p><details><summary>原文</summary><b>点、線、面に展開していく</b><p>ストーリー性を出したい場合や強弱を意識する際に、バラバラの点を軌跡に並べて動きや流れを作り、ひとつひとつの大小つけて大きなものは面にし、変化や奥行きを出します。webの場合、手前と奥、上下、左右の流れをうまく活用したいですね。</details>        <h2 id="俯瞰全体"   >          <a href="#俯瞰全体" class="heading-link"><i class="fas fa-link"></i></a><a href="#俯瞰全体" class="headerlink" title="俯瞰全体"></a>俯瞰全体</h2>      <p>&amp;emsp;&amp;emsp;网页通常在纵向较长，但同一时刻只有一部分会展示在显示屏上。为了保障用户在滚动网页的过程中的观感，需要俯瞰网页整体的设计。<br>&amp;emsp;&amp;emsp;这是我自己过去做的案例，有意识地连成一体的设计比较多。交互，交叉，重叠，突出，反复，等等，要考虑怎样让网页能够有序，有节奏地连续呈现。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201132009352.jpg" alt="picture_pc_75e7292ef3e7335a5a7dee406a5e1d9b"></p><details><summary>原文</summary><b>俯瞰してみて、リズムがあるかどうかを確認する</b><p>Webサイトは縦に長くても、視界に入るのは画面の面積のごく一部。しかし、スクロールしていく中で心地よく見せられるかどうか、それには俯瞰の視点も必要です。デザイン全体をみたときに美しくレイアウトされているかはチェックしたほうがいいでしょう。<p>自身の過去案件の事例ですが、「ひとつながり」を意識することが多いです。交互、交差、重なり、押し出し、繰り返し…など。ページ全体を見たときに、どうやってリズムよく、秩序を保ちながら連続的に見せるかを考えます。</details>        <h2 id="结语"   >          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>      <p>&amp;emsp;&amp;emsp;通过效仿设计原则，就可以做出表面上优美的设计，但是如果没有属于自己的美的标准，就很难对其认定。像上文提到的一样，拓宽视角去审视设计，我认为也对启发自身美的标准有所帮助。<br>&amp;emsp;&amp;emsp;多设计，多欣赏，在积累经验的途中就会逐渐对美的基准有手感。如果能在绘制一个单纯的矩形时感受到美，那就最好不过了。</p><details><summary>原文</summary><b>さいごに</b><p>「デザインの原則」で語られる「美しさ」は真似すれば表面上は会得できるますが、やはり自分の中に「美しさ」の基準がないとなかなか定着しないと思います。その基準は、この記事でまとめたような「見方」にヒントがあるでしょう。<p>たくさんデザインして、いいものを見て、経験を積むことで「これが基準」の手応えを感じられるようになるはずです。ただ一つの矩形を描く手の感覚の中に「美しい」を感じられたら最高だな、と思うのです。</details>        <h2 id="笔记"   >          <a href="#笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2>      <blockquote><ul><li>奥行き(おくゆき)：纵深，进深</li><li>木の幹(きのみき)：树木的茎</li><li>破綻(はたん)：失败，破裂，破产</li><li>際立つ(きわだつ)：显著，突出</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/harahiroshi/n/n3af079dc17e9&quot; &gt;レイアウトデザインの視点を増やす 思考＆Tips&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;原作者：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/harahiroshi/&quot; &gt;ハラヒロシ&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

        &lt;h2 id=&quot;译者摘要&quot;   &gt;
          &lt;a href=&quot;#译者摘要&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#译者摘要&quot; class=&quot;headerlink&quot; title=&quot;译者摘要&quot;&gt;&lt;/a&gt;译者摘要&lt;/h2&gt;
      &lt;p&gt;本文面向入门设计者，用了图例和很多比喻，生动形象地介绍了布局排版，留白处理的技巧。&lt;br&gt;在上一篇文章中，我把“情報”照搬成情报，而后认为翻译成信息更合适，因此在这篇文章中全部采用了后者。&lt;/p&gt;</summary>
    
    
    
    <category term="翻译" scheme="https://lzmustb.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】设计留白</title>
    <link href="https://lzmustb.github.io/2022/01/12/trans-WhiteSpaceDesign/"/>
    <id>https://lzmustb.github.io/2022/01/12/trans-WhiteSpaceDesign/</id>
    <published>2022-01-12T14:03:42.000Z</published>
    <updated>2023-09-25T13:15:24.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<br><span class="exturl"><a class="exturl__link"   href="https://note.com/toffy_bon/n/na73bb66846a2#OJ1BV" >https://note.com/toffy_bon/n/na73bb66846a2#OJ1BV</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://note.com/toffy_bon/n/n38475f161c31" >https://note.com/toffy_bon/n/n38475f161c31</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>原作者：<br><span class="exturl"><a class="exturl__link"   href="https://note.com/toffy_bon/" >assassin@Web屋</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="译者摘要"   >          <a href="#译者摘要" class="heading-link"><i class="fas fa-link"></i></a><a href="#译者摘要" class="headerlink" title="译者摘要"></a>译者摘要</h2>      <p>本文面向入门设计者，简明扼要地介绍了留白的概念，作用，和部分应用场景。</p><span id="more"></span>        <h2 id="何为留白"   >          <a href="#何为留白" class="heading-link"><i class="fas fa-link"></i></a><a href="#何为留白" class="headerlink" title="何为留白"></a>何为留白</h2>      <p>“留白”顾名思义就是空白的空间，英文又称WhiteSpace或NegativeSpace。乍一看可能会觉得它起不到任何作用，但留白绝不等同于多余的空间。留白是在设计中非常重要的元素，通过让其起到应有的作用，可以提高设计档次，改善用户体验。</p><details><summary>原文</summary><b>「余白」とはなにか。</b><p>「余白」とは文字通り「空白のスペース」のことで、ホワイト・スペースやネガティブ・スペースとも呼ばれたりします。一見すると、何の役割も成さないものと捉えがちですが、「余白」＝「余分な空間」では決してありません。「余白」はデザインにおいて重要な要素であり、しっかり意味や役割を持たせてあげることで、デザインをグッと良くしてくれたり、UXの向上に一役買ってくれたりします。</details>        <h2 id="设计师的一项重要任务"   >          <a href="#设计师的一项重要任务" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计师的一项重要任务" class="headerlink" title="设计师的一项重要任务"></a>设计师的一项重要任务</h2>      <p>“不让用户感到压力的设计” 是设计师的任务之一，而用户主要的压力因素如下：</p><ul><li>难以阅读</li><li>难以理解</li><li>看着会感到疲劳，烦乱</li><li>难以找到想要的情报</li><li>难以使用<br>……etc.<br>除此之外，根据实际情况会有各种各样的因素，但通过适当地引入留白，可以有效缓和，甚至消解上述压力。</li></ul><details><summary>原文</summary><b>デザイナーにとっての重要なミッション</b><p>この大きなテーマの一つとして、「ユーザーにストレスを感じさせないデザインをすること」が挙げられると思います。<p>考えられるユーザーの主なストレス要因は以下の通りです。<br>・読みづらい<br>・分かりづらい<br>・見ていると疲れる（ざわざわする）<br>・目的の情報がなかなか見つからない<br>・使いづらい<br>…などなど。<p>他にもシチュエーションによって様々な要因があると思いますが、余白を上手くデザインに取り入れることで、これらのストレス要因を解消してくれたり、緩和する力を持っています。</details>        <h2 id="留白的效果和职责"   >          <a href="#留白的效果和职责" class="heading-link"><i class="fas fa-link"></i></a><a href="#留白的效果和职责" class="headerlink" title="留白的效果和职责"></a>留白的效果和职责</h2>      <p>留白的主要效果和职责大致分为五项。</p><ul><li>缓和情报间的干涉</li><li>对情报进行分组</li><li>层次体现</li><li>诱导视线</li><li>给用户留下特定的印象</li></ul><details><summary>原文</summary><b>「余白」の効果と役割</b><p>先ず肝心なのは、余白の効果と役割について理解しておくことです。<p>余白の主な効果と役割は、大きく分けて5つあります。<br>・情報の干渉緩和<br>・情報の区分け（グルーピング）<br>・階層表現<br>・視線誘導<br>・印象操作</details>        <h3 id="1-缓和情报间的干涉"   >          <a href="#1-缓和情报间的干涉" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-缓和情报间的干涉" class="headerlink" title="1.缓和情报间的干涉"></a>1.缓和情报间的干涉</h3>      <p>可以加强文字情报的可读性，或刻意孤立重要情报，起到强调作用。<img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130801361.png" alt="picture_pc_8c188bf741c0f521a474f4a26635e9fc"><br>图中举了两个例子。  </p><p>图右通过在区块内添加适度的留白，消除了<strong>拥挤感</strong>，给人清爽的印象。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130808625.png" alt="picture_pc_4d8f6abb7f3bb979c737d4cf462f167a"><br>除此之外，行间距也是留白的一种，尤其在文字情报中需要注意。</p><p>通常行间距是字体大小的1.5~1.6倍，但近年来也有网站采用2倍左右的宽松行距。虽然相同范围内的情报量减少了，但行距的宽松也给整体设计带来了宽裕舒适感。</p><details><summary>原文</summary><b>１．情報の干渉緩和</b><p>コンテンツ内の文字情報を読みやすく（可読性向上）したり、または重要な情報をあえて孤立させて強調させたりすることが出来ます。<p>上に例を２つ挙げました。<br>どちらが「見やすい」と感じるでしょうか。<br>右下はブロック内に適度な余白が設けられていることで、「窮<br>屈さ」が無くなり、スッキリした印象になっていると思います。<p>また、「行間」も「余白」の一つです。<br>文字情報は特に注意が必要で、一般的な行間はフォントサイズの1.5～1.6倍程度と言われていますが、近年では、2倍程度までゆったり行間を取っているサイトも多く見かけます。同範囲内の情報量は減ってしまいますが、行間にゆとりを持たせると、デザインにも「ゆとり」が生まれるのです。</details>        <h3 id="对情报进行分组"   >          <a href="#对情报进行分组" class="heading-link"><i class="fas fa-link"></i></a><a href="#对情报进行分组" class="headerlink" title="对情报进行分组"></a>对情报进行分组</h3>      <p>通过适度的间隔，可以明确情报间的从属关系。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130823526.png" alt="picture_pc_065874a10a1b4d75dc032103685d99e2"></p><p>乍一看左右两图都有整齐的感觉，但实际在读取情报的时候，图左的标题和文章内容的位置区分显得有些模糊。相比之下，图右中标题与文章内容就一目了然。</p><details><summary>原文</summary><b>２．情報の区分け（グルーピング）</b><p>間隔を適度に取ることで、情報がどこに属するのか明確にしてくれます。<p>上の例を見比べてみてください。<p>一見すると、どちらも整っているように感じるかも知れませんが、情報を読み取ろうとしたとき、左上はタイトルと文章の位置付けが曖昧だと感じないでしょうか。対して右下は、どれがタイトルでどれがタイトルに属する文章なのかが、すぐに把握できるのではないかと思います。</details>        <h3 id="层次体现"   >          <a href="#层次体现" class="heading-link"><i class="fas fa-link"></i></a><a href="#层次体现" class="headerlink" title="层次体现"></a>层次体现</h3>      <p>当情报之间有嵌套关系，通过使用缩进可以清楚地表现层次。<br><span align='center'><img src='https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130831718.png'></span></p><p>需要注意的是，使用缩进的时候不能半半拉拉。至少要缩进一个字距左右，让人一眼就能看出的程度，否则用户在阅读的时候反而会产生没有对齐的不适感。</p><details><summary>原文</summary><b>３．階層表現</b><p>情報が入れ子になっているものは、インデントを使うことで階層を分かりやすく表現してくれます。<p>良く見かける例がこれですね。<p>この階層表現を使うことで、情報整理にもなります。<br>ただ、インデントで余白を取る時は、中途半端は禁物です。最低一文字分くらい、パッと見で分かる程度の余白を持たせておかないと、ユーザーが見たとき、逆に「ズレている？」と見られ兼ねませんので、ご注意を。</details>        <h3 id="诱导视线"   >          <a href="#诱导视线" class="heading-link"><i class="fas fa-link"></i></a><a href="#诱导视线" class="headerlink" title="诱导视线"></a>诱导视线</h3>      <p>通过在纵向采取更多的留白，可以起到诱导视线的作用。<br><span align='center'><img src='https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130840369.png'></span></p><p>大多数人在看到上图时，视线应该是从左向右，Z型移动。</p><p>如果图片间的留白没有规律，用户的视线就会犹疑。在某些随机展览的网站中可能不限于此，但如果希望用户按照顺序阅读，这个手法就显得尤为重要。</p><details><summary>原文</summary><b>４．視線誘導</b><p>「前へ」「次へ」「下へ」「上へ」や、横より縦の余白を多く取ることも視線誘導の一つです。<p>上のような画面を見たとき、視線はどのように動くでしょうか。<br>恐らく多くは左から右へ、Z型に移動していくものと思います。この余白の取り方がバラバラだと、視線は迷い、自由に画面を見ようとします。ランダムなギャラリーサイトのような例においてはこの限りではありませんが、一般的にはユーザーに順序正しく見せたいのであれば、この手法は鉄則と言えると思います。</details>        <h3 id="给用户留下特定的印象"   >          <a href="#给用户留下特定的印象" class="heading-link"><i class="fas fa-link"></i></a><a href="#给用户留下特定的印象" class="headerlink" title="给用户留下特定的印象"></a>给用户留下特定的印象</h3>      <p>使用留白，可以制造高级感，宁静感，实惠感，繁华感等印象。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130853272.png" alt="picture_pc_4a8c8e615e7acd8dc1aa5d57d4a0b4f8"></p><p>为画像准备的空间也是留白的一种。</p><p>使用较多留白，可以体现高级感，宁静感，清爽感。而采取较少的留白可以体现紧迫感或实惠感。<br>因此，有关酒店或奢华商品，会多采取留白，而促销广告，或网络商场等需要成列大量商品时，会使用较窄的留白。</p><details><summary>原文</summary><b>５．印象操作</b><p>余白を上手に扱うことで、「高級感」「静けさ」「お得感」「賑やかさ」などの印象を持たせてくれます。<p>上に挙げたサイトは一例です。<br>ちなみに、画像に設ける空間も「余白」です。<br>余白を多く取っているものは、「高級感」や「清潔感」「静けさ」などが演出できます。逆に取らずにレイアウトすると「緊迫感」や「お得感」「賑やかさ」などが演出できます。なので、ホテルやラグジュアリーな商材を取り扱う場合は余白を多く取り、特売の広告媒体やインターネットモールなど多くの商品を取り扱う場合は、余白を狭くレイアウトすることで有効な訴求ができるかも知れません。</details>        <h2 id="应用留白"   >          <a href="#应用留白" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用留白" class="headerlink" title="应用留白"></a>应用留白</h2>      <p>在设计之前，<strong>充分理解内容</strong>显得尤为重要。面向的用户群体，产品的种类，情报说明的对象等等，都应把握到位。  </p><details><summary>原文</summary><b>余白を上手に扱うコツ</b><p>まずはじめにデザインを行う前提として、「コンテンツを十分に理解すること」がとても重要になります。どんなユーザーに向けた、どんなクリエイティブ（制作物）なのか、この情報はどれに対する説明なのか…など、内容をしっかり把握しておきましょう。<p>「土台」が理解できていなければ、良いものは生まれません。</details>        <h3 id="1-了解适合的留白量"   >          <a href="#1-了解适合的留白量" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-了解适合的留白量" class="headerlink" title="1.了解适合的留白量"></a>1.了解适合的留白量</h3>      <p>如同前面提到的一样，留白有着制造印象的作用。虽然具体情况要具体分析，但基本可以按照以下思路进行<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130926768.png" alt="picture_pc_eaaab23be1d54ebaf1a80a1112b8b275"><br><font color='gray'>从左到右分别是：电商·情报网站；博客，画廊；企业网站；品牌网站</font></p><p>需要注意的是情报量。情报量和留白量基本呈反比例，例如电子商务平台（淘宝，京东等）需要一次性展示大量商品，如果采取大量留白，会导致商品界面的页数大涨，用户也难以找到心怡的产品，影响销售额。</p><p>而品牌网站需要将少量商品的魅力完整地展现出来，如果采用较少留白，虽然能一次性展示更多的情报，但难以给用户留下深刻的印象。</p><details><summary>原文</summary><b>ポイント１：適切な余白量の目安を知る</b><p>余白にクリエイティブの印象を左右する効果があるのは、前半でもお話した通りです。そのものの背景によって断言できない部分もありますが、基本的には以下のような考え方で分類できます。<p>チェックすべきポイントは「情報量」です。<br>情報量と余白の割合は反比例しており、情報が多いほど余白は小さく、情報が少ないほど余白を大きく取るのが効果的と言われています。<p>たとえばウェブサイトを例に挙げるとすると、膨大な商品数を扱うECサイトと、高級ブランドの公式サイトを見比べるとどうでしょうか？<p>全く余白の取り方が違っていると思います。<p>想像してみてください。<p>もし、これが真逆の状態になったら、どのようになるでしょう。<p>ECサイトの場合は、余白が大きくなることで一度に閲覧できる商品数が減ってしまい、そのぶんサイト全体のページ数も更に膨れ上がり、ユーザーが目的の商品を見付けにくくなったりと、売上げにも影響を及ぼしかねません。<p>ブランディングサイトなどの場合は、余白が小さくなることで一度に閲覧できる情報量は増えますが、本来伝えたいイメージがユーザー側に伝わりにくくなったり、商品の魅力が損なわれることすらあるのです。</details>        <h3 id="2-对各部分的留白设定规则"   >          <a href="#2-对各部分的留白设定规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-对各部分的留白设定规则" class="headerlink" title="2.对各部分的留白设定规则"></a>2.对各部分的留白设定规则</h3>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130945808.png" alt="picture_pc_34a3312d606bb370ce271a0718043980"></p><p>上图中，将相同规则的留白用相同颜色做了标记。  </p><p>像这样，对同属性的元素制定统一的规则，不光美观，还能让用户产生安心感。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130951631.png" alt="picture_pc_d6184179795c17511a43c77501254abb"></p><p>反过来，就算只相差几个像素，或者只有一处的留白不同，也会很明显地让用户感到混乱，违和。<br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201130951323.png" alt="picture_pc_4742ef42919cc939f6c8d1cb5b91f437"></p><p>通过调整其中的规则，也可以像前面提到的一样发挥视线诱导的效果，使内容之间产生阅读顺序。</p><details><summary>原文</summary><b>ポイント２：セグメント内の余白にルールを設ける</b><p>上の図は、同じルールで配置された余白を色分けしたものです。（テキストが英文のため、左右の余白が違って見えてしまっていますが…；）<p>分かりやすく少し大袈裟な例を挙げてみましたが、たとえこれが数pxの違いだったり、1箇所だけ余白の取り方が違っているだけでも、ユーザーを混乱させてしまったり、意外に違和感を覚えるものです。見た目にもまとまりがないだけでなく、見ている側のストレス要因にもなります。<br>このルールを調整すると、前半でもお話した通り、視線誘導の効果が発揮され、コンテンツの見方に順序が生まれるわけです。<p>数px単位でも印象は微妙に変わって来ますので、デザインを俯瞰で眺めてみると気付くことが多いと思います。</details>        <h3 id="3-片段中的留白要有层次"   >          <a href="#3-片段中的留白要有层次" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-片段中的留白要有层次" class="headerlink" title="3.片段中的留白要有层次"></a>3.片段中的留白要有层次</h3>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131001801.png" alt="picture_pc_34a3312d606bb370ce271a0718043980"></p><p>通过使内侧的留白比外侧的留白小，整体布局会显得更加清楚。就像俄罗斯套娃一样，把一个内容块想象成一个盒子。如果里盒的留白和外盒一样，或更多，就会丧失平衡感。</p><details><summary>原文</summary><b>ポイント３：セグメント内の余白は入れ子にする</b><p>基本的に、内側は外側の余白より小さくすることで、全体的にまとまりが出てスッキリしたレイアウトになります。マトリョーシカのような要領で、各コンテンツブロックを１つの箱として考えてみましょう。<br>内ブロックの余白が外ブロックと同じ、または外ブロックより大きかったりすると、アンバランスで、見ている側は何だか落ち着かない（ざわざわした）気持ちになるものです。</details>        <h3 id="思考内容和留白之间的关系"   >          <a href="#思考内容和留白之间的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#思考内容和留白之间的关系" class="headerlink" title="思考内容和留白之间的关系"></a>思考内容和留白之间的关系</h3>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131007174.png" alt="picture_pc_cd1383153dd33cf247bbcd55fbd04da4"></p><p>左右两边的内容完全相同，但第一眼看过去，通常图左会把“Sweets”看作图片的标题，而图右会把它看作文章的标题。</p><p>元素之间距离越近，越能体现从属关系。因此如果希望“Sweets”和图片分为一组，就让它们之间的间距减小，而与下方文章的间距增大就行，反之亦然。在上图中，无论采取哪种都可，但根据具体内容，有些情况下其中一种会是更优解。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201131021666.png" alt="picture_pc_534608440f345b0583c71615176e28dc"><br><font color='gray'>标题是“多彩的甜点”</font></p><p>在改变标题内容后，图左的布局就更合适了。因为图像和“多彩的甜点”搭配更自然，而与文章内容的关联不大。</p><details><summary>原文</summary><b>ポイント4：内容と余白の関係を意識する</b><p>上の２つをパッと見たとき、どのように読み取ったでしょうか。どちらも内容は同じですが、左は「Sweets」が画像のタイトル、右は<br>文章のタイトルに見えたのではないかと思います。<p>これは前半でお話した「情報の区分け（グルーピング）」効果に属しますが、違いは余白の取り方にあります。距離が近い方に属しているように見えるので、画像とセットで見せたければ、画像間の余白を小さくし文章との余白を大きく、文章とセットで見せたければ、逆にするだけで良いのです。<br>なので、内容によって「余白のあり方」は変わってきます。<p>さて、テキスト情報を変更してみました。<br>どちらの余白の取り方が適切だと思いますか？<br>答えは左です。この場合「カラフルなスイーツ」の文言は、画像に所属させる方が自然です。文章寄りにしてしまうと、本文内容と噛み合わずチグハグな印象を与えてしまいます。</details>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>设计的基础遵循<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%A0%BC%E5%BC%8F%E5%A1%94%E7%BB%84%E7%BB%87%E5%8E%9F%E5%88%99/10544754" >格式塔组织原则</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>设计没有正确答案，正因为如此，设计师自身在制作中要有明确的意向。当被问到“为什么这么设计”时，如果能明确地说出理由，就能提高产品设计的说服力。留白的应用很难一概而论，但如果你之前没有过多留意，不妨根据上面的介绍实践一下。</p><details><summary>原文</summary><b>まとめ</b><p>いかがでしたか。<br>デザインのイロハはゲシュタルトの法則に基づいています。<p>デザインに正解はありません。だからこそ、デザイナー自身がしっかりとした意向を持って制作に取り組むことが重要です。「なぜこうしたの？」と聞かれたら、明確に理由を説明できるとクリエイティブの説得力も増します。余白の取り方はデザインによって変わりますので一概には言えませんが、「今まで特に意識したことなかった」という方は、前半と後半でご紹介したポイントを念頭において、ぜひ実践してみてください。</details>        <h2 id="笔记"   >          <a href="#笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2>      <blockquote><ul><li>一役買う(ひとやく かう)：主动承担任务，主动帮助</li><li>挙げる(あげる)：逮捕&#x2F;举行&#x2F;<strong>举例</strong>&#x2F;扬名&#x2F;尽力</li><li>ゆとり：宽裕，余地</li><li>入れ子(いれこ)：套盒，套匣</li><li>賑やか(にぎやか)：热闹，繁华</li><li>設ける(もうける)：准备，设立</li><li>ラグジュアリー(luxury)：奢华的，豪华的</li><li>商材(しょうざい)：商品</li><li>ECサイト(electronic commerce)：电子商务平台</li><li>コーポレートサイト(corporate website)：企业网站</li><li>ブランディングサイト(branding website)：品牌网站</li><li>セグメント(segment)：切片，部分，程序段</li><li>ちぐはぐ：不配对，不协调，龃龉</li><li>基づく(もとづく)：根据，按照</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/toffy_bon/n/na73bb66846a2#OJ1BV&quot; &gt;https://note.com/toffy_bon/n/na73bb66846a2#OJ1BV&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/toffy_bon/n/n38475f161c31&quot; &gt;https://note.com/toffy_bon/n/n38475f161c31&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;原作者：&lt;br&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://note.com/toffy_bon/&quot; &gt;assassin@Web屋&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

        &lt;h2 id=&quot;译者摘要&quot;   &gt;
          &lt;a href=&quot;#译者摘要&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#译者摘要&quot; class=&quot;headerlink&quot; title=&quot;译者摘要&quot;&gt;&lt;/a&gt;译者摘要&lt;/h2&gt;
      &lt;p&gt;本文面向入门设计者，简明扼要地介绍了留白的概念，作用，和部分应用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="翻译" scheme="https://lzmustb.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>网站图标</title>
    <link href="https://lzmustb.github.io/2022/01/12/my-AvatarIcon-design/"/>
    <id>https://lzmustb.github.io/2022/01/12/my-AvatarIcon-design/</id>
    <published>2022-01-12T03:35:18.000Z</published>
    <updated>2022-09-25T09:24:20.440Z</updated>
    
    <content type="html"><![CDATA[<span align='center'><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201121316093.png" width=40%></span><span id="more"></span><p>初版是在小学4年级左右的时候设计的，长这个样子👇<br><span align='center'><br><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201121141859.jpg" width=60%><br></span><br>还取了个名字叫<strong>魔鬼的讴歌</strong>🙈（中二爆棚）</p><p>之前正愁博客logo用什么好的时候突然想起来，就直接用了，所以其实没什么内涵💦</p>]]></content>
    
    
    <summary type="html">&lt;span align=&#39;center&#39;&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/202201121316093.png&quot; width=40%&gt;
&lt;/span&gt;</summary>
    
    
    
    <category term="个人作品" scheme="https://lzmustb.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    <category term="平面设计" scheme="https://lzmustb.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>欢迎光临🎉</title>
    <link href="https://lzmustb.github.io/2022/01/11/my-first-blog/"/>
    <id>https://lzmustb.github.io/2022/01/11/my-first-blog/</id>
    <published>2022-01-11T10:26:00.000Z</published>
    <updated>2023-09-25T12:47:40.202Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="📃Intro"   >          <a href="#📃Intro" class="heading-link"><i class="fas fa-link"></i></a><a href="#📃Intro" class="headerlink" title="📃Intro"></a>📃Intro</h2>      <p>2021级大学本科生，计算机科学专业。此前在QQ空间写一些感想，但是感觉发挥受限，也不好排版和整理。于是趁大一时间充裕，建了一个博客用来记录我的学习成果和思考。</p><span id="more"></span>        <h2 id="🎮兴趣"   >          <a href="#🎮兴趣" class="heading-link"><i class="fas fa-link"></i></a><a href="#🎮兴趣" class="headerlink" title="🎮兴趣"></a>🎮兴趣</h2>      <ul><li><p>音乐：J-POP听的比较多，沉迷于Vaundy。</p><p>  <a href="">#古川本铺</a>  <a href="">#真夜中</a>  <a href="">#夜鹿</a>  <a href="">#匹老板</a>  <a href="">#Vaundy</a>  <a href="">#KingGnu</a></p></li><li><p>番剧：虽然是老二次元，但看番比较挑，很多经典都没看过。心中的神作是三月的狮子。（但是不出续集💔</p><p>  <a href="">#三月的狮子</a>  <a href="">#Sonny Boy</a>  <a href="">#扳机社</a>  <a href="">#冰菓</a>  <a href="">#春物</a></p></li><li><p>游戏：进入大学后开始少玩商业，多玩独立。明日方舟会时不时回来过个年。</p><p>  <a href="">#Hades</a>  <a href="">#Jonathan Blow</a>  <a href="">#传说之下</a> <a href="">#麦哲伦(明日方舟)</a> </p></li><li><p>电影：了解的不是很多，兴致来了就看。</p><p>  <a href="">#韦斯·安德森</a>  <a href="">#汤浅政明</a> </p></li><li><pre><code>书：卡尔维诺，神。</code></pre></li><li><p><a href="">#卡尔维诺</a>  <a href="">#毛姆</a>  <a href="">#塞林格</a></p></li></ul><p>最近开始有目的地去欣赏作品，提高审美，欢迎朋友们推荐🙏。</p>        <h2 id="💡个人能力"   >          <a href="#💡个人能力" class="heading-link"><i class="fas fa-link"></i></a><a href="#💡个人能力" class="headerlink" title="💡个人能力"></a>💡个人能力</h2>      <p>终极目标是做独立游戏，所以各方面都在努力中，大学期间主要以提高编程能力为主。</p><p>大一上学期给班级做了班徽，班服设计，个人参加了学院的明信片设计大赛拿了三等奖。还做了个微电影的导演和后期，虽然很喜欢做视频，但作为非影视专业未来也不打算再接触这些了。</p><p>从大一下学期自学Vue3，现已熟练网页编写，能还原主流的UI界面和交互功能。在一次Web应用项目中使用过Websocket，对其前后端通信有一定了解。</p><p>在参加比赛项目时制作过安卓app，在小组担任UI设计和前端界面（用uni-app编写）。</p><p>2023年7月通过N1考试，178&#x2F;180分。</p>        <h2 id="📫联系方式"   >          <a href="#📫联系方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#📫联系方式" class="headerlink" title="📫联系方式"></a>📫联系方式</h2>      <ul><li>QQ：499061152</li><li>Bilibili：<span class="exturl"><a class="exturl__link"   href="https://space.bilibili.com/1394852578" >@神秘的哇哇</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;📃Intro&quot;   &gt;
          &lt;a href=&quot;#📃Intro&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#📃Intro&quot; class=&quot;headerlink&quot; title=&quot;📃Intro&quot;&gt;&lt;/a&gt;📃Intro&lt;/h2&gt;
      &lt;p&gt;2021级大学本科生，计算机科学专业。此前在QQ空间写一些感想，但是感觉发挥受限，也不好排版和整理。于是趁大一时间充裕，建了一个博客用来记录我的学习成果和思考。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
