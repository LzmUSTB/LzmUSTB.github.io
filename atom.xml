<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Distant Dreamer</title>
  
  <subtitle>No More Wasted Nights.</subtitle>
  <link href="https://lzmustb.github.io/atom.xml" rel="self"/>
  
  <link href="https://lzmustb.github.io/"/>
  <updated>2024-06-24T05:18:27.169Z</updated>
  <id>https://lzmustb.github.io/</id>
  
  <author>
    <name>Lzm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tinyrenderer开源项目学习</title>
    <link href="https://lzmustb.github.io/2024/06/24/my-study-tinyrenderer/"/>
    <id>https://lzmustb.github.io/2024/06/24/my-study-tinyrenderer/</id>
    <published>2024-06-24T04:26:20.000Z</published>
    <updated>2024-06-24T05:18:27.169Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="tinyrenderer"   >          <a href="#tinyrenderer" class="heading-link"><i class="fas fa-link"></i></a><a href="#tinyrenderer" class="headerlink" title="tinyrenderer"></a>tinyrenderer</h1>      <p>source：<span class="exturl"><a class="exturl__link"   href="https://github.com/ssloy/tinyrenderer" >https://github.com/ssloy/tinyrenderer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="线段绘制"   >          <a href="#线段绘制" class="heading-link"><i class="fas fa-link"></i></a><a href="#线段绘制" class="headerlink" title="线段绘制"></a>线段绘制</h2>              <h2 id="obj-格式"   >          <a href="#obj-格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#obj-格式" class="headerlink" title=".obj 格式"></a>.obj 格式</h2>      <div class="table-container"><table><thead><tr><th>顶点数据</th><th></th></tr></thead><tbody><tr><td>v</td><td>几何体顶点</td></tr><tr><td>vt</td><td>贴图坐标点</td></tr><tr><td>vn</td><td>顶点法线</td></tr><tr><td>vp</td><td>参数空格顶点</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>自由形态曲线&#x2F;表面属性</th><th></th></tr></thead><tbody><tr><td>deg</td><td>度</td></tr><tr><td>bmat</td><td>基础矩阵（basis matrix）</td></tr><tr><td>step</td><td>步尺寸</td></tr><tr><td>cstype</td><td>曲线或表面类型</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>元素</th><th></th></tr></thead><tbody><tr><td>p</td><td>点</td></tr><tr><td>l</td><td>线</td></tr><tr><td>f</td><td>面</td></tr><tr><td>curv</td><td>曲线</td></tr><tr><td>curv2</td><td>2D曲线</td></tr><tr><td>surf</td><td>表面</td></tr></tbody></table></div><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f 5/15/7 4/14/6 </span><br><span class="line"></span><br><span class="line">f：表示一个面，由三个v/vt/vn的索引形式组成。比如obj文件中f 5/15/7 4/14/6 6/16/8 ，表示由第5、第4、第6这三个顶点组成了一个三角平面,平面的纹理由第15、第14、第16这三个纹理坐标形成，这个平面的朝向是第7、第6、第8这三个顶点的法向量求平均值。</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;tinyrenderer&quot;   &gt;
          &lt;a href=&quot;#tinyrenderer&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#tinyrende</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>svg动画制作心得</title>
    <link href="https://lzmustb.github.io/2024/05/18/my-first-svg-animation/"/>
    <id>https://lzmustb.github.io/2024/05/18/my-first-svg-animation/</id>
    <published>2024-05-18T00:17:45.000Z</published>
    <updated>2024-05-18T00:24:14.689Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="制作过程"   >          <a href="#制作过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h2>      <p>首先用illustrator创建svg文件。</p><p>将预计使用不同动画的元素分图层</p><p><img src="/../images/image-20240518082245734.png" alt="image-20240518082245734"></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h2 id=&quot;制作过程&quot;   &gt;
          &lt;a href=&quot;#制作过程&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#制作过程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="个人作品" scheme="https://lzmustb.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    <category term="平面设计" scheme="https://lzmustb.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学笔记</title>
    <link href="https://lzmustb.github.io/2024/04/28/my-CG-notes/"/>
    <id>https://lzmustb.github.io/2024/04/28/my-CG-notes/</id>
    <published>2024-04-28T01:16:30.000Z</published>
    <updated>2024-06-26T07:31:05.224Z</updated>
    
    <content type="html"><![CDATA[<p>学习图形学相关笔记</p><span id="more"></span>        <h2 id="Linear-Algebra"   >          <a href="#Linear-Algebra" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h2>              <h3 id="Dot-Product-点积"   >          <a href="#Dot-Product-点积" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dot-Product-点积" class="headerlink" title="Dot Product 点积"></a>Dot Product 点积</h3>      <ul><li>投影</li><li>判断两向量方向接近程度</li></ul>        <h3 id="Cross-Product-叉积"   >          <a href="#Cross-Product-叉积" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cross-Product-叉积" class="headerlink" title="Cross Product 叉积"></a>Cross Product 叉积</h3>      <ul><li>法向</li></ul>        <h2 id="Transforms"   >          <a href="#Transforms" class="heading-link"><i class="fas fa-link"></i></a><a href="#Transforms" class="headerlink" title="Transforms"></a>Transforms</h2>      <ul><li>Affine map(仿射变换)<ul><li>线性变换<ul><li>scale，reflection，shear，rotate</li></ul></li><li>平移translation</li></ul></li></ul>        <h3 id="homogenous-coordinates-齐次坐标"   >          <a href="#homogenous-coordinates-齐次坐标" class="heading-link"><i class="fas fa-link"></i></a><a href="#homogenous-coordinates-齐次坐标" class="headerlink" title="homogenous coordinates 齐次坐标"></a>homogenous coordinates 齐次坐标</h3>      <p><img src="/../images/image-20240428131949285.png" alt="image-20240428131949285"></p><p>point+point&#x3D;中点</p><p>三维坐标：(x, y, z, 1)^T^</p><p>三维向量：(x, y, z, 0)^T^</p><p>三维仿射变换：<br>$$<br>\begin{pmatrix}<br>x’\<br>y’\<br>z’\<br>1<br>\end{pmatrix}<br>&#x3D;<br>\begin{pmatrix}<br>a&amp;b&amp;c&amp;t_{x}\<br>d&amp;e&amp;f&amp;t_{y}\<br>g&amp;h&amp;i&amp;t_{z}\<br>0&amp;0&amp;0&amp;1\<br>\end{pmatrix}<br>·<br>\begin{pmatrix}<br>x\<br>y\<br>z\<br>1<br>\end{pmatrix}<br>$$<br><img src="/../images/image-20240503155110384.png" alt="image-20240503155110384"></p><p>四元数 ：解决旋转插值计算</p>        <h3 id="Projection-transformation-投影变换"   >          <a href="#Projection-transformation-投影变换" class="heading-link"><i class="fas fa-link"></i></a><a href="#Projection-transformation-投影变换" class="headerlink" title="Projection transformation 投影变换"></a>Projection transformation 投影变换</h3>              <h4 id="Orthographic-正交投影"   >          <a href="#Orthographic-正交投影" class="heading-link"><i class="fas fa-link"></i></a><a href="#Orthographic-正交投影" class="headerlink" title="Orthographic 正交投影"></a>Orthographic 正交投影</h4>              <h2 id="光栅化"   >          <a href="#光栅化" class="heading-link"><i class="fas fa-link"></i></a><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h2>      <p>采样问题：锯齿，摩尔纹，车轮效应</p><p>本质：信号变化太快，采样速度太慢</p>        <h3 id="滤波"   >          <a href="#滤波" class="heading-link"><i class="fas fa-link"></i></a><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h3>      <p>模糊操作→采样</p><p><img src="/../images/image-20240621100744327.png" alt="image-20240621100744327"></p><p>走样：</p><p><img src="/../images/image-20240621103544506.png" alt="image-20240621103544506"></p><p>卷积操作：</p><p><img src="/../images/image-20240621113523346.png" alt="image-20240621113523346"></p><p>MSAA（multy sample anti aliasing）：</p><p>在一个像素点上取多个采样点</p><p><img src="/../images/image-20240621134940537.png" alt="image-20240621134940537"></p><p>FXAA（fast approximate AA）：</p><p>将有锯齿的图像的边界修改</p><p>TAA（Temporal AA）：</p><p>与上一帧比较，复用上一帧的结果（MSAA的样本分布到时间上）</p>        <h3 id="Super-resolution（超分辨率）"   >          <a href="#Super-resolution（超分辨率）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Super-resolution（超分辨率）" class="headerlink" title="Super resolution（超分辨率）"></a>Super resolution（超分辨率）</h3>      <p>从低分辨率拉伸到高分辨率</p><p>DLSS（deep learning super sampling）</p>        <h2 id="深度缓冲-Z-buffering"   >          <a href="#深度缓冲-Z-buffering" class="heading-link"><i class="fas fa-link"></i></a><a href="#深度缓冲-Z-buffering" class="headerlink" title="深度缓冲 Z-buffering"></a>深度缓冲 Z-buffering</h2>      <p>画家算法：新画的覆盖旧画的东西</p><ul><li>给所有三角形排深度</li></ul><p>问题：</p><p><img src="/../images/image-20240621140940522.png" alt="image-20240621140940522"></p>        <h3 id="深度缓冲"   >          <a href="#深度缓冲" class="heading-link"><i class="fas fa-link"></i></a><a href="#深度缓冲" class="headerlink" title="深度缓冲"></a>深度缓冲</h3>      <p>在每个<strong>像素点</strong>记录最小的<code>z</code>值</p><p>同时生成：</p><pre><code>* frame buffer：包含颜色信息的帧缓冲* depth buffer：存储每个像素点最小深度的缓冲（越小，离相机越近）</code></pre><p><img src="/../images/image-20240621141259865.png" alt="image-20240621141259865"></p><p>与渲染的顺序无关</p>        <h2 id="Shading-着色"   >          <a href="#Shading-着色" class="heading-link"><i class="fas fa-link"></i></a><a href="#Shading-着色" class="headerlink" title="Shading 着色"></a>Shading 着色</h2>      <p>基本着色模型(Blinn-Phong Reflectance Model)</p><p><img src="/../images/image-20240621150901942.png" alt="image-20240621150901942"></p><ul><li>高光</li><li>漫反射</li><li>环境光</li></ul><p>计算每个着色点的光照：</p><p><img src="/../images/image-20240621151529357.png" alt="image-20240621151529357"></p><p>着色具有局部性：不考虑别的物体遮挡形成的影子</p>        <h3 id="漫反射"   >          <a href="#漫反射" class="heading-link"><i class="fas fa-link"></i></a><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h3>      <p>某一点的漫反射光照能量与cosθ正相关</p><p><img src="/../images/image-20240621152152115.png" alt="image-20240621152152115"></p><p>光强随光源距离的减小情况：</p><p><img src="/../images/image-20240621152516916.png" alt="image-20240621152516916"></p><p><img src="/../images/image-20240621152748305.png" alt="image-20240621152748305"></p><p>※漫反射光照与观测方向没有关系</p>        <h3 id="高光"   >          <a href="#高光" class="heading-link"><i class="fas fa-link"></i></a><a href="#高光" class="headerlink" title="高光"></a>高光</h3>      <p>※观察方向和镜面反射方向接近时，可观察到高光</p><p>（换句话说，<strong>法线</strong>和<strong>半程向量</strong>接近）</p><p><img src="/../images/image-20240621160834949.png" alt="image-20240621160834949"></p><p>指数p可以调整阈值（通常在100~200，越大，高光越集中）</p><p><img src="/../images/image-20240621161210166.png" alt="image-20240621161210166"></p>        <h3 id="环境光"   >          <a href="#环境光" class="heading-link"><i class="fas fa-link"></i></a><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h3>      <p>简化为常数（实际考虑全局光照）</p><p><img src="/../images/image-20240621161415991.png" alt="image-20240621161415991"></p>        <h3 id="着色频率"   >          <a href="#着色频率" class="heading-link"><i class="fas fa-link"></i></a><a href="#着色频率" class="headerlink" title="着色频率"></a>着色频率</h3>              <h4 id="平面着色"   >          <a href="#平面着色" class="heading-link"><i class="fas fa-link"></i></a><a href="#平面着色" class="headerlink" title="平面着色"></a>平面着色</h4>      <p><img src="/../images/image-20240621162234380.png" alt="image-20240621162234380"></p>        <h4 id="顶点着色"   >          <a href="#顶点着色" class="heading-link"><i class="fas fa-link"></i></a><a href="#顶点着色" class="headerlink" title="顶点着色"></a>顶点着色</h4>      <p><img src="/../images/image-20240621162320559.png" alt="image-20240621162320559"></p>        <h3 id="Phong着色"   >          <a href="#Phong着色" class="heading-link"><i class="fas fa-link"></i></a><a href="#Phong着色" class="headerlink" title="Phong着色"></a>Phong着色</h3>      <p><img src="/../images/image-20240621162434145.png" alt="image-20240621162434145"></p>        <h4 id="三角形内部点平滑过渡"   >          <a href="#三角形内部点平滑过渡" class="heading-link"><i class="fas fa-link"></i></a><a href="#三角形内部点平滑过渡" class="headerlink" title="三角形内部点平滑过渡"></a>三角形内部点平滑过渡</h4>      <p>在给每个像素着色时，需根据三角形顶点的属性（颜色，法向量等），给内部的属性做线性插值。</p><p><strong>重心坐标</strong>：三角形所在平面的点都可用三个顶点乘一定系数表示，</p><p>※α，β，γ非负时，点在三角形内部</p><p><img src="/../images/image-20240622091051864.png" alt="image-20240622091051864"></p><p>α，β，γ也可用面积比求出：</p><p><img src="/../images/image-20240622091455227.png" alt="image-20240622091455227"></p><p>※先做插值，再进行透视投影</p><p><img src="/../images/image-20240622091921538.png" alt="image-20240622091921538"></p>        <h3 id="比较"   >          <a href="#比较" class="heading-link"><i class="fas fa-link"></i></a><a href="#比较" class="headerlink" title="比较"></a>比较</h3>      <p>横向采用相同模型。</p><p>当模型面数足够高时，三者效果相差不大</p><p><img src="/../images/image-20240621162539852.png" alt="image-20240621162539852"></p>        <h3 id="顶点法线"   >          <a href="#顶点法线" class="heading-link"><i class="fas fa-link"></i></a><a href="#顶点法线" class="headerlink" title="顶点法线"></a>顶点法线</h3>      <p>相邻面的法线求平均（加权）</p><p><img src="/../images/image-20240621162748412.png" alt="image-20240621162748412"></p>        <h3 id="阴影"   >          <a href="#阴影" class="heading-link"><i class="fas fa-link"></i></a><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3>              <h4 id="shadow-mapping"   >          <a href="#shadow-mapping" class="heading-link"><i class="fas fa-link"></i></a><a href="#shadow-mapping" class="headerlink" title="shadow mapping"></a>shadow mapping</h4>      <p>不在阴影里的点满足：</p><ol><li>被（点）光源照射</li><li>被相机观测</li></ol><p>记录点光源观测的图像深度，相机观测的深度与点光源观测的深度比较。</p>        <h2 id="图形渲染管线"   >          <a href="#图形渲染管线" class="heading-link"><i class="fas fa-link"></i></a><a href="#图形渲染管线" class="headerlink" title="图形渲染管线"></a>图形渲染管线</h2>      <p>图形输入到显示的一系列过程</p><p><img src="/../images/image-20240621175230389.png" alt="image-20240621175230389"></p>        <h3 id="Shader编程"   >          <a href="#Shader编程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Shader编程" class="headerlink" title="Shader编程"></a>Shader编程</h3>              <h2 id="纹理映射"   >          <a href="#纹理映射" class="heading-link"><i class="fas fa-link"></i></a><a href="#纹理映射" class="headerlink" title="纹理映射"></a>纹理映射</h2>      <p><img src="/../images/image-20240621183616504.png" alt="image-20240621183616504"></p><p><img src="/../images/image-20240621183828955.png" alt="image-20240621183828955"></p><p><strong>texel</strong>：纹理上的一个像素 </p>        <h3 id="贴图过小"   >          <a href="#贴图过小" class="heading-link"><i class="fas fa-link"></i></a><a href="#贴图过小" class="headerlink" title="贴图过小"></a>贴图过小</h3>              <h4 id="双线性插值-Bilinear"   >          <a href="#双线性插值-Bilinear" class="heading-link"><i class="fas fa-link"></i></a><a href="#双线性插值-Bilinear" class="headerlink" title="双线性插值 Bilinear"></a>双线性插值 Bilinear</h4>      <p>映射在纹理上的非整数点，采用周围四个点的线性插值，以平滑放大纹理贴图</p><p><img src="/../images/image-20240622092937231.png" alt="image-20240622092937231"></p>        <h4 id="Bicubic"   >          <a href="#Bicubic" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bicubic" class="headerlink" title="Bicubic"></a>Bicubic</h4>      <p>取16个点，三次线性插值</p>        <h3 id="贴图过大"   >          <a href="#贴图过大" class="heading-link"><i class="fas fa-link"></i></a><a href="#贴图过大" class="headerlink" title="贴图过大"></a>贴图过大</h3>      <p>Mipmap：范围查询（快速，近似，方形范围） </p><p>额外存储：源图像的1&#x2F;3（1&#x2F;4+1&#x2F;16+1&#x2F;64···）</p><p><img src="/../images/image-20240622095059440.png" alt="image-20240622095059440"></p><p><img src="/../images/image-20240622100025588.png" alt="image-20240622100025588"></p><p><img src="/../images/image-20240622100438789.png" alt="image-20240622100438789"></p>        <h4 id="问题"   >          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题" class="headerlink" title="问题"></a>问题</h4>      <p>屏幕空间的矩形区域在纹理空间中对应不规则的区域</p><p><img src="/../images/image-20240622101037850.png" alt="image-20240622101037850"></p>        <h3 id="各向异性过滤"   >          <a href="#各向异性过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#各向异性过滤" class="headerlink" title="各向异性过滤"></a>各向异性过滤</h3>      <p><img src="/../images/image-20240622101114581.png" alt="image-20240622101114581"></p>        <h3 id="纹理应用"   >          <a href="#纹理应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#纹理应用" class="headerlink" title="纹理应用"></a>纹理应用</h3>      <p>环境光纹理</p><p><img src="/../images/image-20240622115350899.png" alt="image-20240622115350899"></p><p><img src="/../images/image-20240622115721817.png" alt="image-20240622115721817"></p><p>凹凸贴图：改变任意位置的法线高度</p><p><img src="/../images/image-20240622120054431.png" alt="image-20240622120054431"></p><p>位移贴图：在凹凸贴图的基础上移动顶点（右图）</p><p><img src="/../images/image-20240622121120322.png" alt="image-20240622121120322"></p><p><strong>环境光遮蔽</strong>的计算结果包含在纹理中：</p><p><img src="/../images/image-20240622121603329.png" alt="image-20240622121603329"></p>        <h2 id="几何"   >          <a href="#几何" class="heading-link"><i class="fas fa-link"></i></a><a href="#几何" class="headerlink" title="几何"></a>几何</h2>      <ul><li><p>implicit （隐式）：</p><p>​定义一个几何体的<strong>点所满足的关系</strong></p><p>​f(x,y,z)&#x3D;0</p></li><li><p>explicit（显示）：</p><p>​直接给出所有点的坐标，或通过参数映射：</p><p><img src="/../images/image-20240622122844246.png" alt="image-20240622122844246"></p></li></ul>        <h3 id="隐式表示"   >          <a href="#隐式表示" class="heading-link"><i class="fas fa-link"></i></a><a href="#隐式表示" class="headerlink" title="隐式表示"></a>隐式表示</h3>              <h4 id="CSG"   >          <a href="#CSG" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSG" class="headerlink" title="CSG"></a>CSG</h4>      <p>Constructive Solid Geometry（implicit）</p><p>通过基本几何图形的布尔运算定义新图形</p><p><img src="/../images/image-20240622130458537.png" alt="image-20240622130458537"></p>        <h4 id="距离函数"   >          <a href="#距离函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#距离函数" class="headerlink" title="距离函数"></a>距离函数</h4>      <img src="../images/image-20240622132528640.png" alt="image-20240622132528640"  />        <h4 id="水平集"   >          <a href="#水平集" class="heading-link"><i class="fas fa-link"></i></a><a href="#水平集" class="headerlink" title="水平集"></a>水平集</h4>      <p><img src="/../images/image-20240622132721425.png" alt="image-20240622132721425"></p>        <h4 id="分形Fractals"   >          <a href="#分形Fractals" class="heading-link"><i class="fas fa-link"></i></a><a href="#分形Fractals" class="headerlink" title="分形Fractals"></a>分形Fractals</h4>      <p><img src="/../images/image-20240622132957335.png" alt="image-20240622132957335"></p>        <h3 id="显式表示"   >          <a href="#显式表示" class="heading-link"><i class="fas fa-link"></i></a><a href="#显式表示" class="headerlink" title="显式表示"></a>显式表示</h3>              <h4 id="点云"   >          <a href="#点云" class="heading-link"><i class="fas fa-link"></i></a><a href="#点云" class="headerlink" title="点云"></a>点云</h4>      <p>简单表示所有点的坐标</p>        <h4 id="多边形面Polygon-Mesh"   >          <a href="#多边形面Polygon-Mesh" class="heading-link"><i class="fas fa-link"></i></a><a href="#多边形面Polygon-Mesh" class="headerlink" title="多边形面Polygon Mesh"></a>多边形面Polygon Mesh</h4>              <h4 id="贝塞尔曲线"   >          <a href="#贝塞尔曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4>      <p>用一系列控制点定义曲线</p><p><img src="/../images/image-20240622135219977.png" alt="image-20240622135219977"></p><p><img src="/../images/image-20240622135706042.png" alt="image-20240622135706042"></p><p><img src="/../images/image-20240622135757216.png" alt="image-20240622135757216"></p><p>任意时刻t，贝塞尔曲线上的点都由控制点决定</p><p><img src="/../images/image-20240622140108914.png" alt="image-20240622140108914"></p><p><img src="/../images/image-20240622140348232.png" alt="image-20240622140348232"></p><p>性质：</p><ul><li><p><strong>对控制点进行仿射变换</strong>，等价于对贝塞尔曲线进行仿射变换。</p></li><li><p>曲线在控制点形成的凸包（Convex Hull）内</p></li></ul>        <h4 id="多段贝塞尔曲线"   >          <a href="#多段贝塞尔曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#多段贝塞尔曲线" class="headerlink" title="多段贝塞尔曲线"></a>多段贝塞尔曲线</h4>      <p>C^0^ 连续：第一段的终点和第二段的起点重合</p><p>C^1^ 连续：重合点与前后两点的距离相等（一阶导数相等）</p><p><img src="/../images/image-20240622141841377.png" alt="image-20240622141841377"></p><p>贝塞尔曲面：</p><p>将多个纵向贝塞尔曲线在<strong>t的值</strong>作为横向贝塞尔曲线的控制点</p><p><img src="/../images/image-20240622143056496.png" alt="image-20240622143056496"></p>        <h4 id="Spline-样条"   >          <a href="#Spline-样条" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spline-样条" class="headerlink" title="Spline 样条"></a>Spline 样条</h4>      <p>可控曲线</p><ul><li>Basic-splines 基函数样条</li></ul>        <h3 id="网格Mesh"   >          <a href="#网格Mesh" class="heading-link"><i class="fas fa-link"></i></a><a href="#网格Mesh" class="headerlink" title="网格Mesh"></a>网格Mesh</h3>      <ul><li>mesh subdivision</li><li>mesh simplification</li><li>mesh regulation</li></ul>        <h4 id="表面细分"   >          <a href="#表面细分" class="heading-link"><i class="fas fa-link"></i></a><a href="#表面细分" class="headerlink" title="表面细分"></a>表面细分</h4>              <h5 id="Loop-subdivision"   >          <a href="#Loop-subdivision" class="heading-link"><i class="fas fa-link"></i></a><a href="#Loop-subdivision" class="headerlink" title="Loop subdivision"></a>Loop subdivision</h5>      <p>​将三角形每条边一分为二（拆成四个三角形），用加权平均调整顶点位置</p>        <h5 id="Catmull-Clark-subdividion"   >          <a href="#Catmull-Clark-subdividion" class="heading-link"><i class="fas fa-link"></i></a><a href="#Catmull-Clark-subdividion" class="headerlink" title="Catmull-Clark subdividion"></a>Catmull-Clark subdividion</h5>      <img src="../images/image-20240622152635801.png" alt="image-20240622152635801" style="zoom:33%;" /><p>经过一次细分后，非四边形面消失，增加了相同数量的奇异点。</p><p>第二次及以后，奇异点数量不再变化</p><p>​<img src="../images/image-20240622152853980.png" alt="image-20240622152853980" style="zoom:33%;" /></p><p>※可以适用于四边形网格</p>        <h4 id="网格简化"   >          <a href="#网格简化" class="heading-link"><i class="fas fa-link"></i></a><a href="#网格简化" class="headerlink" title="网格简化"></a>网格简化</h4>      <p>边坍缩Edge collapse：</p><p><img src="/../images/image-20240622153756363.png" alt="image-20240622153756363"></p><p><img src="/../images/image-20240622153818078.png" alt="image-20240622153818078"></p><p>从二次误差度量小的边开始坍缩</p>        <h2 id="光线追踪"   >          <a href="#光线追踪" class="heading-link"><i class="fas fa-link"></i></a><a href="#光线追踪" class="headerlink" title="光线追踪"></a>光线追踪</h2>      <p>光栅化的局限性：难以表现影响全局的效果（软阴影，磨砂镜面反射，多次反射的间接光照）</p><p>光线的定义：</p><ul><li>光沿直线传播</li><li>两束光线互不影响，不会发生碰撞</li><li>光从光源传到眼睛（观测）</li></ul>        <h3 id="递归光线追踪"   >          <a href="#递归光线追踪" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归光线追踪" class="headerlink" title="递归光线追踪"></a>递归光线追踪</h3>      <ul><li>找出经过反射后到达的所有点</li><li>shadow rays 判断点是否被遮挡</li><li>在原像素点按比例叠加所有点的颜色</li></ul><p><img src="/../images/image-20240623115207843.png" alt="image-20240623115207843"></p>        <h4 id="光线"   >          <a href="#光线" class="heading-link"><i class="fas fa-link"></i></a><a href="#光线" class="headerlink" title="光线"></a>光线</h4>      <p>定义：</p><img src="../images/image-20240623115446379.png" alt="image-20240623115446379" style="zoom: 33%;" /><p>求光线与平面（隐式表示）的交点：</p><img src="../images/image-20240623115917410.png" alt="image-20240623115917410" style="zoom:33%;" /><p>求光线与三角形网格（显示表示）的交点：</p><ul><li>求三角形所在平面与光线的交点</li><li>判断交点是否在三角形内</li></ul><p><img src="/../images/image-20240623123040874.png" alt="image-20240623123040874"></p><p>用重心坐标求：</p><p><img src="/../images/image-20240623123226865.png" alt="image-20240623123226865"></p>        <h3 id="优化"   >          <a href="#优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#优化" class="headerlink" title="优化"></a>优化</h3>              <h4 id="包围盒（AABB）"   >          <a href="#包围盒（AABB）" class="heading-link"><i class="fas fa-link"></i></a><a href="#包围盒（AABB）" class="headerlink" title="包围盒（AABB）"></a>包围盒（AABB）</h4>      <p>※光线碰不到包围盒，一定碰不到物体</p><p>※轴向包围盒可以用向量分量计算</p><p><img src="/../images/image-20240623123758121.png" alt="image-20240623123758121"></p><p>光线离开任何一组对面，离开包围盒</p><p>光线进入所有对面，进入包围盒</p><p><img src="/../images/image-20240623131028598.png" alt="image-20240623131028598"></p><p>t<del>exit</del>&lt;0:包围盒在光线背面</p><p>t<del>exit</del>&gt;&#x3D;0 &amp;&amp; t<del>enter</del>&lt;0:光线在包围盒内部，一定相交</p>        <h4 id="预处理"   >          <a href="#预处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4>              <h5 id="加速网格"   >          <a href="#加速网格" class="heading-link"><i class="fas fa-link"></i></a><a href="#加速网格" class="headerlink" title="加速网格"></a>加速网格</h5>      <p><img src="/../images/image-20240623133949406.png" alt="image-20240623133949406"></p>        <h5 id="空间划分-Spatial-Partitions"   >          <a href="#空间划分-Spatial-Partitions" class="heading-link"><i class="fas fa-link"></i></a><a href="#空间划分-Spatial-Partitions" class="headerlink" title="空间划分 Spatial Partitions"></a>空间划分 Spatial Partitions</h5>      <p><img src="/../images/image-20240623134751776.png" alt="image-20240623134751776"></p><p><img src="/../images/image-20240623135320457.png" alt="image-20240623135320457"></p><p>光线和父节点相交，则继续判断是否和子节点相交。</p><p>问题：一个物体可能存在于多个盒子里；三角形和盒子边界求交集很麻烦</p>        <h5 id="物体划分-Object-partition"   >          <a href="#物体划分-Object-partition" class="heading-link"><i class="fas fa-link"></i></a><a href="#物体划分-Object-partition" class="headerlink" title="物体划分 Object  partition"></a>物体划分 Object  partition</h5>      <p>BVH（bounding volume hierarchy）</p><p><img src="/../images/image-20240623140825659.png" alt="image-20240623140825659"></p>        <h3 id="Basic-radiometry-辐射度量学"   >          <a href="#Basic-radiometry-辐射度量学" class="heading-link"><i class="fas fa-link"></i></a><a href="#Basic-radiometry-辐射度量学" class="headerlink" title="Basic radiometry 辐射度量学"></a>Basic radiometry 辐射度量学</h3>      <ul><li>radiant flux</li><li>intensity</li><li>irradiance</li><li>radiance</li></ul><p><img src="/../images/image-20240623151550414.png" alt="image-20240623151550414"></p><p><img src="/../images/image-20240623151822948.png" alt="image-20240623151822948"></p><p>立体角</p><p><img src="/../images/image-20240623152103942.png" alt="image-20240623152103942"></p><p><img src="/../images/image-20240623152349656.png" alt="image-20240623152349656"></p><img src="../images/image-20240623152616657.png" alt="image-20240623152616657" style="zoom:33%;" /><p><img src="/../images/image-20240623160256581.png" alt="image-20240623160256581"></p><p>intensity不变化，irradiance会随距离衰减</p><p><img src="/../images/image-20240626121234798.png" alt="image-20240626121234798"></p><p>radiance：</p><ul><li>irradiance per solid angle：单位立体角的irradiance</li><li>intensity per projected unit area：单位投影面积的光强</li></ul>        <h2 id="BRDF"   >          <a href="#BRDF" class="heading-link"><i class="fas fa-link"></i></a><a href="#BRDF" class="headerlink" title="BRDF"></a>BRDF</h2>      <p>bidirectional reflectance distribution function：表示各个方向反射的能量分布</p><p><img src="/../images/image-20240626122927103.png" alt="image-20240626122927103"></p><p><img src="/../images/image-20240626125912466.png" alt="image-20240626125912466"></p>        <h3 id="渲染方程"   >          <a href="#渲染方程" class="heading-link"><i class="fas fa-link"></i></a><a href="#渲染方程" class="headerlink" title="渲染方程"></a>渲染方程</h3>      <p><img src="/../images/image-20240626130406788.png" alt="image-20240626130406788"></p><p>L&#x3D;E+KL(光源本身+辐射出来的能量，递归定义)</p><p>解L：光源本身+光源经过1次，2次…反射后的能量<img src="/../images/image-20240626131347498.png" alt="image-20240626131347498"></p><p>全局光照：光线经过无数次反射的光照集合</p>        <h2 id="概率论"   >          <a href="#概率论" class="heading-link"><i class="fas fa-link"></i></a><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2>              <h3 id="蒙特卡洛积分"   >          <a href="#蒙特卡洛积分" class="heading-link"><i class="fas fa-link"></i></a><a href="#蒙特卡洛积分" class="headerlink" title="蒙特卡洛积分"></a>蒙特卡洛积分</h3>      <p>在积分域[a,b]间随机采样x<del>i</del> ,以f(x<del>i</del>)*(b-a)为一个采样面积，多次采样求平均。</p><p><img src="/../images/image-20240626140643735.png" alt="image-20240626140643735"></p><p>用概率密度计算：</p><p><img src="/../images/image-20240626141050572.png" alt="image-20240626141050572"></p>        <h2 id="路径追踪Path-tracing"   >          <a href="#路径追踪Path-tracing" class="heading-link"><i class="fas fa-link"></i></a><a href="#路径追踪Path-tracing" class="headerlink" title="路径追踪Path tracing"></a>路径追踪Path tracing</h2>      <p>利用蒙特卡洛积分计算渲染方程</p><p><img src="/../images/image-20240626142925238.png" alt="image-20240626142925238"></p><p>改进：物体反射的光照</p><p><img src="/../images/image-20240626143219835.png" alt="image-20240626143219835"></p><p>改进：一次路径追踪只追踪一根光照（N&#x3D;1），多次追踪求平均</p><p><img src="/../images/image-20240626143548214.png" alt="image-20240626143548214"></p><p>问题：递归没有中止</p>        <h3 id="俄罗斯轮盘法-RR"   >          <a href="#俄罗斯轮盘法-RR" class="heading-link"><i class="fas fa-link"></i></a><a href="#俄罗斯轮盘法-RR" class="headerlink" title="俄罗斯轮盘法 RR"></a>俄罗斯轮盘法 RR</h3>      <p>以规定的概率决定是否辐射光线</p><p><img src="/../images/image-20240626144344445.png" alt="image-20240626144344445"></p><p>问题：从着色点均匀采样，会有很多样本浪费</p><p><img src="/../images/image-20240626144716970.png" alt="image-20240626144716970"></p>        <h3 id="采样光源"   >          <a href="#采样光源" class="heading-link"><i class="fas fa-link"></i></a><a href="#采样光源" class="headerlink" title="采样光源"></a>采样光源</h3>      <p>渲染方程需对光源积分：找出dω和dA的关系</p><p><img src="/../images/image-20240626145150937.png" alt="image-20240626145150937"></p><p><img src="/../images/image-20240626145432887.png" alt="image-20240626145432887"></p><p>pdf：1&#x2F;A</p><p><img src="/../images/image-20240626145903294.png" alt="image-20240626145903294"></p>        <h2 id="材质"   >          <a href="#材质" class="heading-link"><i class="fas fa-link"></i></a><a href="#材质" class="headerlink" title="材质"></a>材质</h2>      <p><strong>BSDF（BRDF+BTDF）</strong>决定了物体的材质。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习图形学相关笔记&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="图形学" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>UI设计作品汇总</title>
    <link href="https://lzmustb.github.io/2024/04/24/my-design-works/"/>
    <id>https://lzmustb.github.io/2024/04/24/my-design-works/</id>
    <published>2024-04-24T12:12:05.000Z</published>
    <updated>2024-04-24T12:28:54.113Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="贝壳指北-移动端APP项目"   >          <a href="#贝壳指北-移动端APP项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#贝壳指北-移动端APP项目" class="headerlink" title="贝壳指北 移动端APP项目"></a><strong>贝壳指北 移动端APP项目</strong></h2>      <blockquote><p>“贝壳指北”是一款运用了image caption技术的智能APP，它可以通过拍照识别出楼宇，并且输出对应的介绍和吐槽，就像一个真人导游一样。不仅如此，它还可以让你了解楼宇内的机器使用方式，实验室介绍等，让你更深入地掌握校园的信息。此外，我们的APP还有地图位置显示，搜索搜楼，地图点击等功能，让你随时随地找到你想去的地方，并且看到实景图。</p></blockquote><p>为配合“贝壳”这一形象，整体采用淡蓝色调，以母校“北科”的谐音“贝壳”作为原型，在中心加上了象征APP功能的指南针。</p><p><img src="/../images/%E8%BD%AF%E4%BB%B6UI.jpg" alt="软件UI"></p><span id="more"></span>        <h2 id="Flikwise-影评网站项目"   >          <a href="#Flikwise-影评网站项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flikwise-影评网站项目" class="headerlink" title="Flikwise 影评网站项目"></a><strong>Flikwise 影评网站项目</strong></h2>      <blockquote><p>“Flikwise” 是一个影评网站，旨在提供一个类似于IMDB的平台，供用户分享、浏览和评价电影，成为电影爱好者之间交流和获取电影信息的热门社交平台。</p></blockquote><p><img src="/../images/image-20240424202021260.png" alt="image-20240424202021260"></p><p><img src="/../images/image-20240424202037136.png" alt="image-20240424202037136"></p><p><img src="/../images/%E5%BD%B1%E8%AF%84%E7%BD%91%E7%AB%994.png" alt="影评网站4"></p>        <h2 id="Room-327-极简聊天软件"   >          <a href="#Room-327-极简聊天软件" class="heading-link"><i class="fas fa-link"></i></a><a href="#Room-327-极简聊天软件" class="headerlink" title="Room-327 极简聊天软件"></a>Room-327 极简聊天软件</h2>      <blockquote><p>Room-327是计算机网络课程设计项目，由我使用electro+vue3独自完成。</p><p>功能有创建&#x2F;加入局域网聊天室，可以在聊天室的大厅中发送群体信息，或跟聊天室的任意其他用户私聊。</p></blockquote><p><img src="/../images/room-327.png" alt="room-327"></p><p><img src="/../images/room-327%EF%BC%882%EF%BC%89.png" alt="room-327（2）"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;贝壳指北-移动端APP项目&quot;   &gt;
          &lt;a href=&quot;#贝壳指北-移动端APP项目&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#贝壳指北-移动端APP项目&quot; class=&quot;headerlink&quot; title=&quot;贝壳指北 移动端APP项目&quot;&gt;&lt;/a&gt;&lt;strong&gt;贝壳指北 移动端APP项目&lt;/strong&gt;&lt;/h2&gt;
      &lt;blockquote&gt;
&lt;p&gt;“贝壳指北”是一款运用了image caption技术的智能APP，它可以通过拍照识别出楼宇，并且输出对应的介绍和吐槽，就像一个真人导游一样。不仅如此，它还可以让你了解楼宇内的机器使用方式，实验室介绍等，让你更深入地掌握校园的信息。此外，我们的APP还有地图位置显示，搜索搜楼，地图点击等功能，让你随时随地找到你想去的地方，并且看到实景图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为配合“贝壳”这一形象，整体采用淡蓝色调，以母校“北科”的谐音“贝壳”作为原型，在中心加上了象征APP功能的指南针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E8%BD%AF%E4%BB%B6UI.jpg&quot; alt=&quot;软件UI&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="个人作品" scheme="https://lzmustb.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    <category term="平面设计" scheme="https://lzmustb.github.io/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>rust学习笔记</title>
    <link href="https://lzmustb.github.io/2024/04/24/my-rust-note/"/>
    <id>https://lzmustb.github.io/2024/04/24/my-rust-note/</id>
    <published>2024-04-24T03:51:38.000Z</published>
    <updated>2024-04-25T10:35:00.034Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="引言"   >          <a href="#引言" class="heading-link"><i class="fas fa-link"></i></a><a href="#引言" class="headerlink" title="引言"></a>引言</h1>      <p>本文是阅读<span class="exturl"><a class="exturl__link"   href="https://doc.rust-lang.org/book/title-page.html%E6%89%80%E5%81%9A%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%82" >https://doc.rust-lang.org/book/title-page.html所做的学习笔记。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><span id="more"></span>        <h2 id="Hello-world"   >          <a href="#Hello-world" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>main函数是rust可执行文件的入口函数，总是第一个被执行。</li><li>rust缩进使用4个空格而非tab</li><li><code>println!</code> 会调用一个宏，去掉<code>!</code>表示调用一个函数</li></ul><p>Rust是一种<strong>预编译静态类型</strong>（ahead-of-time compiled）语言，因此你可以将可执行文件发送给没有安装Rust的人运行。</p>        <h2 id="Cargo"   >          <a href="#Cargo" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2>      <p>Cargo是rust的构建系统和包管理器，可以给rust程序简单地添加依赖。</p><p><code>cargo new [filename] </code> 可以创建一个代有<em>Cargo.toml</em>的项目文件夹。</p><figure class="highlight toml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;hello_cargo&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br></pre></td></tr></table></div></figure><p><code>cargo doc --open</code>可以生成当前依赖的文档，并在一个网页中打开。</p>        <h3 id="Build"   >          <a href="#Build" class="heading-link"><i class="fas fa-link"></i></a><a href="#Build" class="headerlink" title="Build"></a>Build</h3>      <p><code>cargo build</code> 会在 <code>./target/debug</code> 构建一个可执行文件，同时在根目录创建一个<em>Cargo.lock</em>文件，这个文件可以自动追踪当前的依赖版本。</p><p><code>cargo run</code> 可以在build后直接运行文件。</p><p><code>cargo check</code> 可以在不产生exe的情况下检查你的代码是否编译完成。</p><p><code>cargo build --release</code> 会在 <code>./target/release </code> 构建release版本可执行文件，这个文件的运行速度会更快，但编译速度更慢。</p>        <h2 id="use"   >          <a href="#use" class="heading-link"><i class="fas fa-link"></i></a><a href="#use" class="headerlink" title="use"></a>use</h2>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br></pre></td></tr></table></div></figure><p><code>use</code>  关键字可以引入library。默认情况下，rust设定了若干个自动导入的标准库内容称为<a href="https://doc.rust-lang.org/std/prelude/index.html">预导入（<em>prelude</em>）内容</a></p>        <h2 id="变量定义"   >          <a href="#变量定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2>              <h3 id="let-amp-const"   >          <a href="#let-amp-const" class="heading-link"><i class="fas fa-link"></i></a><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h3>      <p><code>let</code> 可以声明一个变量，变量默认是<strong>不可变</strong>的（<em>immutable</em>），使用 <code>mut</code> 关键字可以使变量可变，但<strong>不可改变数据类型</strong>。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br></pre></td></tr></table></div></figure><p><code>::</code>表明<code>new()</code>是String类型的一个<strong>关联函数</strong>（<em>associated function</em>），类似C++中静态方法。</p><p><code>const</code> 可以声明一个常量，常量不可使用<code>mut</code>，且必须显式声明类型。在声明它的作用域中，常量在整个程序生命周期中都有效，常用来作为全局范围的值。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> THREE_HOURS_IN_SECONDS: <span class="type">u32</span> = <span class="number">60</span> * <span class="number">60</span> * <span class="number">3</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="shadowing"   >          <a href="#shadowing" class="heading-link"><i class="fas fa-link"></i></a><a href="#shadowing" class="headerlink" title="shadowing"></a>shadowing</h3>      <p>重复声明一个变量会让第一次声明的值被隐藏，直至二次声明的作用域结束。</p><p>与<code>mut</code>的区别是，shadowing会创建一个新的变量，可以改变值得类型。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;The value of x in the inner scope is: &#123;x&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//x=12</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;x&#125;&quot;</span>);</span><br><span class="line">    <span class="comment">//x=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2>      <p>Rust是<strong>静态类型</strong>语言，在编译时必须知道所有变量得类型。</p><ul><li><p>Scalar（标量）：</p><ul><li>Integer：<code>i8</code> ~ <code>i128</code> , <code>u8</code> ~ <code>u128</code> , <code>isize</code> , <code>usize</code></li></ul><div class="table-container"><table><thead><tr><th>进制</th><th>例子</th></tr></thead><tbody><tr><td>Decimal</td><td>98_222 (98222)</td></tr><tr><td>Hex</td><td>0xff</td></tr><tr><td>Octal</td><td>0o77</td></tr><tr><td>Binary</td><td>0b1111_0000</td></tr><tr><td>Byte (u8 only)</td><td>b’A’</td></tr></tbody></table></div><ul><li>float：<code>f32</code> , <code>f64</code> </li><li>boolean：<code>bool</code>，值为true或false</li><li>character：<code>char</code>，<strong>4Bytes</strong>，unicode，使用单引号声明</li></ul></li><li><p>Compound 复合类型：</p><ul><li>tuple 元组：</li></ul><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">temp</span> = tup.<span class="number">0</span>; <span class="comment">// 下标访问，temp=500</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;  <span class="comment">//元组解构</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//单元(unit)：空值或空得返回类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">unit</span>: ()=();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>array 数组：在栈上分配的固定大小的单个内存块，<strong>所有元素类型必须相同，长度固定</strong>。</li></ul><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">arr2</span>: [<span class="number">1</span>;<span class="number">2</span>]; <span class="comment">//arr2=[1,1]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">first</span> = arr[<span class="number">0</span>]; <span class="comment">//索引访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="函数"   >          <a href="#函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数" class="headerlink" title="函数"></a>函数</h2>              <h3 id="定义"   >          <a href="#定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义" class="headerlink" title="定义"></a>定义</h3>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">another_function</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">another_function</span>(x: <span class="type">i32</span>，y: <span class="type">char</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The values are: &#123;x&#125; &#123;y&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>fn</code>关键字定义，不分前后。</p><p>在函数签名中，必须<strong>声明每个参数的类型</strong>。</p>        <h3 id="语句和表达式"   >          <a href="#语句和表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3>      <p>Rust是一门基于表达式（expression-based）的语言，函数体由一系列语句（Statements）和可选的结尾表达式（Expressions）构成。</p><p>语句不返回值，表达式会计算并返回一个值。</p><p>一个数字（字符），函数调用，宏调用，块作用域 都是表达式，<strong>表达式的结尾没有分号，如果加上分号就变成语句。</strong></p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;y&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值的函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_one</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line"> x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>链式调用</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">    .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>read_line()返回Result类型，Result分为Ok和Err两种值</p>        <h3 id="println"   >          <a href="#println" class="heading-link"><i class="fas fa-link"></i></a><a href="#println" class="headerlink" title="println!"></a>println!</h3>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;you guessed: &#123;guess&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;x&#125; and y + 2 = &#123;&#125;&quot;</span>, y + <span class="number">2</span>);</span><br><span class="line"><span class="comment">//第二个&#123;&#125;值为y+2</span></span><br></pre></td></tr></table></div></figure><p>{}占位符可以将变量的值打印。</p>        <h2 id="控制流"   >          <a href="#控制流" class="heading-link"><i class="fas fa-link"></i></a><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2>              <h3 id="条件"   >          <a href="#条件" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件" class="headerlink" title="条件"></a>条件</h3>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was a&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number &lt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was b&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用在语句中，分支返回值类型必须相同</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">condition</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="循环"   >          <a href="#循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环" class="headerlink" title="循环"></a>循环</h3>              <h4 id="loop"   >          <a href="#loop" class="heading-link"><i class="fas fa-link"></i></a><a href="#loop" class="headerlink" title="loop"></a>loop</h4>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span> [返回值]; <span class="comment">//退出循环，可选返回值</span></span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">//跳过此轮</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过给loop加上label，可以跳出外层循环</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="symbol">&#x27;counting_up</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;count = &#123;count&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">remaining</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;remaining = &#123;remaining&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> remaining == <span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">break</span> <span class="symbol">&#x27;counting_up</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            remaining -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;End count = &#123;count&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="while"   >          <a href="#while" class="heading-link"><i class="fas fa-link"></i></a><a href="#while" class="headerlink" title="while"></a>while</h4>      <p>相当于loop+if</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;number&#125;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        number -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="for"   >          <a href="#for" class="heading-link"><i class="fas fa-link"></i></a><a href="#for" class="headerlink" title="for"></a>for</h4>      <p>用于遍历一个集合</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> a &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;element&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">number</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).<span class="title function_ invoke__">rev</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;number&#125;!&quot;</span>);</span><br><span class="line">        <span class="comment">//输出 3! 2! 1!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Ownership-所有权"   >          <a href="#Ownership-所有权" class="heading-link"><i class="fas fa-link"></i></a><a href="#Ownership-所有权" class="headerlink" title="Ownership 所有权"></a>Ownership 所有权</h2>      <p>所有权是Rust最与众不同的特性，它让Rust无需垃圾回收即可保障内存安全。</p><p>所有权是管理内存的一系列的规则，编译器若发现程序有违这些规则，就会编译失败。因此所有权的内存管理在程序运行中不会有性能损耗。</p>        <h3 id="堆-amp-栈"   >          <a href="#堆-amp-栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#堆-amp-栈" class="headerlink" title="堆&amp;栈"></a>堆&amp;栈</h3>      <p>堆栈都是代码在运行时可供使用的内存，但它们的结构不同。</p><p><strong>栈</strong>：先进后出，栈中所有数据都必须占用已知且固定的大小。</p><p><strong>堆</strong>：向堆存放数据时，要先请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到足够大的空位标记并返回一个指针。</p>        <h3 id="所有权规则"   >          <a href="#所有权规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h3>      <ul><li>Rust中的每个值都有一个<em>owner</em>，且在任何时候都唯一。</li><li>当<em>owner</em>离开作用域，这个值就会被丢弃。</li></ul>        <h3 id="作用域"   >          <a href="#作用域" class="heading-link"><i class="fas fa-link"></i></a><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3>      <p>以<code>String</code>类型为例，<code>String</code>不同于<code>string</code>，是分配在堆上的，可用于创建编译阶段未知大小的字符串（例如用户输入）。</p><p>这种类型的数据可以在程序运行中发生改变，这意味着：</p><ul><li><em>memory allocator</em>会在运行时申请内存分配。</li><li>需要一个方法以在这个变量用完时释放内存。</li></ul><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world!&quot;</span>); <span class="comment">// push_str() appends a literal to a String</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s); <span class="comment">// This will print `hello, world!`</span></span><br></pre></td></tr></table></div></figure><p>当变量在离开作用域时，Rust会调用一个特殊的函数<code>drop</code>，在这个函数中执行内存释放相关的操作。</p><blockquote><p>在 C++ 中，这种 item 在生命周期结束时释放资源的模式有时被称作 资源获取 即初始化（Resource Acquisition Is Initialization (RAII)）。如果你使用过 RAII 模式的 话应该对 Rust 的 drop 函数并不陌生。</p></blockquote>        <h3 id="变量与数据交互"   >          <a href="#变量与数据交互" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量与数据交互" class="headerlink" title="变量与数据交互"></a>变量与数据交互</h3>              <h4 id="Move"   >          <a href="#Move" class="heading-link"><i class="fas fa-link"></i></a><a href="#Move" class="headerlink" title="Move"></a>Move</h4>      <p>1.将x的值赋给y，则x，y的值均被存入栈中。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br></pre></td></tr></table></div></figure><p>2.String复制时，只从栈上拷贝了ptr，len，capacity，而没有复制指针指向的数据。为了防止重复释放内存，Rust在发生复制后，认为s1不再有效，在创建s2后使用s1将<strong>报错</strong>。</p><p>※Rust永远不会自动创建数据的“深拷贝”，因此任何自动的复制都不会有太大的性能影响。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let s1 = String::from(&quot;Hello&quot;);</span><br><span class="line">let s2 = s1;</span><br></pre></td></tr></table></div></figure><p><img src="/../images/image-20240425102457409.png" alt="image-20240425102457409"></p><p><code>copy trait</code>注解：允许在move后依然有效。（整数，布尔，浮点数，字符，以及只包含上述类型的元组）</p>        <h4 id="Clone"   >          <a href="#Clone" class="heading-link"><i class="fas fa-link"></i></a><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h4>      <p>使用clone可以人为地复制变量。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1.<span class="title function_ invoke__">clone</span>();</span><br></pre></td></tr></table></div></figure>        <h4 id="函数调用的move和clone"   >          <a href="#函数调用的move和clone" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数调用的move和clone" class="headerlink" title="函数调用的move和clone"></a>函数调用的move和clone</h4>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// s进入作用域</span></span><br><span class="line">    <span class="title function_ invoke__">takes_ownership</span>(s); <span class="comment">// s的值移动到函数里</span></span><br><span class="line">                        <span class="comment">// s不能再被使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>; <span class="comment">// x 进入作用域</span></span><br><span class="line">    <span class="title function_ invoke__">makes_copy</span>(x); <span class="comment">// x 应该移动函数里，</span></span><br><span class="line">                   <span class="comment">// 但 i32 是 Copy 的，</span></span><br><span class="line">                   <span class="comment">// 所以在后面可继续使用 x</span></span><br><span class="line">&#125;                  <span class="comment">// 这里，x 先移出了作用域，然后是s。但s的值已被移走</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_ownership</span>(some_string: <span class="type">String</span>) &#123; <span class="comment">// some_string 进入作用域</span></span><br><span class="line"> <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// 这里，some_string 移出作用域并调用 `drop` 方法。</span></span><br><span class="line"> <span class="comment">// 占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">makes_copy</span>(some_integer: <span class="type">i32</span>) &#123; <span class="comment">// some_integer 进入作用域</span></span><br><span class="line"> <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_integer);</span><br><span class="line">&#125; <span class="comment">// 这里，some_integer 移出作用域。没有特</span></span><br></pre></td></tr></table></div></figure><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="title function_ invoke__">gives_ownership</span>();  </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);     </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="title function_ invoke__">takes_and_gives_back</span>(s2);  </span><br><span class="line">&#125; <span class="comment">//s2被move，s1和s3被drop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">gives_ownership</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;             </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">some_string</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;yours&quot;</span>);<span class="comment">// some_string comes into scope</span></span><br><span class="line">    some_string                             <span class="comment">//some_string被返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_and_gives_back</span>(a_string: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123; </span><br><span class="line">    a_string  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>通过元组返回多个值</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> (s2, len) = <span class="title function_ invoke__">calculate_length</span>(s1);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s2, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> (<span class="type">String</span>, <span class="type">usize</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">length</span> = s.<span class="title function_ invoke__">len</span>(); <span class="comment">// len() returns the length of a String</span></span><br><span class="line">    (s, length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="Borrowing"   >          <a href="#Borrowing" class="heading-link"><i class="fas fa-link"></i></a><a href="#Borrowing" class="headerlink" title="Borrowing"></a>Borrowing</h3>      <p>引用（<em>reference</em>）可以在传递参数的同时不获取其所有权，因此可以让原来的变量继续使用。</p><p>创建一个reference的行为称为borrowing。</p><p>无效的引用会导致报错，以避免空指针。</p><p><strong>reference不允许修改引用的值。</strong></p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calculate_length</span>(&amp;s1);</span><br><span class="line">    <span class="comment">//s1可以继续使用</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="/../images/image-20240425125325560.png" alt="image-20240425125325560"></p>        <h4 id="可变引用"   >          <a href="#可变引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h4>      <p>通过<code>&amp;mut</code>可以创建可变引用，如果作为函数参数，形参也应该声明为可变引用。</p><p><strong>可变引用在同一作用域只能存在一个，以防止数据竞争。</strong></p><p><strong>不可变引用生效前不能使用可变引用</strong>。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">change</span>(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">change</span>(some_string: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;</span><br><span class="line">    some_string.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Slice"   >          <a href="#Slice" class="heading-link"><i class="fas fa-link"></i></a><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h4>      <p>字符串slice是String中部分值的引用。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>]; <span class="comment">//左开右闭（0可省略）</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">world</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">slice</span> = &amp;s[<span class="number">0</span>..s.<span class="title function_ invoke__">len</span>()];</span><br></pre></td></tr></table></div></figure><p><img src="/../images/image-20240425132107322.png" alt="image-20240425132107322"></p>        <h2 id="struct-结构体"   >          <a href="#struct-结构体" class="heading-link"><i class="fas fa-link"></i></a><a href="#struct-结构体" class="headerlink" title="struct 结构体"></a>struct 结构体</h2>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    active: <span class="type">bool</span>,</span><br><span class="line">    username: <span class="type">String</span>,</span><br><span class="line">    email: <span class="type">String</span>,</span><br><span class="line">    sign_in_count: <span class="type">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">build_user</span>(email: <span class="type">String</span>, username: <span class="type">String</span>) <span class="punctuation">-&gt;</span> User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    username,  <span class="comment">//简化写法，形参与字段重名</span></span><br><span class="line">    email,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">use1</span> = User&#123;</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;abc&quot;</span>),</span><br><span class="line">        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;abc@qq.com&quot;</span>),</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//访问</span></span><br><span class="line">    user1.email = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;def@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//结构体更新语法 move规则与元组相同</span></span><br><span class="line">    <span class="comment">//如果username或email中至少一个拷贝了user1，user1失效</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">user2</span> = User &#123;</span><br><span class="line">        email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ggg@qq.com&quot;</span>);</span><br><span class="line">        ..user1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="tuple-structs-元组结构体"   >          <a href="#tuple-structs-元组结构体" class="heading-link"><i class="fas fa-link"></i></a><a href="#tuple-structs-元组结构体" class="headerlink" title="tuple structs 元组结构体"></a>tuple structs 元组结构体</h3>      <p>※元组结构体的参数类型相同也不能互相传参</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Color</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">black</span> = <span class="title function_ invoke__">Color</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="unit-like-structs"   >          <a href="#unit-like-structs" class="heading-link"><i class="fas fa-link"></i></a><a href="#unit-like-structs" class="headerlink" title="unit-like structs"></a>unit-like structs</h3>      <p>没有任何字段的结构体</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AlwaysEqual</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">subject</span> = AlwaysEqual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="打印struct"   >          <a href="#打印struct" class="heading-link"><i class="fas fa-link"></i></a><a href="#打印struct" class="headerlink" title="打印struct"></a>打印struct</h3>      <figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加上外部属性</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">user</span> = User&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//仅打印</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,&amp;user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印并返回值</span></span><br><span class="line">    dbg!(&amp;user);</span><br><span class="line">    dbg!(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="关联方法-amp-关联函数"   >          <a href="#关联方法-amp-关联函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#关联方法-amp-关联函数" class="headerlink" title="关联方法&amp;关联函数"></a>关联方法&amp;关联函数</h3>      <p>关联方法（associated method）以<code>self</code>为第一个形参</p><p>关联函数（associated functions）不作用于<strong>结构体实例</strong>，类似c++中的静态函数。</p><p><code>impl</code>块中用来存放与结构体相关的函数&#x2F;方法，<code>impl</code>块可以存在多个。</p><figure class="highlight rust"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span>&#123;</span><br><span class="line">    <span class="comment">//第一个参数为self/&amp;self/&amp;mut self</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以在同名方法中使用同名字段</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">width</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; <span class="number">0</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//传入同类型的参数</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">compare</span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; other.width</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关联函数 Self为关联结构体的别名</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new_square</span>(size: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span>&#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            width: size,</span><br><span class="line">            height: size,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    rect1.<span class="title function_ invoke__">area</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="枚举"   >          <a href="#枚举" class="heading-link"><i class="fas fa-link"></i></a><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2>      ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;   &gt;
          &lt;a href=&quot;#引言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;
      &lt;p&gt;本文是阅读&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://doc.rust-lang.org/book/title-page.html%E6%89%80%E5%81%9A%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%82&quot; &gt;https://doc.rust-lang.org/book/title-page.html所做的学习笔记。&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《游戏设计艺术》笔记</title>
    <link href="https://lzmustb.github.io/2024/04/19/read-the-art-of-game-design/"/>
    <id>https://lzmustb.github.io/2024/04/19/read-the-art-of-game-design/</id>
    <published>2024-04-19T05:30:36.000Z</published>
    <updated>2024-04-24T06:40:50.833Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>真正的发现之旅不在于寻找新风景，而是拥有新眼光。<br>——马塞尔·普鲁斯特</p></blockquote><p>游戏设计师最终关注的是创造<strong>体验</strong>。</p><span id="more"></span>        <h2 id="体验"   >          <a href="#体验" class="heading-link"><i class="fas fa-link"></i></a><a href="#体验" class="headerlink" title="体验"></a>体验</h2>              <h3 id="1号透镜：情感"   >          <a href="#1号透镜：情感" class="heading-link"><i class="fas fa-link"></i></a><a href="#1号透镜：情感" class="headerlink" title="1号透镜：情感"></a>1号透镜：情感</h3>      <ul><li>我希望玩家能够体验到怎样的情感？为什么？</li><li>当人们玩游戏时，他们产生了怎样的情感？为什么？</li><li>我怎样缩小人们实际体验与我的设想之间的距离？</li></ul><p>分析记忆</p>        <h3 id="2号透镜：本质体验"   >          <a href="#2号透镜：本质体验" class="heading-link"><i class="fas fa-link"></i></a><a href="#2号透镜：本质体验" class="headerlink" title="2号透镜：本质体验"></a>2号透镜：本质体验</h3>      <ul><li>我想要让玩家获得怎样的体验？</li><li>这种体验的本质是什么？</li><li>我应该如何让我的游戏抓住这种体验的本质？</li></ul><p>如果你对玩家获得的体验有明确的想象，并知道游戏中的哪一部分创造了这种体验，你就能更清楚地知道怎样才能把你的游戏变得更好，因为你知道游戏中哪些元素能够安全地改变，而哪些不行。</p>        <h3 id="3号透镜：场景"   >          <a href="#3号透镜：场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#3号透镜：场景" class="headerlink" title="3号透镜：场景"></a>3号透镜：场景</h3>      <ul><li>我想要制作的游戏最适合哪种场景？</li><li>我的场景中是否有一些特殊的属性会影响到我的游戏？</li><li>我的游戏中有哪些元素能够与场景和谐共处，哪些不行？</li></ul><p><img src="/../images/image-20240419124003314.png" alt="image-20240419124003314"></p><p>炉边设计的游戏系统：wii，与家庭成员一起游玩</p><p>工作台：PC（steam），单独更高，更适合单人或在线</p><p>读书角：iPad，难度更低，更简单放松</p><p>竞技场：体育运动，电子竞技</p>        <h3 id="4号透镜：惊喜"   >          <a href="#4号透镜：惊喜" class="heading-link"><i class="fas fa-link"></i></a><a href="#4号透镜：惊喜" class="headerlink" title="4号透镜：惊喜"></a>4号透镜：惊喜</h3>      <ul><li>当玩家们玩我的游戏时，什么会让他们感到惊喜？</li><li>我的游戏中的故事，规则，艺术，技术有惊喜吗？</li><li>你的规则能够让玩家之间互相带来惊喜吗？</li><li>你的规则能够让玩家们给自己带来惊喜吗？</li></ul>        <h3 id="5号透镜：乐趣"   >          <a href="#5号透镜：乐趣" class="heading-link"><i class="fas fa-link"></i></a><a href="#5号透镜：乐趣" class="headerlink" title="5号透镜：乐趣"></a>5号透镜：乐趣</h3>      <p>大多数玩乐活动都是尝试回答这样的问题：</p><ul><li><p>当我转动把手时会发生什么？</p></li><li><p>我们能击败这支队伍吗？</p></li><li><p>我能把这些黏土做成什么？</p></li><li><p>我能跳神多少次？</p></li><li><p>完成这个关卡后会发生什么？</p></li></ul>        <h3 id="6号透镜：好奇心"   >          <a href="#6号透镜：好奇心" class="heading-link"><i class="fas fa-link"></i></a><a href="#6号透镜：好奇心" class="headerlink" title="6号透镜：好奇心"></a>6号透镜：好奇心</h3>      <ul><li>我的游戏给玩家的大脑提出了怎样的问题？</li><li>我正在做哪些努力让他们在意这些问题？</li><li>我能做什么来使他们提出更多的问题？</li></ul>        <h3 id="7号透镜：内生价值"   >          <a href="#7号透镜：内生价值" class="heading-link"><i class="fas fa-link"></i></a><a href="#7号透镜：内生价值" class="headerlink" title="7号透镜：内生价值"></a>7号透镜：内生价值</h3>      <ul><li>在我的游戏中哪些东西对玩家很有价值？</li><li>怎样让这些东西对玩家更有价值？</li><li>游戏中的价值与玩家的动机之间有怎样的关系？</li></ul>        <h3 id="8号透镜：解决的问题"   >          <a href="#8号透镜：解决的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#8号透镜：解决的问题" class="headerlink" title="8号透镜：解决的问题"></a>8号透镜：解决的问题</h3>      <ul><li>我的游戏要求玩家解决哪些问题？</li><li>是否有一些隐藏的问题作为玩法的一部分出现？</li><li>在我的游戏中，怎样产生新的问题来对玩家保持吸引力？</li></ul>        <h2 id="元素"   >          <a href="#元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#元素" class="headerlink" title="元素"></a>元素</h2>              <h3 id="9号透镜：四种元素"   >          <a href="#9号透镜：四种元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#9号透镜：四种元素" class="headerlink" title="9号透镜：四种元素"></a>9号透镜：四种元素</h3>      <p>四种基本元素：</p><pre><code>* 右脑元素：美学，故事* 左脑元素：机制，技术</code></pre>        <h3 id="10号透镜：全息设计"   >          <a href="#10号透镜：全息设计" class="heading-link"><i class="fas fa-link"></i></a><a href="#10号透镜：全息设计" class="headerlink" title="10号透镜：全息设计"></a>10号透镜：全息设计</h3>      <p>四种元素和玩家体验，以及联系方式。</p><ul><li>游戏中的哪一种元素产生了令人享受的体验？</li><li>游戏中的哪一种元素会让玩家在体验中分心？</li><li>怎样改变游戏元素来提高游戏体验？</li></ul>        <h2 id="主题"   >          <a href="#主题" class="heading-link"><i class="fas fa-link"></i></a><a href="#主题" class="headerlink" title="主题"></a>主题</h2>              <h3 id="11号透镜：统一"   >          <a href="#11号透镜：统一" class="heading-link"><i class="fas fa-link"></i></a><a href="#11号透镜：统一" class="headerlink" title="11号透镜：统一"></a>11号透镜：统一</h3>      <ul><li>我的主题是什么？</li><li>我已经采用了所有方法来强化这个主题吗？</li></ul>        <h3 id="12号透镜：共鸣"   >          <a href="#12号透镜：共鸣" class="heading-link"><i class="fas fa-link"></i></a><a href="#12号透镜：共鸣" class="headerlink" title="12号透镜：共鸣"></a>12号透镜：共鸣</h3>      <ul><li>在我的游戏中，有哪些有力的或者特殊的元素？</li><li>我的游戏描述给他人时，那些创意真的能让他们兴奋吗？</li><li>如果没有任何限制，这个游戏将会变成什么样？</li><li>我对这个游戏的方向有特定的直觉，是什么在驱动这种直觉呢？</li></ul>        <h2 id="灵感"   >          <a href="#灵感" class="heading-link"><i class="fas fa-link"></i></a><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h2>      <blockquote><p>当你知道如何倾听时，每个人都可以成为大师。</p><p>​——拉姆·达斯</p></blockquote>        <h3 id="13号透镜：无尽灵感"   >          <a href="#13号透镜：无尽灵感" class="heading-link"><i class="fas fa-link"></i></a><a href="#13号透镜：无尽灵感" class="headerlink" title="13号透镜：无尽灵感"></a>13号透镜：无尽灵感</h3>      <ul><li>我的生活中有怎样的体验想要与他人分享？</li><li>有哪些技巧可以让我捕捉到体验的本质，并把它纳入我的游戏中？</li></ul>        <h2 id="约束"   >          <a href="#约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#约束" class="headerlink" title="约束"></a>约束</h2>              <h3 id="14号透镜：问题陈述"   >          <a href="#14号透镜：问题陈述" class="heading-link"><i class="fas fa-link"></i></a><a href="#14号透镜：问题陈述" class="headerlink" title="14号透镜：问题陈述"></a>14号透镜：问题陈述</h3>      <ul><li>我真正想要解决什么问题？</li><li>我是否做过一些与真正目标无关的游戏设定？</li><li>游戏是不是这个问题最好的解决方案？</li><li>我将怎样分辨出问题是否已经解决了？</li></ul>        <h2 id="头脑风暴"   >          <a href="#头脑风暴" class="heading-link"><i class="fas fa-link"></i></a><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h2>      <ul><li>记下答案</li><li>写在纸上</li><li>草图</li><li>玩具</li><li>改变视角</li><li>沉浸你自己</li><li>开几个玩笑</li><li>不要节约材料</li><li>写在墙上（白板）（多人）</li><li>空间记忆</li><li>记下所有东西</li><li>为你的清单计数</li><li>颠覆你的设定</li><li>组合和搭配分类</li><li>自言自语（独自）</li><li>找一个搭档</li></ul>        <h3 id="15号透镜：八项测试"   >          <a href="#15号透镜：八项测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#15号透镜：八项测试" class="headerlink" title="15号透镜：八项测试"></a>15号透镜：八项测试</h3>      <ul><li>艺术冲动：作为设计师，问自己这个游戏是否“感觉不错”。</li><li>人群特征：这个设计是否符合目标受众？</li><li>体验设计：游戏是否经得起这些透镜的检验？</li><li>革新：这个设计是否与众不同？</li><li>商业和市场：这个游戏能盈利吗？</li><li>工程：这个游戏在技术上是否具备可行性？</li><li>社区：这个游戏达到我们的社区&#x2F;社交目标了吗？</li><li>玩法测试：游戏测试者是否享受这个游戏？</li></ul>        <h2 id="迭代"   >          <a href="#迭代" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2>              <h3 id="软件开发螺旋模型"   >          <a href="#软件开发螺旋模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#软件开发螺旋模型" class="headerlink" title="软件开发螺旋模型"></a>软件开发螺旋模型</h3>      <p>包含三个理念：风险评估，原型，迭代</p><pre><code>* 想出一个基础设计* 找出设计中的最大风险* 建立原型消除这些风险* 测试这个原型* 基于你从原型中得出的结论做一个更详细的设计* 回到第二步</code></pre><p><img src="/../images/image-20240424084946656.png" alt="image-20240424084946656"></p>        <h3 id="敏捷宣言"   >          <a href="#敏捷宣言" class="heading-link"><i class="fas fa-link"></i></a><a href="#敏捷宣言" class="headerlink" title="敏捷宣言"></a>敏捷宣言</h3>      <p>2001年由一群软件工程师提出。</p><ol><li>我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。</li><li>欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。</li><li>经常地交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期。</li><li>业务人员和开发人员必须相互合作，项目中的每一天都不例外。</li><li>激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li><li>不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。</li><li>可工作的软件是进度的首要度量标准。</li><li>敏捷过程倡导可持续开发。责任人，开发人员和用户要能够共同维持其步调稳定延续。</li><li>坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。</li><li>以简洁为本，它是极力减少不必要工作量的艺术。</li><li>最好的架构，需求和设计出自组织团队。</li><li>团队定期地反思如何能提高成效，并依此调整自身的举止表现。</li></ol><p>敏捷开发的核心元素：</p><ul><li>灵活的目标：迅速适应新的的创意和信息，有计划地改变计划。</li><li>优先级列表：给需要完成的特性定优先级，从顶端的开始完成。</li><li>冲刺：制定多个短期目标，更多的DDL意味着更多的工作被完成。</li><li>争分夺秒会议：10~15分钟的短会，每个成员只解释三件事：昨天完成了什么，今天计划完成什么，面临的问题。会议后与团队成员一对一解决问题。</li><li>演示日：每个冲刺阶段的最后，团队观看和测试工作结果，并从新的基准开始工作，分析风险，确定计划。</li></ul>        <h2 id="风险评估与原型设计"   >          <a href="#风险评估与原型设计" class="heading-link"><i class="fas fa-link"></i></a><a href="#风险评估与原型设计" class="headerlink" title="风险评估与原型设计"></a>风险评估与原型设计</h2>      <p>152</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;真正的发现之旅不在于寻找新风景，而是拥有新眼光。&lt;br&gt;——马塞尔·普鲁斯特&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;游戏设计师最终关注的是创造&lt;strong&gt;体验&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    <category term="读书笔记" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>游戏技术笔记</title>
    <link href="https://lzmustb.github.io/2024/03/23/my-game-notes/"/>
    <id>https://lzmustb.github.io/2024/03/23/my-game-notes/</id>
    <published>2024-03-23T02:46:43.000Z</published>
    <updated>2024-04-23T08:02:30.284Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="游戏技术笔记"   >          <a href="#游戏技术笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏技术笔记" class="headerlink" title="游戏技术笔记"></a>游戏技术笔记</h1>              <h2 id="多人实时对战"   >          <a href="#多人实时对战" class="heading-link"><i class="fas fa-link"></i></a><a href="#多人实时对战" class="headerlink" title="多人实时对战"></a>多人实时对战</h2>      <div class="table-container"><table><thead><tr><th></th><th>传输内容</th><th>逻辑计算</th><th>断线重连</th><th>回放&#x2F;观战</th></tr></thead><tbody><tr><td>帧同步</td><td>操作</td><td>客户端</td><td>追历史帧</td><td>天然支持</td></tr><tr><td>状态同步</td><td>结果</td><td>服务器</td><td>下次同步</td><td>另外实现</td></tr></tbody></table></div><p>不是非此即彼的二选一，最终同步的都是<strong>数据状态</strong>。</p><span id="more"></span>        <h3 id="同步策略"   >          <a href="#同步策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h3>      <p>在有延迟的情况下，给玩家无延迟的体验</p><ul><li>慢节奏（简单）：<ul><li>回合制游戏</li><li>表现层面优化，及时反馈</li></ul></li><li>快节奏：<ul><li>无冲突（简单）</li><li>有冲突（困难）</li></ul></li></ul><p>快节奏有冲突的同步策略：</p><ul><li>预测：服务端同步前先更新客户端的变化</li><li>和解：</li><li>插值：</li></ul>        <h3 id="io小游戏举例"   >          <a href="#io小游戏举例" class="heading-link"><i class="fas fa-link"></i></a><a href="#io小游戏举例" class="headerlink" title="io小游戏举例"></a>io小游戏举例</h3>      <p>移动+击晕其他玩家的小游戏：</p><ul><li>快节奏</li><li>有冲突：被其他人击晕后停止移动</li><li>操作及时反馈：帧同步</li><li>进入游戏（连接）：状态同步</li></ul><p><img src="/../images/image-20240323121914743.png" alt="image-20240323121914743"></p>        <h2 id="3D数学"   >          <a href="#3D数学" class="heading-link"><i class="fas fa-link"></i></a><a href="#3D数学" class="headerlink" title="3D数学"></a>3D数学</h2>              <h2 id="破晓传奇战斗系统"   >          <a href="#破晓传奇战斗系统" class="heading-link"><i class="fas fa-link"></i></a><a href="#破晓传奇战斗系统" class="headerlink" title="破晓传奇战斗系统"></a>破晓传奇战斗系统</h2>      <p><img src="/../images/image-20240323153623312.png" alt="image-20240323153623312"></p><p><img src="/../images/image-20240323153839761.png" alt="image-20240323153839761"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;游戏技术笔记&quot;   &gt;
          &lt;a href=&quot;#游戏技术笔记&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#游戏技术笔记&quot; class=&quot;headerlink&quot; title=&quot;游戏技术笔记&quot;&gt;&lt;/a&gt;游戏技术笔记&lt;/h1&gt;
      
        &lt;h2 id=&quot;多人实时对战&quot;   &gt;
          &lt;a href=&quot;#多人实时对战&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#多人实时对战&quot; class=&quot;headerlink&quot; title=&quot;多人实时对战&quot;&gt;&lt;/a&gt;多人实时对战&lt;/h2&gt;
      &lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;传输内容&lt;/th&gt;
&lt;th&gt;逻辑计算&lt;/th&gt;
&lt;th&gt;断线重连&lt;/th&gt;
&lt;th&gt;回放&amp;#x2F;观战&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;帧同步&lt;/td&gt;
&lt;td&gt;操作&lt;/td&gt;
&lt;td&gt;客户端&lt;/td&gt;
&lt;td&gt;追历史帧&lt;/td&gt;
&lt;td&gt;天然支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;状态同步&lt;/td&gt;
&lt;td&gt;结果&lt;/td&gt;
&lt;td&gt;服务器&lt;/td&gt;
&lt;td&gt;下次同步&lt;/td&gt;
&lt;td&gt;另外实现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;不是非此即彼的二选一，最终同步的都是&lt;strong&gt;数据状态&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>MASM X86 汇编笔记</title>
    <link href="https://lzmustb.github.io/2023/11/28/MASMx86%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/"/>
    <id>https://lzmustb.github.io/2023/11/28/MASMx86%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-28T01:00:28.000Z</published>
    <updated>2024-04-23T08:05:33.043Z</updated>
    
    <content type="html"><![CDATA[<p>汇编课的笔记</p><span id="more"></span>        <h2 id="关于DOS-INT-21H-x2F-AH-x3D-0ah"   >          <a href="#关于DOS-INT-21H-x2F-AH-x3D-0ah" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于DOS-INT-21H-x2F-AH-x3D-0ah" class="headerlink" title="关于DOS INT 21H&#x2F;AH&#x3D;0ah"></a>关于DOS INT 21H&#x2F;AH&#x3D;0ah</h2>      <p>该功能为键盘输入缓冲区</p><p>使用：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">buffer db 20 DUP(&#x27;$&#x27;)</span><br><span class="line">ends data</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">mov ax, data </span><br><span class="line">mov ds, ax;初始化数据段 </span><br><span class="line"></span><br><span class="line">mov ah,0ah</span><br><span class="line">mov dx,offset buffer</span><br><span class="line">int 21h;输入缓冲区</span><br><span class="line"></span><br><span class="line">mov      ah,9</span><br><span class="line">    lea      dx,buffer+2</span><br><span class="line">    int      21h;输出缓冲区</span><br><span class="line">ends</span><br></pre></td></tr></table></div></figure><p>注意点：</p><p>下图7100h~7113h为buffer的20个空间</p><p>当输入“helloworld”时，可以看到输入为7101h~710ch</p><p>总结：</p><ul><li><p>真正用户输入的内容从dx+2开始，</p></li><li><p>输入的结尾为CRET（回车符）</p></li><li><p>缓冲区的前两个字符为$和随机值</p></li><li><p>由于输出(AH&#x3D;9)要靠‘$’判断字符串结束，因此设置缓冲区大小应不小于<strong>N+4</strong>（N为你需要输入的字符数）</p></li></ul><p><img src="E:\BlogData\source\images\image-20231128205600204.png" alt="image-20231128205600204"></p>        <h2 id="宏定义（函数定义）"   >          <a href="#宏定义（函数定义）" class="heading-link"><i class="fas fa-link"></i></a><a href="#宏定义（函数定义）" class="headerlink" title="宏定义（函数定义）"></a>宏定义（函数定义）</h2>      <p>使用<code>macro</code>关键字</p><p>※在macro中使用跳转时，需声明<code>local label1，label2</code></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">;输出换行符的宏指令</span><br><span class="line">nextline macro [param1,param2,param3...]</span><br><span class="line">          mov ah,9</span><br><span class="line">          lea dx,cret</span><br><span class="line">          int 21h</span><br><span class="line">nextline endm</span><br><span class="line">;调用：</span><br><span class="line">...</span><br><span class="line">nextline</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">;数字转换成ASCII码并输出：</span><br><span class="line">num_to_asc macro num </span><br><span class="line">;local label1，label2</span><br><span class="line">    mov al,num</span><br><span class="line">    mov ah,0h</span><br><span class="line">    aam</span><br><span class="line">    mov bx,ax</span><br><span class="line">    add bl,30h</span><br><span class="line">    add bh,30h         </span><br><span class="line">    mov ah,02h  </span><br><span class="line">    mov dl,bh</span><br><span class="line">    int 21h   </span><br><span class="line">    mov dl,bl</span><br><span class="line">    int 21h</span><br><span class="line">num_to_asc endm  </span><br></pre></td></tr></table></div></figure>        <h2 id="LOOP"   >          <a href="#LOOP" class="heading-link"><i class="fas fa-link"></i></a><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h2>      <p>格式：<code>LOOP loop标号</code></p><p>执行loop指令时会有隐式的两步操作：</p><pre><code>* (cx)=(cx)-1* 判断(cx)的值为ZERO则停止循环</code></pre>        <h2 id="移位指令"   >          <a href="#移位指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h2>      <ul><li>逻辑移位(无符号)：补0<ul><li><code>SHL</code>,<code>SHR</code></li></ul></li><li>算术移位：最高位不变<ul><li><code>SAL</code>,<code>SAR</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;汇编课的笔记&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Javascript与前端算法</title>
    <link href="https://lzmustb.github.io/2023/09/08/my-javascript-note/"/>
    <id>https://lzmustb.github.io/2023/09/08/my-javascript-note/</id>
    <published>2023-09-08T01:00:28.000Z</published>
    <updated>2023-09-24T01:23:32.296Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Javascript"   >          <a href="#Javascript" class="heading-link"><i class="fas fa-link"></i></a><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1>              <h2 id="ES6"   >          <a href="#ES6" class="heading-link"><i class="fas fa-link"></i></a><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2>              <h3 id="Map"   >          <a href="#Map" class="heading-link"><i class="fas fa-link"></i></a><a href="#Map" class="headerlink" title="Map"></a>Map</h3>      <p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。</p><p>为了解决这个问题，ES6 提供了 Map 数据结构。它也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p><p>也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“<strong>值—值</strong>”的对应，是一种更完善的 Hash 结构实现。</p><span id="more"></span><ul><li>实例化</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">//初始化map，通过数组表示键值对</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">   [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>],</span><br><span class="line">   [<span class="string">&#x27;age&#x27;</span>,<span class="number">16</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></div></figure><ul><li>方法</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="property">size</span> <span class="comment">//2</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//true</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//&#x27;Jack&#x27;</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;value&#x27;</span>); <span class="comment">//返回对象本身，可链式调用</span></span><br><span class="line">map.<span class="title function_">delete</span>(key); <span class="comment">//删除成功返回true</span></span><br><span class="line">map.<span class="title function_">clear</span>(); <span class="comment">//清除所有成员，无返回值</span></span><br><span class="line"></span><br><span class="line">&lt;!--遍历:--&gt;</span><br><span class="line">map.<span class="title function_">keys</span>(); <span class="comment">//返回键名的遍历器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">values</span>(); <span class="comment">//返回键值的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">entries</span>(); <span class="comment">//返回所有成员的遍历器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--与数组结合:--&gt;</span><br><span class="line">[...map.<span class="title function_">keys</span>()];</span><br><span class="line">[...map.<span class="title function_">values</span>()];</span><br><span class="line">[...map];</span><br><span class="line">[...map.<span class="title function_">entries</span>()];</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组filter创建新map</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">  [...map0].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></div></figure><p>※注意点</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有对同一个对象的引用，Map结构才将其视为同一个键</span></span><br><span class="line">map.<span class="title function_">set</span>([<span class="string">&#x27;a&#x27;</span>], <span class="number">555</span>);</span><br><span class="line">map.<span class="title function_">get</span>([<span class="string">&#x27;a&#x27;</span>]) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同样的值的两个实例，在 Map 结构中被视为两个键</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">map.<span class="title function_">set</span>(k1,<span class="number">1</span>);<span class="comment">//两者不同</span></span><br><span class="line">map.<span class="title function_">set</span>(k2,<span class="number">2</span>);<span class="comment">//两者不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined和null是两个键</span></span><br><span class="line"><span class="comment">//NaN为同一个键</span></span><br><span class="line"><span class="comment">//0，-0为同一个键</span></span><br></pre></td></tr></table></div></figure>        <h3 id="Class"   >          <a href="#Class" class="heading-link"><i class="fas fa-link"></i></a><a href="#Class" class="headerlink" title="Class"></a>Class</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.基本类语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"> name , age </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;,今年&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&#x27;岁&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会走路&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">say</span>(); <span class="comment">//成员方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">walk</span>(); <span class="comment">//静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.原型继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,age,gender</span>)&#123;</span><br><span class="line">        <span class="comment">//通过super可以调用父类构造器或方法</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span>=gender;</span><br><span class="line">        <span class="comment">//super作为对象时，指向父类的原型对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">func</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ES6中规定，子类的构造函数必须执行一次super函数。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.getter,setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用get和set关键字可设置存值函数和取值函数</span></span><br><span class="line"><span class="comment">//拦截该属性的存取行为</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="property">prop</span> = <span class="number">666</span>; <span class="comment">//setter: 666</span></span><br></pre></td></tr></table></div></figure><p>虽然引入了关键字，但ES6中并没有真的引入类这个概念，通过class定义的仍然是函数。class仅仅是通过更简单直观的语法去实现原型链继承。这种对语言功能没有影响、但是给程序员带来方便的新语法，被称为<strong>语法糖</strong>。</p><p>在 constructor 里面，super 的用法是 super()。它相当于一个函数，调用它等于调用父类的 constructor 。</p><p>但在普通方法里面，super 的用法是 super.prop 或者 super.method()，它相当于一个指向对象的 [[Prototype]] 的属性。</p>        <h2 id="前端算法"   >          <a href="#前端算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#前端算法" class="headerlink" title="前端算法"></a>前端算法</h2>              <h3 id="链表"   >          <a href="#链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#链表" class="headerlink" title="链表"></a>链表</h3>              <h4 id="双指针"   >          <a href="#双指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4>      <p>判断链表有无成环</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> slow = head;</span><br><span class="line"><span class="keyword">let</span> fast = head;</span><br><span class="line"><span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span>)&#123;</span><br><span class="line">fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">slow = slow.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">//快慢指针相遇说明链表成环</span></span><br><span class="line"><span class="keyword">if</span>(slow===fast) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="LRUcache"   >          <a href="#LRUcache" class="heading-link"><i class="fas fa-link"></i></a><a href="#LRUcache" class="headerlink" title="LRUcache"></a>LRUcache</h4>      <p>least recently use cache</p><p>Vue的<code>&lt;keep-alive&gt;</code>组件使用了<strong>LRUcache（最少最近使用缓存）</strong>。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">capacity</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxSize</span> = capacity; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key</span>)&#123;</span><br><span class="line">        <span class="comment">//若key对应的value存在，在返回之前将其排在队尾</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key))&#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key,tmp);</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">put</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key))&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span>&gt;=<span class="variable language_">this</span>.<span class="property">maxSize</span>)&#123;</span><br><span class="line">            <span class="comment">//如果新增元素将超过缓存容量，淘汰队首元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="位运算"   >          <a href="#位运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3>              <h4 id="组合权限认证"   >          <a href="#组合权限认证" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合权限认证" class="headerlink" title="组合权限认证"></a>组合权限认证</h4>      <ul><li>标记：通过二进制位标记某个属性</li><li>授权：<strong>或运算</strong>授予一个变量多个属性</li><li>校验：<strong>与运算</strong>判断有无该属性</li><li>删除：<strong>异或运算</strong>删除一个属性</li></ul><p>vue中判断虚拟DOM类型</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum <span class="title class_">ShapeFlags</span>&#123;</span><br><span class="line"><span class="variable constant_">ELEMENT</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="variable constant_">FUNCTIONAL_COMPONENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="variable constant_">STATEFUL_COMPONENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable constant_">COMPONENT</span> = <span class="title class_">ShapeFlags</span>.<span class="property">STATEFUL_COMPONENT</span> | <span class="title class_">ShapeFlags</span>.<span class="property">FUNCTIONAL_COMPONENT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>判断一个数是否为2的整数次幂</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n&gt;<span class="number">0</span> </span><br><span class="line">&amp;&amp;</span><br><span class="line">n &amp; (n-<span class="number">1</span>) === <span class="number">0</span> </span><br></pre></td></tr></table></div></figure><p>异或去重</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a^a^b^b^c <span class="comment">//c</span></span><br></pre></td></tr></table></div></figure>        <h3 id="树结构"   >          <a href="#树结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h3>      <p>递归翻转</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">invertTree=<span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line">[root.<span class="property">left</span>,root.<span class="property">right</span>]=[<span class="title function_">invertTree</span>(root.<span class="property">right</span>),<span class="title function_">invertTree</span>(root.<span class="property">left</span>)];</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="栈"   >          <a href="#栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈" class="headerlink" title="栈"></a>栈</h3>      <p>判断html标签是否闭合，简化路径</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack=[];</span><br><span class="line"><span class="keyword">let</span> paths=path.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;paths.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> p = paths[i];</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="string">&#x27;..&#x27;</span>)&#123;</span><br><span class="line">        spack.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p &amp;&amp; p!==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">     stack.<span class="title function_">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span>+stack.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="排序"   >          <a href="#排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#排序" class="headerlink" title="排序"></a>排序</h3>              <h4 id="快速排序"   >          <a href="#快速排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4>      <p> 每次将数组二分为<code>比x小的数组</code>和<code>比x大的数组</code>，递归至数组大小为1</p><p>O(n*logn）</p>        <h3 id="leftPad"   >          <a href="#leftPad" class="heading-link"><i class="fas fa-link"></i></a><a href="#leftPad" class="headerlink" title="leftPad"></a>leftPad</h3>      <p>二分优化</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">leftpad</span>(<span class="params">str,length,ch</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> len = length - str.<span class="property">length</span> ;</span><br><span class="line">    total = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &amp; <span class="number">1</span>)&#123; <span class="comment">//相当于len%2==1</span></span><br><span class="line">            total+=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> total+str</span><br><span class="line">        &#125;</span><br><span class="line">        ch+=ch;</span><br><span class="line">        len=len&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Javascript&quot;   &gt;
          &lt;a href=&quot;#Javascript&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h1&gt;
      
        &lt;h2 id=&quot;ES6&quot;   &gt;
          &lt;a href=&quot;#ES6&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;
      
        &lt;h3 id=&quot;Map&quot;   &gt;
          &lt;a href=&quot;#Map&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;
      &lt;p&gt;JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，ES6 提供了 Map 数据结构。它也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。&lt;/p&gt;
&lt;p&gt;也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“&lt;strong&gt;值—值&lt;/strong&gt;”的对应，是一种更完善的 Hash 结构实现。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基本乐理与声音设计</title>
    <link href="https://lzmustb.github.io/2023/07/19/my-music-note/"/>
    <id>https://lzmustb.github.io/2023/07/19/my-music-note/</id>
    <published>2023-07-19T14:52:54.000Z</published>
    <updated>2024-03-23T07:50:10.057Z</updated>
    
    <content type="html"><![CDATA[<p>音乐学习相关的笔记</p><span id="more"></span>        <h1 id="基本乐理"   >          <a href="#基本乐理" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本乐理" class="headerlink" title="基本乐理"></a>基本乐理</h1>              <h3 id="泛音-倍音，倍频"   >          <a href="#泛音-倍音，倍频" class="heading-link"><i class="fas fa-link"></i></a><a href="#泛音-倍音，倍频" class="headerlink" title="泛音(倍音，倍频)"></a>泛音(倍音，倍频)</h3>      <p><img src="/../images/image-20230901164632960.png" alt="image-20230901164632960"></p><p>整数次谐波&#x3D;&gt;基音，倍音<br><img src="/../images/image-20230901164700405.png" alt="image-20230901164700405"></p><p>和弦和单音在物理学意义上没有区别<br><img src="/../images/image-20230901164715003.png" alt="image-20230901164715003"></p>        <h2 id="音乐基础"   >          <a href="#音乐基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#音乐基础" class="headerlink" title="音乐基础"></a>音乐基础</h2>              <h3 id="三要素"   >          <a href="#三要素" class="heading-link"><i class="fas fa-link"></i></a><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3>      <ul><li>节奏</li><li>旋律</li><li>和声</li></ul>        <h3 id="音程-interval"   >          <a href="#音程-interval" class="heading-link"><i class="fas fa-link"></i></a><a href="#音程-interval" class="headerlink" title="音程-interval"></a>音程-interval</h3>      <div class="table-container"><table><thead><tr><th><strong>度数名</strong></th><th><strong>英語</strong></th><th><strong>例（ドの場合※）</strong></th><th><strong>半音数</strong></th><th><strong>テンションとして見た場合</strong></th></tr></thead><tbody><tr><td><strong>完全1度</strong></td><td>P1&#x2F;d2</td><td>ド（同じ音）</td><td>0</td><td></td></tr><tr><td>増1度&#x2F;短2度</td><td>m2&#x2F;A1</td><td>ド♯&#x2F;レ♭</td><td>1</td><td>♭9th</td></tr><tr><td>長2度&#x2F;減3度</td><td>M2&#x2F;d3</td><td>レ&#x2F;ミ♭♭</td><td>2</td><td>9th</td></tr><tr><td>増2度&#x2F;短3度</td><td>m3&#x2F;A2</td><td>レ#&#x2F;ミ♭</td><td>3</td><td>♯9th</td></tr><tr><td>長3度&#x2F;減4度</td><td>M3&#x2F;d4</td><td>ミ&#x2F;ファ♭</td><td>4</td><td></td></tr><tr><td><strong>完全4度</strong>&#x2F;増3度</td><td>P4&#x2F;A3</td><td>ファ&#x2F;ミ♯</td><td>5</td><td>11th</td></tr><tr><td>増4度&#x2F;減5度</td><td>A5&#x2F;d5</td><td>ファ♯&#x2F;ソ♭</td><td>6</td><td>♯11th</td></tr><tr><td><strong>完全5度</strong></td><td>P5</td><td>ソ</td><td>7</td><td></td></tr><tr><td>増5度&#x2F;短6度</td><td>A5&#x2F;m6</td><td>ソ♯&#x2F;ラ♭</td><td>8</td><td>♭13th</td></tr><tr><td>長6度&#x2F;減7度</td><td>M6&#x2F;d7</td><td>ラ&#x2F;シ♭♭</td><td>9</td><td>13th</td></tr><tr><td>短7度</td><td>m7</td><td>ラ♯&#x2F;シ♭</td><td>10</td><td></td></tr><tr><td>長7度</td><td>M7</td><td>シ</td><td>11</td><td></td></tr><tr><td><strong>完全8度</strong></td><td>P8</td><td>ド（オクターブ上）</td><td>12</td><td></td></tr></tbody></table></div><ul><li><strong>P</strong>…パーフェクト（完全）</li><li><strong>M</strong>…メジャー（長）</li><li><strong>m</strong>…マイナー（短）</li><li><strong>A</strong>…オーグメンテッド（増）</li><li><strong>d</strong>…ディミニッシュト（減）</li></ul><p>异名同音(×为##)：<br><img src="/../images/image-20230901164732238.png" alt="image-20230901164732238"></p>        <h3 id="大小调"   >          <a href="#大小调" class="heading-link"><i class="fas fa-link"></i></a><a href="#大小调" class="headerlink" title="大小调"></a>大小调</h3>      <p>与大调有关的三个小调：（只按自然小调标升降号）</p><ul><li>自然小调：组成音完全相同（C大调&#x2F;A小调）</li><li>和声小调：自然小调升第七个音</li><li>旋律小调：下行自然小调，上行自然小调升六七音</li></ul><p>12大调，48大小调</p>        <h3 id="冠音"   >          <a href="#冠音" class="heading-link"><i class="fas fa-link"></i></a><a href="#冠音" class="headerlink" title="冠音"></a>冠音</h3>      <p>最高音，大部分情况下是旋律音</p><p><img src="/../images/image-20230829115933572.png" alt="image-20230829115933572"></p><p><img src="/../images/image-20230901164746538.png" alt="image-20230901164746538"></p>        <h3 id="五度圈"   >          <a href="#五度圈" class="heading-link"><i class="fas fa-link"></i></a><a href="#五度圈" class="headerlink" title="五度圈"></a>五度圈</h3>      <p><img src="/../images/co5th.png" alt="PNG"></p><p>查看基调和弦：以A大调为例，由框内的六个音组成<br>    <img src="/../images/1694867599892.png" alt="1694867599892"></p>        <h2 id="和弦"   >          <a href="#和弦" class="heading-link"><i class="fas fa-link"></i></a><a href="#和弦" class="headerlink" title="和弦"></a>和弦</h2>      <p>五音经常可以被省略，通常不影响和弦判断</p><p>三音和七音不能省</p>        <h3 id="钢琴指法"   >          <a href="#钢琴指法" class="heading-link"><i class="fas fa-link"></i></a><a href="#钢琴指法" class="headerlink" title="钢琴指法"></a>钢琴指法</h3>      <ul><li>m：三音左移半音</li><li>♯：全部右移半音</li><li>♭：全部左移半音</li><li>dim：三音，五音左移半音</li><li>sus4：三音右移半音（挂4和弦）</li><li>aug：五音右移半音</li><li>-5&#x2F;b5：五音左移半音（flat five）</li><li>6：七音在五音的右侧两个半音位置</li><li>7：七音在五音的右侧3个半音位置</li><li>9：短七音+九音</li><li>M7（Δ7）：七音在五音的右侧4个半音位置</li><li>add9：七音在根音的右侧两个半音位</li></ul>        <h3 id="cadence-x2F-终止"   >          <a href="#cadence-x2F-终止" class="heading-link"><i class="fas fa-link"></i></a><a href="#cadence-x2F-终止" class="headerlink" title="cadence&#x2F;终止"></a>cadence&#x2F;终止</h3>      <ul><li>Authentic&#x2F;正格终止（Ⅴ→Ⅰ）<ul><li>perfect authentic（根音&#x3D;和弦最低音&amp;和弦最高声部为Tonic）</li><li>imperfect authentic</li></ul></li><li>half&#x2F;半终止（→Ⅴ）</li><li>plagal&#x2F;变格终止（Ⅳ→Ⅰ）</li><li>deceptive&#x2F;伪终止（Ⅴ→Ⅵm）</li></ul>        <h3 id="和声机能"   >          <a href="#和声机能" class="heading-link"><i class="fas fa-link"></i></a><a href="#和声机能" class="headerlink" title="和声机能"></a>和声机能</h3>      <p><img src="/../images/1694871651941.png" alt="1694871651941"></p><p><img src="/../images/1694872296729.png" alt="1694872296729"></p><p>Ⅲm在有些时候会有<strong>T</strong>的作用</p><p><img src="/../images/image-20230917084451373.png" alt="image-20230917084451373"></p>        <h3 id="和声韵律-Harmonic-rhythm"   >          <a href="#和声韵律-Harmonic-rhythm" class="heading-link"><i class="fas fa-link"></i></a><a href="#和声韵律-Harmonic-rhythm" class="headerlink" title="和声韵律(Harmonic rhythm)"></a>和声韵律(Harmonic rhythm)</h3>              <h3 id="常见和声"   >          <a href="#常见和声" class="heading-link"><i class="fas fa-link"></i></a><a href="#常见和声" class="headerlink" title="常见和声"></a>常见和声</h3>      <ul><li>丸之内&#x2F;just the two of us</li></ul><p>$$<br>ⅣM7-Ⅲ7-Ⅵm7-Ⅰ7<br>$$</p>        <h2 id="人声的范围"   >          <a href="#人声的范围" class="heading-link"><i class="fas fa-link"></i></a><a href="#人声的范围" class="headerlink" title="人声的范围"></a>人声的范围</h2>      <p><img src="/../images/image-20230903194409225.png" alt="image-20230903194409225"></p>        <h2 id="转调"   >          <a href="#转调" class="heading-link"><i class="fas fa-link"></i></a><a href="#转调" class="headerlink" title="转调"></a>转调</h2>      <p><img src="/../images/image-20230903194746090.png" alt="image-20230903194746090"></p>        <h2 id="旋律"   >          <a href="#旋律" class="heading-link"><i class="fas fa-link"></i></a><a href="#旋律" class="headerlink" title="旋律"></a>旋律</h2>              <h3 id="五音音阶-Pentatonic"   >          <a href="#五音音阶-Pentatonic" class="heading-link"><i class="fas fa-link"></i></a><a href="#五音音阶-Pentatonic" class="headerlink" title="五音音阶 Pentatonic"></a>五音音阶 Pentatonic</h3>              <h3 id="注意点"   >          <a href="#注意点" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3>      <p>  <img src="/../images/image-20230903200858730.png" alt="image-20230903200858730"></p>        <h3 id="和弦外音"   >          <a href="#和弦外音" class="heading-link"><i class="fas fa-link"></i></a><a href="#和弦外音" class="headerlink" title="和弦外音"></a>和弦外音</h3>      <ul><li>经过音：两个和弦音之间的音</li><li>相邻音：两个相同的音之间差一个以上相邻的音</li><li>先现音：提前出现下一个和弦的音</li><li>跳脱音</li><li>倚音</li><li>悬挂音suspension&#x2F;retardation</li></ul>        <h3 id="付点-x2F-切分"   >          <a href="#付点-x2F-切分" class="heading-link"><i class="fas fa-link"></i></a><a href="#付点-x2F-切分" class="headerlink" title="付点&#x2F;切分"></a>付点&#x2F;切分</h3>              <h2 id="节奏"   >          <a href="#节奏" class="heading-link"><i class="fas fa-link"></i></a><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h2>              <h3 id="鼓的构成"   >          <a href="#鼓的构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#鼓的构成" class="headerlink" title="鼓的构成"></a>鼓的构成</h3>      <ul><li>Kick</li><li>Hi-Hat：通常是将节奏分的最细的部分，根据Hi-hat的节奏，将节奏类型分为8beat，16beat等</li><li>Snare</li></ul><p>ghost note</p><p><img src="/../images/1694958953650.png" alt="1694958953650"></p>        <h3 id="Syncopation"   >          <a href="#Syncopation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Syncopation" class="headerlink" title="Syncopation"></a>Syncopation</h3>      <p><img src="/../images/image-20230917220432748.png" alt="image-20230917220432748"></p>        <h3 id="Anticipation"   >          <a href="#Anticipation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Anticipation" class="headerlink" title="Anticipation"></a>Anticipation</h3>      <p><img src="/../images/image-20230917221947515.png" alt="image-20230917221947515"></p>        <h1 id="设计声音"   >          <a href="#设计声音" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计声音" class="headerlink" title="设计声音"></a>设计声音</h1>              <h2 id="物理学系统"   >          <a href="#物理学系统" class="heading-link"><i class="fas fa-link"></i></a><a href="#物理学系统" class="headerlink" title="物理学系统"></a>物理学系统</h2>      <ul><li><p>自由度：物体能够运动的方向的数量（三个平移自由度，三个转动自由度）在声音模型中通常假设仅有一个自由度</p></li><li><p>激励者：把能量带给系统的物体</p></li><li><p>受激：产生振动的物体</p><p>在声音的产生过程中，激励者和受激缺一不可</p></li></ul>        <h3 id="材料"   >          <a href="#材料" class="heading-link"><i class="fas fa-link"></i></a><a href="#材料" class="headerlink" title="材料"></a>材料</h3>      <ul><li>质量</li><li>弹性&#x2F;塑性</li><li>硬度</li><li>密度</li><li>结构与强度</li></ul><p>材料对声音的影响主要体现在质量和弹性两个方面。不同状态(固液气)的物体对声音的传导能力不同</p><p>体积模量K（E：杨氏模量；v：泊松比）：<br>$$<br>K&#x3D;\frac{E}{3(1-2v)}<br>$$</p>        <h3 id="波"   >          <a href="#波" class="heading-link"><i class="fas fa-link"></i></a><a href="#波" class="headerlink" title="波"></a>波</h3>      <ul><li><p>横波&#x2F;纵波&#x2F;扭转波</p></li><li><p>速度（质点速度，相速度，群速度）</p></li><li><p>幅度</p></li></ul><p><strong>声速</strong>（相速度phase velocity）c近似公式（K：杨氏模量；ρ：密度）：<br>$$<br>c&#x3D;\sqrt{\frac{K}{ρ}}<br>$$</p><p>$$<br>c&#x3D;fλ<br>$$</p><p><strong>群速度</strong>：取决于介质属性的常量，通常与相速度相等。当相速度和群速度不完全相等时，该介质弥散（dispersive），如水波冲刷海岸的现象。</p>        <h3 id="界面"   >          <a href="#界面" class="heading-link"><i class="fas fa-link"></i></a><a href="#界面" class="headerlink" title="界面"></a>界面</h3>      <p>当界面的两种物质相差极大时，声音中有很大一部分会被反射，很小一部分会传导。对于水和空气，这个比率约为99%。</p><p>入射角会影响反射波的强度，在布鲁斯特角，反射波会消失。</p><p><strong>固体界面处的弯曲波相位</strong>：对于坚硬界面的材料，波会反相反射；对于弹性界面的材料，波会同相反射。</p><p>反射波与入射波具有相同的波长和波速，但幅度较小。</p><p>被传导的波在新的介质中有新的波长，频率不变。</p><p><strong>驻波</strong>：持续不断的行波与反射波叠加干涉，形成驻波（在吉他中，第一个是基音，后面的是泛音）</p><p><img src="/../images/image-20230901105905563.png" alt="image-20230901105905563"></p>        <h3 id="模拟（analogue）"   >          <a href="#模拟（analogue）" class="heading-link"><i class="fas fa-link"></i></a><a href="#模拟（analogue）" class="headerlink" title="模拟（analogue）"></a>模拟（analogue）</h3>      <p>借由其他类似系统进行推理，达到连续测量的目的。在声音设计中主要考虑“电，力，声”三种系统。</p><ul><li><p>流动：</p><ul><li><p>电学：电流</p></li><li><p>力学：速度</p></li><li><p>声学：体积流动</p><p><img src="/../images/image-20230901115743564.png" alt="image-20230901115743564"></p></li></ul></li><li><p>质量：</p><ul><li><p>电学：电感</p></li><li><p>力学：质量</p></li><li><p>声学：声质量 <em>inertance</em></p><blockquote><p>（流动介质的质量除以波阵面的横截面积）</p></blockquote></li></ul></li><li><p>阻抗：</p><ul><li><p>电学：电阻</p></li><li><p>力学：摩擦</p></li><li><p>声学：粘滞力，介质的耗散属性</p><blockquote><p>（波阵面上的声波压强除以体积速度）</p></blockquote><p><img src="/../images/image-20230901115909642.png" alt="image-20230901115909642"></p></li></ul></li><li><p>容抗</p><ul><li>电学：电容</li><li>力学：柔度，硬度的倒数</li><li>声学：声容，与所施压强的变化相抗的量<br>  <img src="/../images/image-20230901115803986.png" alt="image-20230901115803986"></li></ul></li></ul><p><strong>将被敲打的弦的类比系统</strong>：</p><p><img src="/../images/image-20230901120723041.png" alt="image-20230901120723041"></p><p><strong>对钟和小提琴的entity-action解构</strong>：</p><p><img src="/../images/image-20230901120828572.png" alt="image-20230901120828572"></p>        <h3 id="振动"   >          <a href="#振动" class="heading-link"><i class="fas fa-link"></i></a><a href="#振动" class="headerlink" title="振动"></a>振动</h3>      <p>周期波听起来像有固定的音高，而非周期波听起来很复杂或类似噪声。</p><ul><li><p>弛豫振荡relaxation oscillator</p></li><li><p>简谐振荡</p></li></ul><p>弦的固有频率：(L:长度；T:张力；mu:单位长度质量)<br>$$<br>f&#x3D;\frac{1}{2L}\sqrt{\frac{T}{m_u}}<br>$$<br>简单几何形状的物体大致可以分为两类：能够自由振动的物体，和在张力下的物体。琴弦，鼓皮会以与它们所受张力有关的频率振动。</p>        <h4 id="受激振荡与谐振"   >          <a href="#受激振荡与谐振" class="heading-link"><i class="fas fa-link"></i></a><a href="#受激振荡与谐振" class="headerlink" title="受激振荡与谐振"></a>受激振荡与谐振</h4>      <p>共振系统在不同阻尼下的响应：</p><p><img src="/../images/image-20230901145420644.png" alt="image-20230901145420644"></p><p>将驱动振荡器看作是对能量流动的阻抗，随着驱动频率远离固有频率，能量的转移越来越小。</p><p>受激系统的行为就像是<strong>滤波器(filter)<strong>。当系统阻尼较小时，系统具有</strong>高谐振，窄带宽</strong>的特性，而受到强烈阻尼的系统具有<strong>低谐振，宽带宽</strong>的特性。</p>        <h2 id="声学系统"   >          <a href="#声学系统" class="heading-link"><i class="fas fa-link"></i></a><a href="#声学系统" class="headerlink" title="声学系统"></a>声学系统</h2>      <p>在声学中我们仅考虑<strong>纵波</strong>，总体积的行为。</p><p>空气中的声速方程：<br>$$<br>c&#x3D;\sqrt{\frac{γp}{ρ}}&#x3D;\sqrt{\frac{γRT}{M}}<br>$$<br>R：摩尔气体常数，T：绝对温度，M：摩尔质量</p>        <h3 id="声压级-amp-声强级"   >          <a href="#声压级-amp-声强级" class="heading-link"><i class="fas fa-link"></i></a><a href="#声压级-amp-声强级" class="headerlink" title="声压级&amp;声强级"></a>声压级&amp;声强级</h3>      <p>声压p是单位面积上的一个力，波的峰值声压反比于距离，所以若与声源相距为r，则峰值按1&#x2F;r减少。</p><p>声压级（Sound pressure level）是一个以分贝为单位的比率，设20μN&#x2F;m^2^作为声学上最小可测量值，则：<br>$$<br>SPL&#x3D;20log_{10}\frac{p(N&#x2F;m^2)}{2*10^{-5}}<br>$$<br>※声波的声压级不会超过194dB，这个值意味着疏部压强为真空压强。（在爆炸和闪电中存在压强大于194dB的单极性脉冲）</p><hr><p>声音强度I是单位面积上的功率，用W(瓦特)&#x2F;m^2表示，它正比于声压级的平方。</p><p>对于谐波平面波：（ρ：密度，c：相速度）<br>$$<br>I&#x3D;±\frac{p^2}{2ρc}<br>$$<br>声强级(sound intensity level)是以分贝为单位的比率，以10^-12^W&#x2F;m^2^作为参考值：<br>$$<br>SIL&#x3D;10log_{10}{\frac{I}{10^{-12}}}<br>$$</p>        <h3 id="位置与相干性"   >          <a href="#位置与相干性" class="heading-link"><i class="fas fa-link"></i></a><a href="#位置与相干性" class="headerlink" title="位置与相干性"></a>位置与相干性</h3>      <p>当观察者听到来自不同声源（或是反射波）的<strong>相关</strong>声音时，声音可能被加强或减小。当声源移动，则声音不断地加强或对消，观察者会听到一个扫频的陷波滤波效果。</p><p><img src="/../images/image-20230901153530820.png" alt="image-20230901153530820"></p><p>如果各个声源相似但由单独的机制产生（如合唱，一团蜜蜂）那么声源之间不具有<strong>相关性</strong>。</p><p>对于大量的声源集合，相关与否会导致观察到的平均幅度上的显著差异：<br>$$<br>A_{相关}&#x3D;A_a+A_b+A_c\cdots\<br>A_{不相关}&#x3D;\sqrtNaN<br>$$</p>        <h3 id="衰减"   >          <a href="#衰减" class="heading-link"><i class="fas fa-link"></i></a><a href="#衰减" class="headerlink" title="衰减"></a>衰减</h3>              <h4 id="距离导致的几何损耗"   >          <a href="#距离导致的几何损耗" class="heading-link"><i class="fas fa-link"></i></a><a href="#距离导致的几何损耗" class="headerlink" title="距离导致的几何损耗"></a>距离导致的几何损耗</h4>      <p><img src="/../images/image-20230901160653650.png" alt="image-20230901160653650"></p><p>对于圆柱模型（琴弦，或是繁忙的公路），辐射功率的耗散正比于距离。</p><p>对于球模型，功率耗散正比于距离的平方。</p>        <h4 id="吸收导致的能量损耗"   >          <a href="#吸收导致的能量损耗" class="heading-link"><i class="fas fa-link"></i></a><a href="#吸收导致的能量损耗" class="headerlink" title="吸收导致的能量损耗"></a>吸收导致的能量损耗</h4>      <p>声音频率越高，速度越快，吸收损耗越大（斯托克斯定律）</p><p>衰减α：(η：粘滞度)<br>$$<br>α&#x3D;\frac{2η2\pi\f^2}{3ρc^3}(Np&#x2F;m)\ *8.685889\rightarrow(dB&#x2F;m)<br>$$</p>        <h3 id="传播效应"   >          <a href="#传播效应" class="heading-link"><i class="fas fa-link"></i></a><a href="#传播效应" class="headerlink" title="传播效应"></a>传播效应</h3>      <p>P58补</p><ul><li>反射</li></ul><p>纵向的声波在反射时会保持相同的(压强)相位，我们将听到由直达波和反射波相互叠加所引起的效果，类似的驻波模式图样将出现在房间等声学空间中。<br><img src="/../images/image-20230904131043414.png" alt="image-20230904131043414"></p><ul><li><p>散射</p></li><li><p>弥散</p></li><li><p>折射</p></li><li><p>衍射</p></li></ul>        <h3 id="声学振荡"   >          <a href="#声学振荡" class="heading-link"><i class="fas fa-link"></i></a><a href="#声学振荡" class="headerlink" title="声学振荡"></a>声学振荡</h3>              <h2 id="心理声学"   >          <a href="#心理声学" class="heading-link"><i class="fas fa-link"></i></a><a href="#心理声学" class="headerlink" title="心理声学"></a>心理声学</h2>      <p>人类听觉的频率范围：20~20kHz</p><p>自然声音（语音和音乐）的大部分频率都在300~3kHz之间。</p>        <h3 id="定位"   >          <a href="#定位" class="heading-link"><i class="fas fa-link"></i></a><a href="#定位" class="headerlink" title="定位"></a>定位</h3>      <p>三大规律：</p><ul><li>高频声音比低频声音更容易定位，且声音刚开始的时候比延音更容易定位。</li><li>在户外或自由空间中对声音的定位能力好于在具有大量反射的小房间中的定位能力。</li><li>倾斜头部能获得更好的仰角感知，更容易定位</li></ul>        <h4 id="耳间强度差IID"   >          <a href="#耳间强度差IID" class="heading-link"><i class="fas fa-link"></i></a><a href="#耳间强度差IID" class="headerlink" title="耳间强度差IID"></a>耳间强度差IID</h4>      <p>抵达每只耳朵的相对幅度（即立体声系统中的<strong>声像定位-panning</strong>）</p><p>在频率高于700Hz开始有效，1.5kHz以上时完全工作。</p>        <h4 id="耳间时间差ITD"   >          <a href="#耳间时间差ITD" class="heading-link"><i class="fas fa-link"></i></a><a href="#耳间时间差ITD" class="headerlink" title="耳间时间差ITD"></a>耳间时间差ITD</h4>      <p>声音抵达两只耳朵的时间差值。当多于一个完整波长放到两耳之间（15~25cm），就会引起含糊不清。</p><p>因此耳间时间差对700Hz以下的声音最有效，在1.5kHz以上时无效。</p><p>(r:头部半径；θ：与鼻子方向中线的夹角)<br>$$<br>ITD&#x3D;r\frac{(θ+sinθ)}{c}<br>$$</p>        <h3 id="响度"   >          <a href="#响度" class="heading-link"><i class="fas fa-link"></i></a><a href="#响度" class="headerlink" title="响度"></a>响度</h3>      <p>声音的响度是一个主观数值，单位为sone。</p><p>1sone&#x3D;1kHz的正弦波在40dB SPL的响度。声压级增大10dB SPL，感受到的响度用sone表示会变为原来的2倍。</p><p>对于人耳，同声压级的一些频率比另一些频率听上去会更响，因此人们测量得到了等响度曲线，并定义</p><p>1phon&#x3D;1dB SPL的1kHz纯音</p><p><img src="/../images/image-20230904140147498.png" alt="image-20230904140147498"></p><p>声级表运用“计权滤波器”来补偿频率的相关性，其中A计权标度多用于环境噪声测量，BBC给出的ITU-R468标度用于广播和母带的处理。</p>        <h4 id="时域积分效应"   >          <a href="#时域积分效应" class="heading-link"><i class="fas fa-link"></i></a><a href="#时域积分效应" class="headerlink" title="时域积分效应"></a>时域积分效应</h4>      <p>对于200ms以内的持续时间，通过将声音拉长一些毫秒，就可以使它们具有更大的表观音量。</p>        <h3 id="音域"   >          <a href="#音域" class="heading-link"><i class="fas fa-link"></i></a><a href="#音域" class="headerlink" title="音域"></a>音域</h3>      <ul><li><strong>低音bass</strong><ul><li><strong>次低音sub</strong>：多用于给雷声等音响效果增加深度</li><li><strong>上低音upper bass</strong>：底鼓，贝斯基频，钢琴与吉他较低的八度</li></ul></li><li><strong>中音mid</strong>：人声，弦乐，铜管的最佳音区</li><li><strong>高音treble</strong><ul><li><strong>临场感presence</strong>：为人声和乐器增加清晰度</li><li><strong>上方top</strong>：镲片，类噪声音</li><li><strong>空气感air</strong>：所有最高泛音</li></ul></li></ul><p><img src="/../images/image-20230906090620166.png" alt="image-20230906090620166"></p>        <h3 id="分辨率"   >          <a href="#分辨率" class="heading-link"><i class="fas fa-link"></i></a><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3>      <p>人耳可以区分100Hz和105Hz的区别，但无法区分16000Hz和16005Hz的区别。</p>        <h3 id="频谱"   >          <a href="#频谱" class="heading-link"><i class="fas fa-link"></i></a><a href="#频谱" class="headerlink" title="频谱"></a>频谱</h3>      <p><strong>音色timbre</strong>是对频谱的主观感知量，是由一个稳定频谱产生的瞬时的听觉感受。</p>        <h4 id="明亮度"   >          <a href="#明亮度" class="heading-link"><i class="fas fa-link"></i></a><a href="#明亮度" class="headerlink" title="明亮度"></a>明亮度</h4>      <p>将具有一些较响的高频并不足以让一个声音明亮，声音的明亮度取决于<strong>频谱质心</strong>，以及<strong>起音attack</strong>。</p>        <h4 id="对时域结构的感知"   >          <a href="#对时域结构的感知" class="heading-link"><i class="fas fa-link"></i></a><a href="#对时域结构的感知" class="headerlink" title="对时域结构的感知"></a>对时域结构的感知</h4>              <h3 id="包络envelope"   >          <a href="#包络envelope" class="heading-link"><i class="fas fa-link"></i></a><a href="#包络envelope" class="headerlink" title="包络envelope"></a>包络envelope</h3>      <p>在声音设计中通常用四个词描述一个声音的包络：</p><ul><li>起音attack</li><li>衰减decay</li><li>延音sustain</li><li>释音release</li></ul>        <h4 id="Attack"   >          <a href="#Attack" class="heading-link"><i class="fas fa-link"></i></a><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h4>      <p>在这个阶段，声音从0开始上升到最大能量处。对于打击型声音，这个起音非常短；对于琴弦，可以长达几秒钟。</p><p>从斜面滑落空气的物体可以模拟起音的过程，该物体持续加速，同时摩擦激励产生一个越来越响的声音。</p>        <h4 id="Decay"   >          <a href="#Decay" class="heading-link"><i class="fas fa-link"></i></a><a href="#Decay" class="headerlink" title="Decay"></a>Decay</h4>      <p>衰减应用于那些在瞬变阶段后有能量持续供应的系统上。</p>        <h4 id="Sustain"   >          <a href="#Sustain" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sustain" class="headerlink" title="Sustain"></a>Sustain</h4>      <p>在这个阶段，系统的输入能量等于输出能量。</p>        <h4 id="Release"   >          <a href="#Release" class="heading-link"><i class="fas fa-link"></i></a><a href="#Release" class="headerlink" title="Release"></a>Release</h4>      <p>系统不再接受能量，只通过存储的能量产生一段声音。对于运动物体，这个数值对应于动量，对于流体则对应于存储能力。</p>        <h3 id="哈斯效应"   >          <a href="#哈斯效应" class="heading-link"><i class="fas fa-link"></i></a><a href="#哈斯效应" class="headerlink" title="哈斯效应"></a>哈斯效应</h3>      <p>又称先入为主效应，决定了我们在何处区分环境与声源。</p><p>大约30ms后接受到的反射声将被分配给环境，被听成单独的回声，比如在大厅里击掌产生的回声；发生在30ms内的反射声被融合到这个声音本身中，比如古典吉他的空腔内产生的回声</p>        <h3 id="Gabor极限"   >          <a href="#Gabor极限" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gabor极限" class="headerlink" title="Gabor极限"></a>Gabor极限</h3>      <p>Gabor极限标出了一个声音具有音高所需的最小持续时间，大约在10~20ms。</p>        <h1 id="吉他"   >          <a href="#吉他" class="heading-link"><i class="fas fa-link"></i></a><a href="#吉他" class="headerlink" title="吉他"></a>吉他</h1>              <h1 id="合成器"   >          <a href="#合成器" class="heading-link"><i class="fas fa-link"></i></a><a href="#合成器" class="headerlink" title="合成器"></a>合成器</h1>              <h2 id="放大器Amplifier"   >          <a href="#放大器Amplifier" class="heading-link"><i class="fas fa-link"></i></a><a href="#放大器Amplifier" class="headerlink" title="放大器Amplifier"></a>放大器Amplifier</h2>              <h2 id="振荡器Oscillator"   >          <a href="#振荡器Oscillator" class="heading-link"><i class="fas fa-link"></i></a><a href="#振荡器Oscillator" class="headerlink" title="振荡器Oscillator"></a>振荡器Oscillator</h2>              <h3 id="音频振荡器"   >          <a href="#音频振荡器" class="heading-link"><i class="fas fa-link"></i></a><a href="#音频振荡器" class="headerlink" title="音频振荡器"></a>音频振荡器</h3>      <p>用于产生音频，不同波形会产生不同音色timbre的声音，振幅影响响度</p>        <h3 id="低频振荡器（LFO）"   >          <a href="#低频振荡器（LFO）" class="heading-link"><i class="fas fa-link"></i></a><a href="#低频振荡器（LFO）" class="headerlink" title="低频振荡器（LFO）"></a>低频振荡器（LFO）</h3>      <p>用于调制某个音频，让一个参数（音高，音量等）来回振荡，使音频的某些特性随时间变化。<br>慢速的调制通常用作改变行为（声音的表现），而快速调制则用来改变音色（声音本身的特征）</p>        <h2 id="滤波器Filter"   >          <a href="#滤波器Filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#滤波器Filter" class="headerlink" title="滤波器Filter"></a>滤波器Filter</h2>      <ul><li><p>Low-Pass Filter低通滤波器</p><p><img src="/../images/image-20230912205725143.png" alt="image-20230912205725143"></p><ul><li>Resonance：共振，增强截止频率周围的振幅</li><li>Frequency：滤波器的截止频率</li></ul></li></ul>        <h2 id="合成弹拨贝斯"   >          <a href="#合成弹拨贝斯" class="heading-link"><i class="fas fa-link"></i></a><a href="#合成弹拨贝斯" class="headerlink" title="合成弹拨贝斯"></a>合成弹拨贝斯</h2>      <div style='display:flex;width:100%;'><img style='width:50%;' src='../images/image-20230912210218103.png' /><img style='width:50%;' src='../images/image-20230912210242942.png' /></div><p>声音的”弹拨”性是由包络调制滤波器而生成的。 这会导致滤波器快速开合和关闭。</p>        <h3 id="音高失谐detune"   >          <a href="#音高失谐detune" class="heading-link"><i class="fas fa-link"></i></a><a href="#音高失谐detune" class="headerlink" title="音高失谐detune"></a>音高失谐detune</h3>      <ul><li><p>cents音分：一音分等于半音的百分之一</p></li><li><p>semitone半音</p><p>12semitone&#x3D;1个八度</p></li></ul>        <h2 id="噪声发生器"   >          <a href="#噪声发生器" class="heading-link"><i class="fas fa-link"></i></a><a href="#噪声发生器" class="headerlink" title="噪声发生器"></a>噪声发生器</h2>      <p>噪声发生器会生成没有音高的声音，可以用来模拟风或雨的声音。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;音乐学习相关的笔记&lt;/p&gt;</summary>
    
    
    
    <category term="音乐" scheme="https://lzmustb.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="音乐" scheme="https://lzmustb.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>安装与配置MySQL(Ubuntu)</title>
    <link href="https://lzmustb.github.io/2023/06/26/MySQL_commands/"/>
    <id>https://lzmustb.github.io/2023/06/26/MySQL_commands/</id>
    <published>2023-06-26T01:06:00.000Z</published>
    <updated>2023-09-25T12:55:46.067Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="安装mysql"   >          <a href="#安装mysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="查看mysql是否安装成功"   >          <a href="#查看mysql是否安装成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看mysql是否安装成功" class="headerlink" title="查看mysql是否安装成功"></a>查看mysql是否安装成功</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></div></figure>        <h2 id="设置root用户的密码"   >          <a href="#设置root用户的密码" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置root用户的密码" class="headerlink" title="设置root用户的密码"></a>设置root用户的密码</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql #登录mysql服务器</span><br></pre></td></tr></table></div></figure><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span>指令:</span><br><span class="line"><span class="comment">/*将new_password部分替换为你的新密码*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"><span class="comment">/*更新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES; </span><br><span class="line"><span class="comment">/*退出sql命令行*/</span></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>        <h2 id="查看mysql服务器运行状态"   >          <a href="#查看mysql服务器运行状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看mysql服务器运行状态" class="headerlink" title="查看mysql服务器运行状态"></a>查看mysql服务器运行状态</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql status</span><br></pre></td></tr></table></div></figure><p>如果MySQL正在运行，将显示”active (running)”</p>        <h2 id="启动mysql服务器"   >          <a href="#启动mysql服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动mysql服务器" class="headerlink" title="启动mysql服务器"></a>启动mysql服务器</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></div></figure>        <h2 id="本地连接mysql服务器"   >          <a href="#本地连接mysql服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地连接mysql服务器" class="headerlink" title="本地连接mysql服务器"></a>本地连接mysql服务器</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u &lt;username&gt; -p</span><br></pre></td></tr></table></div></figure><p>将<code>&lt;username&gt;</code>替换为用户名(未创建新用户则填root)</p>        <h2 id="查看MySQL服务器的ip地址"   >          <a href="#查看MySQL服务器的ip地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看MySQL服务器的ip地址" class="headerlink" title="查看MySQL服务器的ip地址"></a>查看MySQL服务器的ip地址</h2>      <p>通常主机外网ip即为服务器ip地址</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig #linux</span><br></pre></td></tr></table></div></figure>        <h2 id="配置MySQL服务器远程连接"   >          <a href="#配置MySQL服务器远程连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置MySQL服务器远程连接" class="headerlink" title="配置MySQL服务器远程连接"></a>配置MySQL服务器远程连接</h2>              <h3 id="编辑配置文件’mysqld-cnf’"   >          <a href="#编辑配置文件’mysqld-cnf’" class="heading-link"><i class="fas fa-link"></i></a><a href="#编辑配置文件’mysqld-cnf’" class="headerlink" title="编辑配置文件’mysqld.cnf’"></a>编辑配置文件’mysqld.cnf’</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></div></figure><p>在 <code>mysqld.cnf</code> 文件中找到 <code>bind-address</code> 选项，并将其注释掉或将其值设置为MySQL服务器的IP地址。默认情况下，此选项被设置为 <code>127.0.0.1</code>，只允许本地连接。如果要允许远程连接，请将其修改为服务器的实际IP地址或注释掉该行。例如：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#bind-address = 127.0.0.1</span><br></pre></td></tr></table></div></figure><p>保存并关闭<code>mysqld.cnf</code>文件（ctrl+x）</p>        <h3 id="重启MySQL服务器以应用更改"   >          <a href="#重启MySQL服务器以应用更改" class="heading-link"><i class="fas fa-link"></i></a><a href="#重启MySQL服务器以应用更改" class="headerlink" title="重启MySQL服务器以应用更改"></a>重启MySQL服务器以应用更改</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></div></figure>        <h3 id="创建或授予远程访问权限"   >          <a href="#创建或授予远程访问权限" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建或授予远程访问权限" class="headerlink" title="创建或授予远程访问权限"></a>创建或授予远程访问权限</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></div></figure><p>进入sql命令行</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*显示MySQL服务器上所有用户列表*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></div></figure><p>如果有用户拥有<code>%</code>主机的访问权限，则该用户可以进行远程访问。如果没有，则授予权限</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*替换&lt;password&gt;（包括大小于号）*/</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure><p>或创建新用户：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*替换&lt;username&gt;和&lt;password&gt;（包括大小于号）*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;&lt;username&gt;&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*授予新用户对所有数据库的完全权限*/</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;&lt;username&gt;&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*刷新用户权限*/</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>        <h2 id="查看MySQL服务器端口"   >          <a href="#查看MySQL服务器端口" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看MySQL服务器端口" class="headerlink" title="查看MySQL服务器端口"></a>查看MySQL服务器端口</h2>      <p>默认为3306，若进行了自定义设置可在<strong>sql命令行</strong>使用以下指令</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;port&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="关闭Ubuntu防火墙"   >          <a href="#关闭Ubuntu防火墙" class="heading-link"><i class="fas fa-link"></i></a><a href="#关闭Ubuntu防火墙" class="headerlink" title="关闭Ubuntu防火墙"></a>关闭Ubuntu防火墙</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">sudo ufw disable</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态，若显示<span class="string">&#x27;Status:inactive&#x27;</span>则关闭成功</span></span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></div></figure>        <h1 id="MySQL语言"   >          <a href="#MySQL语言" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySQL语言" class="headerlink" title="MySQL语言"></a>MySQL语言</h1>      ]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装mysql&quot;   &gt;
          &lt;a href=&quot;#安装mysql&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#安装mysql&quot; class=&quot;headerlink&quot; title=&quot;安装mysql&quot;&gt;&lt;/a&gt;安装mysql&lt;/h2&gt;
      &lt;figure class=&quot;highlight shell&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install mysql-server	&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《献给阿尔吉侬的花束》</title>
    <link href="https://lzmustb.github.io/2023/02/25/read-Flowers-for-Algernon/"/>
    <id>https://lzmustb.github.io/2023/02/25/read-Flowers-for-Algernon/</id>
    <published>2023-02-25T03:20:54.000Z</published>
    <updated>2023-09-25T13:03:19.304Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="引言"   >          <a href="#引言" class="heading-link"><i class="fas fa-link"></i></a><a href="#引言" class="headerlink" title="引言"></a>引言</h2>      <blockquote><p>箱子里有迷宫。</p><p>你在错综复杂的道路上前行。</p><p>你相信墙的另一侧一定有些什么，</p><p>时而失道却坚定地向着出口前进。</p><p>这身影对我有些耀眼。(阿尔吉侬)就是这样的一首曲子。</p><p style="text-align:right">——n-buna</p></blockquote><span id="more"></span><p>前段时间听夜鹿新曲<span class="exturl"><a class="exturl__link"   href="https://music.163.com/#/song?id=2020247157" >アルジャーノン(阿尔吉侬)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>得知其原型是科幻巨著《献给阿尔吉侬的花束》。</p><p>小说从主人公 查理·高登 的自述开始。通过没有逗号、错别字满篇的报告得知，他是一名30多岁的智力障碍者，在面包店做些清扫工作，同时在低能成人学校努力学习。他想变聪明，想让面包店的同事高兴，想理解他的朋友们所谈论的话题，并参与其中。</p><p>后来，他被带到声称能改造智力的科学实验室中，在那里遇到了高智商老鼠 阿尔吉侬。阿尔吉侬是唯一一个实验成功的老鼠，它快速走出迷宫的样子令查理感到无比的惊讶和敬佩。</p><p>科学家和医生看到查理天性善良，又有上进心，认为他是人体实验的不二之选。查理接受了手术，变成了天才。然而，等待他的不是为他自豪的朋友，而是他不曾体会的复杂世界。</p><p><font color='scarlet'><strong>※以下涉及剧透</strong></font></p>        <h2 id="人物关系图"   >          <a href="#人物关系图" class="heading-link"><i class="fas fa-link"></i></a><a href="#人物关系图" class="headerlink" title="人物关系图"></a>人物关系图</h2>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/flowersForAlgernon.png" alt="flowersForAlgernon"></p>        <h2 id="“比拥有高智商更重要的事”"   >          <a href="#“比拥有高智商更重要的事”" class="heading-link"><i class="fas fa-link"></i></a><a href="#“比拥有高智商更重要的事”" class="headerlink" title="“比拥有高智商更重要的事”"></a>“比拥有高智商更重要的事”</h2>      <p>在智力的飞速发展下，查理很快便掌握多门语言，读通最前沿的科学论文。一开始，他以为这就是正常人的世界，但此时的查理和其他人之间的隔阂却和手术前一样大。查理不能忍受尼姆等人追求名利，他在公开场合说的话虽然理性而正确，但让这些科学家们难堪。</p><p>高智商让他察觉人性中的丑恶，但却没有给他宽容这些丑恶的人情。</p><blockquote><p>但我可以告诉你一件事，在你手术之前，你并不是这个样子。你不会在自己的秽物中打滚，不会沉迷于自怜，不会整天整夜坐在电视机前污染自己的心灵，更不会大声对别人咆哮。你有些令我们尊敬的特质……没错，即使是过去的你。你身上有些我从来没有在其他弱智者身上见过的特别东西。</p><p style="text-align:right">——艾丽斯·纪尼安</p></blockquote>        <h2 id="献给阿尔吉侬"   >          <a href="#献给阿尔吉侬" class="heading-link"><i class="fas fa-link"></i></a><a href="#献给阿尔吉侬" class="headerlink" title="献给阿尔吉侬"></a>献给阿尔吉侬</h2>      <p>查理得知留给自己的时间不长后，把所有精力花在研究他自身发生的变化上。他并没有用他梦寐以求的聪明去做自己想做的事，而是用昙花一现的人类最高智力，去推进科学发展，为未来其他智障者开辟道路。</p><blockquote><p>我把阿尔吉侬的尸体放在一个小金属容器里带回家，我不会让他们把它丢进焚化炉。这样做有些愚蠢和伤感，但昨天深夜我把它埋在后院。把一束野花放在坟上时，我哭了起来。</p></blockquote><hr>        <h2 id="我"   >          <a href="#我" class="heading-link"><i class="fas fa-link"></i></a><a href="#我" class="headerlink" title="我"></a>我</h2>      <p>这本小说中会出现很多<strong>错字</strong>，但正是这一巧妙的设计让读者看到一个有血有肉的残疾人的一生。</p><p>我和查理没有什么共同点可言，无论是在他做手术前，还是之后。我想象自己如果在书中是个什么样的位置，最后发现可能只是面包店里默默工作的一员。我不会嘲笑和捉弄查理，也不会在他变成高智商时排挤他。但我的篇幅一定不会比金皮或者乔更多。或许查理会主动和我敞开心扉，而我多半对此爱莫能助；或许我从头到尾都不会知道查理对命运的伟大抗争。</p><p>全世界有7%左右的残疾人，其中智力残疾比肢体残疾要少一些。在我的20多年人生中，擦肩而过的可能有10来个，但不曾接触过他们中的任何人。我自认为与人交流时有注意不让对方尴尬难堪，但或许我并不比那些为残障机构捐款却从不与他们交流的富豪更有同情心。我自认为对任何人都没有歧视和偏见，但我实际能做到的只是表示理解，却不能提供真正的帮助。</p><p>我的心灵是一块开阔却贫瘠的土地，不会拒绝踏入的脚印，但也找不着一束可以献上的花。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;   &gt;
          &lt;a href=&quot;#引言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;
      &lt;blockquote&gt;
&lt;p&gt;箱子里有迷宫。&lt;/p&gt;
&lt;p&gt;你在错综复杂的道路上前行。&lt;/p&gt;
&lt;p&gt;你相信墙的另一侧一定有些什么，&lt;/p&gt;
&lt;p&gt;时而失道却坚定地向着出口前进。&lt;/p&gt;
&lt;p&gt;这身影对我有些耀眼。(阿尔吉侬)就是这样的一首曲子。&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;——n-buna&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://lzmustb.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="感想" scheme="https://lzmustb.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>并发/并行&amp;同步/异步</title>
    <link href="https://lzmustb.github.io/2022/11/05/my-programing-note1/"/>
    <id>https://lzmustb.github.io/2022/11/05/my-programing-note1/</id>
    <published>2022-11-05T04:17:20.000Z</published>
    <updated>2023-09-08T01:01:42.438Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="并发vs并行"   >          <a href="#并发vs并行" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发vs并行" class="headerlink" title="并发vs并行"></a>并发vs并行</h1>              <h2 id="并发-Concurrency"   >          <a href="#并发-Concurrency" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发-Concurrency" class="headerlink" title="并发(Concurrency)"></a>并发(Concurrency)</h2>      <p>并发是一个宽泛概念，表示计算机同时执行多项任务。</p><p>对于单核处理器，可以通过分配时间片的方式（又称上下文切换context switching）</p>        <h2 id="并行-Parallelism"   >          <a href="#并行-Parallelism" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行-Parallelism" class="headerlink" title="并行(Parallelism)"></a>并行(Parallelism)</h2>      <p>在多核处理器中，真正意义上同时执行多项任务。</p><span id="more"></span>        <h1 id="同步vs异步"   >          <a href="#同步vs异步" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步vs异步" class="headerlink" title="同步vs异步"></a>同步vs异步</h1>              <h2 id="同步编程-Synchronous"   >          <a href="#同步编程-Synchronous" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步编程-Synchronous" class="headerlink" title="同步编程(Synchronous)"></a>同步编程(Synchronous)</h2>      <p>在执行完一项任务后才执行下一项任务，没有并发并行的概念</p>        <h2 id="异步编程-Async"   >          <a href="#异步编程-Async" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步编程-Async" class="headerlink" title="异步编程(Async)"></a>异步编程(Async)</h2>      <p>在<strong>单线程中</strong>同时执行多个任务的编程方式。无需考虑线程同步，线程竞争的问题。</p><p>适用于有网络操作，数据库访问等I&#x2F;O密集的应用程序。如果使用多线程，线程中的大部分时间在等待，反而浪费了线程切换和线程内存的开销。多线程适合计算量大的程序。</p>        <h3 id="Javascript"   >          <a href="#Javascript" class="heading-link"><i class="fas fa-link"></i></a><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3>      <p>Js中实现异步的方法有callback，Promise，async&#x2F;await</p>        <h4 id="async-x2F-await"   >          <a href="#async-x2F-await" class="heading-link"><i class="fas fa-link"></i></a><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h4>      <p>async将函数标记为异步函数，返回值为Promise对象。在async函数中可以调用await标记的异步函数。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;并发vs并行&quot;   &gt;
          &lt;a href=&quot;#并发vs并行&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并发vs并行&quot; class=&quot;headerlink&quot; title=&quot;并发vs并行&quot;&gt;&lt;/a&gt;并发vs并行&lt;/h1&gt;
      
        &lt;h2 id=&quot;并发-Concurrency&quot;   &gt;
          &lt;a href=&quot;#并发-Concurrency&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并发-Concurrency&quot; class=&quot;headerlink&quot; title=&quot;并发(Concurrency)&quot;&gt;&lt;/a&gt;并发(Concurrency)&lt;/h2&gt;
      &lt;p&gt;并发是一个宽泛概念，表示计算机同时执行多项任务。&lt;/p&gt;
&lt;p&gt;对于单核处理器，可以通过分配时间片的方式（又称上下文切换context switching）&lt;/p&gt;

        &lt;h2 id=&quot;并行-Parallelism&quot;   &gt;
          &lt;a href=&quot;#并行-Parallelism&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#并行-Parallelism&quot; class=&quot;headerlink&quot; title=&quot;并行(Parallelism)&quot;&gt;&lt;/a&gt;并行(Parallelism)&lt;/h2&gt;
      &lt;p&gt;在多核处理器中，真正意义上同时执行多项任务。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://lzmustb.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>餐厅管理网页练习</title>
    <link href="https://lzmustb.github.io/2022/10/16/my-vue-practice1/"/>
    <id>https://lzmustb.github.io/2022/10/16/my-vue-practice1/</id>
    <published>2022-10-15T23:29:46.000Z</published>
    <updated>2022-10-16T00:42:05.956Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下这两天用vue模写网页的过程。</p><p>成品：</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/my-vue-practice1.png" alt="my-vue-practice1"></p><span id="more"></span><p>※设计图来自IQQNIC Design的<span class="exturl"><a class="exturl__link"   href="https://pixso.cn/community/file/iwhOWVDOeICw39kGAlSxrA" >免费餐厅管理模板</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>页面最外层：</p><ul><li><p>sidebar：固定像素，fixed固定在侧边</p></li><li><p>navigationBar+router-view：上下结构，这次只做了home界面所以路由不会切换</p></li></ul><p>黄色框内的元素均为响应式渲染，由store里的数据管理。</p>        <h1 id="解决的技术问题"   >          <a href="#解决的技术问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决的技术问题" class="headerlink" title="解决的技术问题"></a>解决的技术问题</h1>              <h2 id="滚动条显示异常"   >          <a href="#滚动条显示异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#滚动条显示异常" class="headerlink" title="滚动条显示异常"></a>滚动条显示异常</h2>      <p>在写<code>Home.vue</code>时，明明页面超出了屏幕，却不显示滚动条，也无法滑动。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--App.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;APPcontainer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SideBar</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;APPmain&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">NavigationBar</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mainView&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这部分超出了界面--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>解决方法</strong>：</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在最外层容器添加--&gt;</span><br><span class="line"><span class="selector-class">.APPcontainer</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>原理没搞懂，<code>height:100vh</code>比较关键，不加这句的话滚动条长得会比较奇怪。</p>        <h2 id="CSS简单动效"   >          <a href="#CSS简单动效" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS简单动效" class="headerlink" title="CSS简单动效"></a>CSS简单动效</h2>      <p><code>transition:[时间]</code>可以在元素样式产生变化时自动生成补间，像淡出淡入，侧栏展开等。</p><p><code>filter</code>属性可以改变元素的颜色，功能繁多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下这两天用vue模写网页的过程。&lt;/p&gt;
&lt;p&gt;成品：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/my-vue-practice1.png&quot; alt=&quot;my-vue-practice1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>网页设计学习笔记</title>
    <link href="https://lzmustb.github.io/2022/10/13/my-web-design-note/"/>
    <id>https://lzmustb.github.io/2022/10/13/my-web-design-note/</id>
    <published>2022-10-13T04:39:36.000Z</published>
    <updated>2024-06-05T01:33:49.986Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="页面尺寸的选择"   >          <a href="#页面尺寸的选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#页面尺寸的选择" class="headerlink" title="页面尺寸的选择"></a>页面尺寸的选择</h1>              <h2 id="网页宽度-amp-有效可视区"   >          <a href="#网页宽度-amp-有效可视区" class="heading-link"><i class="fas fa-link"></i></a><a href="#网页宽度-amp-有效可视区" class="headerlink" title="网页宽度&amp;有效可视区"></a>网页宽度&amp;有效可视区</h2>      <ul><li><strong>网页宽度</strong>：进行页面设计时画板的宽度</li><li><strong>有效可视区</strong>：网页内容所占的宽度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/2107_01.jpg" alt="img"></p><span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://gs.statcounter.com/screen-resolution-stats/desktop/worldwide" >Statcounter Global Stats</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上可以看到当前PC端显示器的流行尺寸，由此得出结论：</p><blockquote><p>网页宽度：1920</p><p>有效可视区：900~1200</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221013124444439.png" alt="image-20221013124444439"></p>        <h1 id="响应式布局"   >          <a href="#响应式布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1>      <p>若不希望可视区占比太小，可以采用响应式布局使得网页在不同的尺寸下有不同的布局。</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/0117-1.png" alt="リキッドレイアウトの簡単な説明：レイアウトは同じでコンテンツの幅がディスプレイの幅に応じて変化する。"></p>        <h2 id="百分比"   >          <a href="#百分比" class="heading-link"><i class="fas fa-link"></i></a><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2>      <h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><p>相对于父元素，或无父元素则相对于视窗</p><div class="table-container"><table><thead><tr><th>属性</th><th align="left">百分比基准</th></tr></thead><tbody><tr><td>width</td><td align="left">基于父级的width</td></tr><tr><td>height</td><td align="left">基于父级的height</td></tr><tr><td>margin(四个方向)</td><td align="left">基于父级的width</td></tr><tr><td>padding(四个方向)</td><td align="left">基于父级的width</td></tr><tr><td>left,,right</td><td align="left">基于<strong>非static定位</strong>的父级的width</td></tr><tr><td>top,bottom</td><td align="left">基于<strong>非static定位</strong>的父级的height</td></tr></tbody></table></div>        <h3 id="vw-amp-vh"   >          <a href="#vw-amp-vh" class="heading-link"><i class="fas fa-link"></i></a><a href="#vw-amp-vh" class="headerlink" title="vw&amp;vh"></a>vw&amp;vh</h3>      <ul><li>1vw&#x3D;1%视窗宽度</li><li>1vh&#x3D;1%视窗高度</li><li>vmin：vw和vh中较小值</li><li>vmax：vw和vh中较大值</li></ul>        <h2 id="rem-font-size-of-the-root-element"   >          <a href="#rem-font-size-of-the-root-element" class="heading-link"><i class="fas fa-link"></i></a><a href="#rem-font-size-of-the-root-element" class="headerlink" title="rem(font size of the root element)"></a>rem(font size of the root element)</h2>      <p>rem为相对于<strong>根元素字体大小</strong>的单位</p>        <h2 id="媒体查询"   >          <a href="#媒体查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2>      <figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//页面宽度大于<span class="number">960px</span>小于<span class="number">1200px</span></span><br><span class="line"><span class="keyword">@media</span> screen </span><br><span class="line"><span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">960px</span>) </span><br><span class="line"><span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)&#123;</span><br><span class="line">        <span class="comment">/*---*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="flex布局"   >          <a href="#flex布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1>      <p>Flex布局中存在main axis(横向)和cross axis(纵向)两个轴，默认将元素在main axis从左向右排列</p>        <h2 id="justify-content"   >          <a href="#justify-content" class="heading-link"><i class="fas fa-link"></i></a><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h2>      <p>可以决定容器中元素在<strong>主轴</strong>方向的位置</p><ul><li><code>flex-start</code>：将元素对齐主轴首端</li><li><code>flex-end</code>：将元素对齐主轴末端</li><li><code>center</code>：将元素居中</li><li><code>space-between</code>：使第一个元素位于主轴首端，最后一个元素位于主轴末端</li><li><code>space-around</code>：将元素等距排列，且第一个元素和最后一个元素到边界的距离相当于元素间距离的一半</li></ul>        <h2 id="align-items"   >          <a href="#align-items" class="heading-link"><i class="fas fa-link"></i></a><a href="#align-items" class="headerlink" title="align-items"></a><code>align-items</code></h2>      <p>可以决定容器中元素在<strong>副轴</strong>方向的位置</p><ul><li><code>flex-start</code>：将元素对齐副轴首端</li><li><code>flex-end</code>：将元素对齐副轴末端</li><li><code>center</code>：将元素居中</li><li><code>stretch</code>：</li><li><code>baseline</code>：</li></ul>        <h2 id="align-self"   >          <a href="#align-self" class="heading-link"><i class="fas fa-link"></i></a><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h2>      <p>作用于flex布局内的<strong>元素</strong>。选项与<code>align-items</code>相同，用于具体修改某个元素的纵向布局。</p>        <h2 id="flex-direction"   >          <a href="#flex-direction" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h2>      <p>可以修改主轴的方向</p><ul><li><code>row</code>：主轴为横向，从左向右</li><li><code>row-reverse</code>：主轴为横向，从右向左</li><li><code>column</code>：主轴为纵向，从上向下</li><li><code>column-reverse</code>：主轴为纵向，从下向上</li></ul>        <h2 id="order"   >          <a href="#order" class="heading-link"><i class="fas fa-link"></i></a><a href="#order" class="headerlink" title="order"></a><code>order</code></h2>      <p>作用于flex布局内的<strong>元素</strong>。默认值为0，可选择任意<strong>整数值</strong>。数值大的元素将排列在后面。</p>        <h2 id="flex实现自动填充"   >          <a href="#flex实现自动填充" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex实现自动填充" class="headerlink" title="flex实现自动填充"></a>flex实现自动填充</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;auto-fill&quot;</span>&gt;</span>自动填充<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.auto-fill</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="flex自动撑满父元素"   >          <a href="#flex自动撑满父元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex自动撑满父元素" class="headerlink" title="flex自动撑满父元素"></a>flex自动撑满父元素</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-grow:1;</span><br></pre></td></tr></table></div></figure>        <h2 id="flex防止元素收缩"   >          <a href="#flex防止元素收缩" class="heading-link"><i class="fas fa-link"></i></a><a href="#flex防止元素收缩" class="headerlink" title="flex防止元素收缩"></a>flex防止元素收缩</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-shrink:0;</span><br></pre></td></tr></table></div></figure>        <h1 id="Grid布局"   >          <a href="#Grid布局" class="heading-link"><i class="fas fa-link"></i></a><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h1>      <p><code>fr</code>：grid专有单位，表示比例（fraction）</p><p><strong>Grid布局嵌套时，外层容器设置<code>overflow:hidden</code>可防止子元素溢出</strong></p>        <h2 id="grid-template"   >          <a href="#grid-template" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-template" class="headerlink" title="grid-template"></a><code>grid-template</code></h2>      <p><strong>容器属性</strong>，用于定义栅格行列的宽度，数量</p><ul><li><code>grid-template-columns</code></li><li><code>-rows</code></li><li>【选项】<code>repeat(重复次数,值)</code>：</li></ul><figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于&quot;100px 100px 100px&quot;</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line"><span class="comment">//自动按照容器宽度填充（响应式）</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>:<span class="built_in">repeat</span>(auto-fill,<span class="number">100px</span>);</span><br></pre></td></tr></table></div></figure><ul><li>【选项】<code>minmax(最小值，最大值)</code></li><li>【选项】<code>auto</code></li><li>【选项】<code>网格线[...]</code></li><li><code>-areas</code>：设定网格区域：<figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-areas</span>:<span class="string">&#x27;a b c&#x27;</span> </span><br><span class="line"><span class="string">&#x27;d e f&#x27;</span>; </span><br><span class="line"><span class="comment">//匿名区域：&quot;.&quot;</span></span><br><span class="line"><span class="comment">//在项目上分配区域：&quot;grid-area:区域名;&quot;</span></span><br><span class="line"><span class="comment">//每个区域的起始网格线自动命名为&quot;区域名-start&quot;</span></span><br><span class="line"><span class="comment">//终止网格线自动命名为&quot;区域名-end&quot;</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="gap"   >          <a href="#gap" class="heading-link"><i class="fas fa-link"></i></a><a href="#gap" class="headerlink" title="gap"></a><code>gap</code></h2>      <p><strong>容器属性</strong>，设置行，列的间距。</p><ul><li><code>row-gap</code></li><li><code>column-gap</code></li><li><code>gap</code></li></ul>        <h2 id="grid-auto"   >          <a href="#grid-auto" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto" class="headerlink" title="grid-auto"></a><code>grid-auto</code></h2>              <h3 id="grid-auto-flow"   >          <a href="#grid-auto-flow" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a><code>grid-auto-flow</code></h3>      <p><strong>容器属性</strong>，设置自动排列的方向</p><ul><li>【选项1】<code>row</code>：按行排放（默认）</li><li>【选项1】<code>column</code>：按列排放</li><li>【选项2】<code>dense</code>：用后排项目填补空余部分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221104105341526.png" alt="image-20221104105341526"></p>        <h3 id="grid-auto-rows-columns"   >          <a href="#grid-auto-rows-columns" class="heading-link"><i class="fas fa-link"></i></a><a href="#grid-auto-rows-columns" class="headerlink" title="grid-auto-rows/columns"></a><code>grid-auto-rows/columns</code></h3>      <p><strong>容器属性</strong>，设置多出项目的宽(column)和高(row)</p>        <h2 id="对齐选项"   >          <a href="#对齐选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐选项" class="headerlink" title="对齐选项"></a>对齐选项</h2>              <h3 id="items"   >          <a href="#items" class="heading-link"><i class="fas fa-link"></i></a><a href="#items" class="headerlink" title="-items"></a><code>-items</code></h3>      <p><strong>容器属性</strong> ：决定项目在<strong>单元格内</strong>的对齐方式</p><ul><li><code>justify-items</code>：水平方向对齐</li><li><code>align-items</code>：垂直方向对齐<ul><li><code>start|end|center|stretch</code>：stretch为撑满单元格</li></ul></li><li><code>place-items</code>：&lt;align-items&gt; &lt;justify-items&gt;</li></ul>        <h3 id="content"   >          <a href="#content" class="heading-link"><i class="fas fa-link"></i></a><a href="#content" class="headerlink" title="-content"></a><code>-content</code></h3>      <p><strong>容器属性</strong>：决定网格区域在父元素内的对齐方式</p><ul><li><code>justify-content</code>：水平方向对齐</li><li><code>align-content</code>：垂直方向对齐<ul><li><code>start|end|center|stretch</code></li><li><code>space-around</code></li><li><code>space-between</code></li><li><code>space-evenly</code>：等间距分布（包括与边界的距离</li></ul></li></ul>        <h2 id="项目属性"   >          <a href="#项目属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2>              <h3 id="指定位置"   >          <a href="#指定位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#指定位置" class="headerlink" title="指定位置"></a>指定位置</h3>      <ul><li><p><code>grid-column/row-start/end</code></p><p>※简写:<code>grid-column:1/3;</code></p><p>※跨行写法：<code>grid-column-start:span 3;</code>(占三列)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221104114016154.png" alt="image-20221104114016154"></p><ul><li><code>grid-area</code>：指定所在区域</li></ul><figure class="highlight less"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-area</span>:区域名;</span><br><span class="line"><span class="attribute">grid-area</span>:<span class="number">1</span>/<span class="number">1</span>/<span class="number">3</span>/<span class="number">3</span>;</span><br><span class="line"><span class="comment">//简写 row-start/column-start/row-end/column-end;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="对齐"   >          <a href="#对齐" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3>      <ul><li><code>justify-self/align-self</code>：设置项目在单元格内对齐方式</li></ul>        <h1 id="CSS技巧"   >          <a href="#CSS技巧" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS技巧" class="headerlink" title="CSS技巧"></a>CSS技巧</h1>      <p><strong>box-shadow</strong>: </p><p>offset-x(x偏移) offset-y(y偏移) blur(模糊半径) spread(扩展半径) color(颜色) position(inset内阴影);</p><p><strong>透过上层点击到下层元素</strong>：</p><p>给上层元素添加{pointer-events:none;}</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden;</span><br><span class="line"></span><br><span class="line">white-space:nowrap; </span><br><span class="line"></span><br><span class="line">text-overflow:ellipsis; </span><br></pre></td></tr></table></div></figure><p>text-overflow失效：父元素为flex布局</p><p><code>user-select: none</code> ：阻止用户选中文本</p>        <h2 id="Filter"   >          <a href="#Filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2>      <div class="table-container"><table><thead><tr><th>选项</th><th align="left">说明</th></tr></thead><tbody><tr><td>blur(<em>px</em>)</td><td align="left">给图像设置高斯模糊。默认是0；这个参数可设置css长度值，但不接受百分比值。</td></tr><tr><td>brightness(<em>%</em>)</td><td align="left">使图片看起来更亮或更暗，默认100%。</td></tr><tr><td>contrast(<em>%</em>)</td><td align="left">调整图像的对比度，默认100%。</td></tr><tr><td>drop-shadow(<em>h-shadow v-shadow blur spread color</em>)</td><td align="left">给图像设置一个阴影效果。</td></tr><tr><td>grayscale(<em>%</em>)</td><td align="left">将图像转换为灰度图像，默认为0，值在0%到100%之间。</td></tr><tr><td>hue-rotate(<em>deg</em>)</td><td align="left">给图像应用色相旋转，默认值是0deg。</td></tr><tr><td>invert(<em>%</em>)</td><td align="left">反转输入图像。默认为0，100%为完全反转。</td></tr><tr><td>opacity(<em>%</em>)</td><td align="left">转化图像的透明程度，默认为100%。</td></tr><tr><td>saturate(<em>%</em>)</td><td align="left">转换图像饱和度，默认100%。</td></tr><tr><td>sepia(<em>%</em>)</td><td align="left">将图像转换为深褐色，默认为0。</td></tr><tr><td>url()</td><td align="left">URL函数接受一个XML文件，该文件设置了 一个SVG滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。例如：<code>filter: url(svg-url#element-id)</code></td></tr></tbody></table></div>        <h2 id="混合模式"   >          <a href="#混合模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mix-blend-mode: normal; //正常</span><br><span class="line">mix-blend-mode: multiply; //正片叠底</span><br><span class="line">mix-blend-mode: screen; //滤色</span><br><span class="line">mix-blend-mode: overlay; //叠加</span><br><span class="line">mix-blend-mode: darken; //变暗</span><br><span class="line">mix-blend-mode: lighten; //变亮</span><br><span class="line">mix-blend-mode: color-dodge; //颜色减淡</span><br><span class="line">mix-blend-mode: color-burn; //颜色加深</span><br><span class="line">mix-blend-mode: hard-light; //强光</span><br><span class="line">mix-blend-mode: soft-light; //柔光</span><br><span class="line">mix-blend-mode: difference; //差值</span><br><span class="line">mix-blend-mode: exclusion; //排除</span><br><span class="line">mix-blend-mode: hue; //色相</span><br><span class="line">mix-blend-mode: saturation; //饱和度</span><br><span class="line">mix-blend-mode: color; //颜色</span><br><span class="line">mix-blend-mode: luminosity; //亮度</span><br><span class="line">mix-blend-mode: initial; //初始</span><br><span class="line">mix-blend-mode: inherit; //继承</span><br><span class="line">mix-blend-mode: unset; //复原</span><br></pre></td></tr></table></div></figure>        <h2 id="滚动贴合-Scroll-Snap"   >          <a href="#滚动贴合-Scroll-Snap" class="heading-link"><i class="fas fa-link"></i></a><a href="#滚动贴合-Scroll-Snap" class="headerlink" title="滚动贴合 Scroll Snap"></a>滚动贴合 Scroll Snap</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">scroll-snap-type:y mandatory;</span><br><span class="line">overflow:scroll;</span><br><span class="line">height:100vh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">section&#123;</span><br><span class="line">width:100vw;</span><br><span class="line">height:100vh;</span><br><span class="line">scroll-snap-align:start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="子元素hover改变父元素css"   >          <a href="#子元素hover改变父元素css" class="heading-link"><i class="fas fa-link"></i></a><a href="#子元素hover改变父元素css" class="headerlink" title="子元素hover改变父元素css"></a>子元素hover改变父元素css</h2>      <figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.parent</span> &#123;  </span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.parent</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  parent - you can hover over here and it won&#x27;t trigger</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>hover over the child instead!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>内容超出屏幕不显示滚动条：父元素设置<code>overflow:scroll</code></p></li><li><p>flex布局单个子元素靠右：<code>margin-left:auto</code></p></li><li><p>绝对定位居中：</p><ul><li><code>margin:auto</code></li><li><code>top:50%;left:50%</code></li><li><code>transform:translate(-50%,-50%)</code></li></ul></li></ul>        <h2 id="height-auto-transition不生效"   >          <a href="#height-auto-transition不生效" class="heading-link"><i class="fas fa-link"></i></a><a href="#height-auto-transition不生效" class="headerlink" title="height auto transition不生效"></a>height auto transition不生效</h2>      <p>使用<code>max-height</code>代替<code>height</code>：</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-id">#list</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: max-height <span class="number">0.15s</span> ease-out;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d5d5d5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#list</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: max-height <span class="number">0.25s</span> ease-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="移动端"   >          <a href="#移动端" class="heading-link"><i class="fas fa-link"></i></a><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1>      <p><img src="/../images/uisdc-gj-20220824-7.jpg" alt="如何构建界面设计框架？4个维度帮你掌握起来！"></p><p><img src="/../images/uisdc-gj-20220824-8.jpg" alt="如何构建界面设计框架？4个维度帮你掌握起来！"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;页面尺寸的选择&quot;   &gt;
          &lt;a href=&quot;#页面尺寸的选择&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#页面尺寸的选择&quot; class=&quot;headerlink&quot; title=&quot;页面尺寸的选择&quot;&gt;&lt;/a&gt;页面尺寸的选择&lt;/h1&gt;
      
        &lt;h2 id=&quot;网页宽度-amp-有效可视区&quot;   &gt;
          &lt;a href=&quot;#网页宽度-amp-有效可视区&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#网页宽度-amp-有效可视区&quot; class=&quot;headerlink&quot; title=&quot;网页宽度&amp;amp;有效可视区&quot;&gt;&lt;/a&gt;网页宽度&amp;amp;有效可视区&lt;/h2&gt;
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网页宽度&lt;/strong&gt;：进行页面设计时画板的宽度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有效可视区&lt;/strong&gt;：网页内容所占的宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/2107_01.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="设计" scheme="https://lzmustb.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue3应用练习</title>
    <link href="https://lzmustb.github.io/2022/10/03/my-first-vue-app/"/>
    <id>https://lzmustb.github.io/2022/10/03/my-first-vue-app/</id>
    <published>2022-10-03T04:23:24.000Z</published>
    <updated>2023-09-25T12:47:55.333Z</updated>
    
    <content type="html"><![CDATA[<p>在跟着<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1QU4y1E7qo/" >Vue3通用后台管理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>敲完代码，又对着Vue3文档学了个大概后，做了个应用试手。</p><span id="more"></span><hr>        <h1 id="技术栈"   >          <a href="#技术栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1>      <ul><li>Vue3</li><li>Vite</li><li>vue-router</li><li>pinia</li><li>element-Plus</li></ul><hr>        <h1 id="实现的功能"   >          <a href="#实现的功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h1>      <ul><li>通过<code>增加批注</code>按钮给文章的选定段落增加批注。</li><li>批注包括<code>名称</code>，<code>批注内容</code>，<code>时间</code>，<code>选定段落</code></li><li>增加的<code>批注</code>会显示在文章的侧栏。</li><li><strong>点击批注</strong>会标记该批注和选定的段落，且同时只有一个批注会被选定。</li><li>在<strong>批注汇总</strong>页显示所有文章的所有批注。</li><li>在<strong>批注汇总</strong>页<strong>点击批注</strong>会跳转到目标批注所在的文章及段落，同时使该批注被选定。</li></ul><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221003124743017.png" alt="image-20221003124743017" style="zoom: 25%;" /><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20221003124822698.png" alt="image-20221003124822698" style="zoom: 25%;" /><hr>        <h1 id="遇到的问题"   >          <a href="#遇到的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1>              <h2 id="onClick事件内注册的click侦听器会直接被触发"   >          <a href="#onClick事件内注册的click侦听器会直接被触发" class="heading-link"><i class="fas fa-link"></i></a><a href="#onClick事件内注册的click侦听器会直接被触发" class="headerlink" title="onClick事件内注册的click侦听器会直接被触发"></a>onClick事件内注册的click侦听器会直接被触发</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮绑定了onclick事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClickEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//update()会在按钮时直接被触发</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>解决方法</strong>：将<code>click</code>事件换成<code>mousedown</code></p>        <h2 id="在点击批注跳转后使该批注变成选定状态"   >          <a href="#在点击批注跳转后使该批注变成选定状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#在点击批注跳转后使该批注变成选定状态" class="headerlink" title="在点击批注跳转后使该批注变成选定状态"></a>在点击批注跳转后使该批注变成选定状态</h2>      <p><strong>解决方法</strong>：<code>onActivated()</code></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;onActivated&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">onActivated</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//每当页面被重新加载就会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h2 id="多行文字的截取省略"   >          <a href="#多行文字的截取省略" class="heading-link"><i class="fas fa-link"></i></a><a href="#多行文字的截取省略" class="headerlink" title="多行文字的截取省略"></a>多行文字的截取省略</h2>      <p><strong>解决方法</strong>：找准文字所在的块级元素</p><figure class="highlight css"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>; //限制的行数</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>我的前端学习比较断断续续，缺乏练习和规范，导致实际操作起来试错很多。虽然遇到的问题最终都解决了，但做一个省略了UI的小功能应用还花了将近两天时间。而且这次实践也让我体会到UI设计并不容易，得进行系统的学习。更不要妄想不打设计稿，边敲代码边设计。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在跟着&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://www.bilibili.com/video/BV1QU4y1E7qo/&quot; &gt;Vue3通用后台管理&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;敲完代码，又对着Vue3文档学了个大概后，做了个应用试手。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="https://lzmustb.github.io/2022/09/25/Vue3-conclusion/"/>
    <id>https://lzmustb.github.io/2022/09/25/Vue3-conclusion/</id>
    <published>2022-09-25T14:03:42.000Z</published>
    <updated>2024-06-05T00:28:05.743Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Vue3"   >          <a href="#Vue3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1>      <p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><span id="more"></span><hr>        <h1 id="开发步骤"   >          <a href="#开发步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1>              <h2 id="step-0-构建"   >          <a href="#step-0-构建" class="heading-link"><i class="fas fa-link"></i></a><a href="#step-0-构建" class="headerlink" title="step_0_构建"></a>step_0_构建</h2>              <h3 id="Vite脚手架"   >          <a href="#Vite脚手架" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vite脚手架" class="headerlink" title="Vite脚手架"></a>Vite脚手架</h3>      <p>通过脚手架，可以快速构建项目预设，包含<code>main.js</code>，<code>App.vue</code>以及<code>/src</code>文件夹等。</p><p><strong>※用npm安装插件后若热更新失效，可以用yarn重装一遍</strong></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//安装vite脚手架并构建预设vue项目</span><br><span class="line">yarn[cnpm] create vite my-vue-app --template vue</span><br><span class="line"></span><br><span class="line">//进入项目根目录，安装</span><br><span class="line">cd my-vue-app</span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">//创建本地服务器，进入开发模式</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></div></figure>        <h3 id="elementPlus引入"   >          <a href="#elementPlus引入" class="heading-link"><i class="fas fa-link"></i></a><a href="#elementPlus引入" class="headerlink" title="elementPlus引入"></a>elementPlus引入</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入根目录，安装element-Plus</span></span><br><span class="line">cnpm install element-plus --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">cnpm install -D unplugin-vue-components unplugin-auto-<span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入到vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>完整引入Icon</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) &#123;</span><br><span class="line">  app.<span class="title function_">component</span>(key, component)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="安装-amp-配置-vue-router"   >          <a href="#安装-amp-配置-vue-router" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-amp-配置-vue-router" class="headerlink" title="安装&amp;配置 vue-router"></a>安装&amp;配置 vue-router</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//项目根目录，安装4.0以上vue-router</span></span><br><span class="line">npm install vue-router@<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;src/router/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储路径</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;intro&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/Intro.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></div></figure>        <h4 id="Token验证"   >          <a href="#Token验证" class="heading-link"><i class="fas fa-link"></i></a><a href="#Token验证" class="headerlink" title="Token验证"></a>Token验证</h4>      <ul><li>定义需要token验证的页面</li></ul>        <h3 id="安装-amp-配置-pinia"   >          <a href="#安装-amp-配置-pinia" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-amp-配置-pinia" class="headerlink" title="安装&amp;配置 pinia"></a>安装&amp;配置 pinia</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根目录</span></span><br><span class="line">npm install pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;src/store/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;id&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">isCollapse</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">currentMenu</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">tabsList</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="attr">label</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">menu</span>:[</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">token</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h2 id="step-1-创建应用实例"   >          <a href="#step-1-创建应用实例" class="heading-link"><i class="fas fa-link"></i></a><a href="#step-1-创建应用实例" class="headerlink" title="step_1_创建应用实例"></a>step_1_创建应用实例</h2>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main.<span class="property">js</span><span class="comment">//入口文件</span></span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">1.</span>创建应用实例--&gt;</span><br><span class="line"><span class="comment">//导入createApp，单文件根组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//createApp(根组件,根组件Props[可选])</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">/*---外部导入↑或↓内联---*/</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="comment">/*内联根组件*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">2.</span>引入router,pinia--&gt;</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">3.</span>将应用实例挂载在一个容器元素中--&gt;</span><br><span class="line"><span class="comment">//mount(DOM元素或CSS选择器)</span></span><br><span class="line"><span class="comment">//每个应用实例仅能调用一次mount()</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">/*---CSS选择器↑或↓DOM元素---*/</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>)</span><br></pre></td></tr></table></div></figure><p>App相关方法，属性</p><ul><li><code>unmount()</code>：卸载一个已挂载的应用</li><li><a href="https://cn.vuejs.org/api/application.html#app-provide"><code>provide()</code></a>：提供一个值，在应用中的所有后代组件中注入使用。</li><li><a href="https://cn.vuejs.org/api/application.html#app-component"><code>component()</code></a>：注册组件</li><li><a href="https://cn.vuejs.org/api/application.html#app-directive"><code>directive()</code></a>：注册指令</li><li><a href="https://cn.vuejs.org/api/application.html#app-use"><code>use()</code></a>：安装一个插件</li><li><code>version</code>：当前应用所使用的 Vue 版本号</li><li><a href="https://cn.vuejs.org/api/application.html#app-config"><code>config</code></a>：对这个应用的配置设定</li><li><a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties"><code>config.globalProperties</code></a>：注册能够被应用内所有组件访问的全局属性的对象</li></ul>        <h2 id="step2-组件-component"   >          <a href="#step2-组件-component" class="heading-link"><i class="fas fa-link"></i></a><a href="#step2-组件-component" class="headerlink" title="step2_组件(component)"></a>step2_组件(component)</h2>      <p>命名建议：PascalCase(所有首字母大写)</p>        <h3 id="pinia的使用"   >          <a href="#pinia的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#pinia的使用" class="headerlink" title="pinia的使用"></a>pinia的使用</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="router的使用"   >          <a href="#router的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#router的使用" class="headerlink" title="router的使用"></a>router的使用</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const router = useRouter();</span><br><span class="line">    </span><br><span class="line">router.push(&#123;</span><br><span class="line">path: &#x27;/movieDetail&#x27;,</span><br><span class="line">query: &#123;</span><br><span class="line">keyword: movie_id</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="创建组件"   >          <a href="#创建组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3>              <h2 id="step3-测试"   >          <a href="#step3-测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#step3-测试" class="headerlink" title="step3_测试"></a>step3_测试</h2>              <h3 id="单元测试"   >          <a href="#单元测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/scaling-up/testing.html#unit-testing" >单元测试</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>侧重于逻辑上的正确性，只关注应用整体功能的一小部分。</p><hr>        <h1 id="单文件组件"   >          <a href="#单文件组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1>      <blockquote><p><strong>前端开发的关注点不是完全基于文件类型分离的</strong>。在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。</p></blockquote><p>将一个Vue组件的模板(html)，逻辑(javascript)，样式(css)封装在单个文件<code>*.vue</code>中。</p><p>每个文件都由三种顶层语言模块构成：<code>&lt;template&gt;</code> <code>&lt;style&gt;</code> <code>&lt;script&gt;</code> </p>        <h2 id="lt-template-gt"   >          <a href="#lt-template-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-template-gt" class="headerlink" title="&lt;template&gt;"></a>&lt;template&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件最多包含一个<code>&lt;template&gt;</code>标签。标签中可以使用原生html，<code>\&lt;router-view/&gt;</code>，以及element-Plus等UI框架提供的API等。</li></ul>        <h2 id="lt-style-gt"   >          <a href="#lt-style-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-gt" class="headerlink" title="&lt;style&gt;"></a>&lt;style&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件可以包含<strong>多个</strong> <code>&lt;style&gt;</code> 标签。标签内使用css相关语言</li></ul>        <h3 id="lt-style-scoped-gt"   >          <a href="#lt-style-scoped-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-scoped-gt" class="headerlink" title="&lt;style scoped&gt;"></a>&lt;style scoped&gt;</h3>      <p>带有<code>scoped</code>属性的style标签值会影响当前组件内的元素。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">-----↓↓↓通过 PostCSS 将内容转化↓↓↓-----</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span><span class="selector-attr">[data-v-f3f3eg9]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">data-v-f3f3eg9</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>※子组件的根元素只有<strong>一个</strong>时<font color=#aaa>(<code>&lt;template&gt;</code>内的最外层元素)</font>会附带父组件的<code>data-v-hash</code>，同时被父组件的样式和子组件的样式影响。</p><p><strong>当子组件和父组件有同名class的选择器时，父组件样式会覆盖子组件样式</strong>。</p><p>子组件设置<code>inheritAttrs</code>为<code>false</code>，非<code>props</code>属性不会应用到子组件根元素上。但父组件使用标签选择器时，子组件样式依然被影响。</p>        <h4 id="选择器"   >          <a href="#选择器" class="heading-link"><i class="fas fa-link"></i></a><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4>      <ul><li><code>:deep()</code></li><li><code>:slotted()</code></li><li><code>:global()</code></li><li><strong>小心递归组件中的后代选择器</strong>！对于一个使用了 <code>.a .b</code> 选择器的样式规则来说，如果匹配到 <code>.a</code> 的元素包含了一个递归的子组件，那么所有的在那个子组件中的 <code>.b</code> 都会匹配到这条样式规则。</li></ul>        <h3 id="lt-style-module-gt"   >          <a href="#lt-style-module-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-style-module-gt" class="headerlink" title="&lt;style module&gt;"></a>&lt;style module&gt;</h3>      <p>编译为CSS Modules(<span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/sfc-css-features.html#css-modules" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p>        <h3 id="v-bind"   >          <a href="#v-bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-bind" class="headerlink" title="v-bind()"></a>v-bind()</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(color);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>自定义属性会通过内联样式的方式应用到组件的根元素上，并且在源值变更的时候响应式地更新</p>        <h3 id="预处理器"   >          <a href="#预处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/sfc-spec.html#pre-processors" >暂略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="lt-script-gt"   >          <a href="#lt-script-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-script-gt" class="headerlink" title="&lt;script&gt;"></a>&lt;script&gt;</h2>      <ul><li>每个 <code>*.vue</code> 文件最多可以包含一个<code>&lt;script&gt;</code>和 <code>&lt;script setup&gt;</code></li></ul>        <h3 id="构成"   >          <a href="#构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#构成" class="headerlink" title="构成"></a>构成</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 返回值会暴露给模板和其他的选项式 API 钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      count</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>) <span class="comment">// 0</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="export"   >          <a href="#export" class="heading-link"><i class="fas fa-link"></i></a><a href="#export" class="headerlink" title="export"></a>export</h3>      <p><code>export</code>用于导出单文件组件的<strong>选项对象</strong>，以便在其他组件中用<code>import</code>引入。<code>export default</code>导出为一整个模块，<code>export</code>可以分别命名导出的模块。一个js中只能由一个<code>export default</code>，但可以有多个<code>export</code>。</p><p>main.js在构造根组件时，如果根组件包含其他子组件，那么Vue会通过引入的<strong>选项对象</strong>构造对应的组件。</p>        <h2 id="组件使用"   >          <a href="#组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2>              <h3 id="注册子组件"   >          <a href="#注册子组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册子组件" class="headerlink" title="注册子组件"></a>注册子组件</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//局部组件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//注册子组件，可在模板中任意使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//全局组件(main.js中)</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line">app.component(&#x27;Child&#x27;,ChildComponent)</span><br></pre></td></tr></table></div></figure><p>每个组件都是独立的实例，维护独立的属性。</p>        <h3 id="组件参数-Props"   >          <a href="#组件参数-Props" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件参数-Props" class="headerlink" title="组件参数-Props"></a>组件参数-Props</h3>      <ul><li>通过Props属性，子组件可以从父组件接收参数。</li><li>当使用对象形式声明props时，值为该prop预期类型的构造函数。该方法可以在prop传入错误类型时抛出警告。</li><li>可以用一个<code>const</code>变量取接收<code>defineProps()</code>返回的对象</li><li>所有prop都是可选的，除非声明<code>required:true</code></li><li>未传递的prop默认值为<code>undefined</code>或Boolean则为<code>false</code></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props=<span class="title function_">defineProps</span>([<span class="string">&#x27;title&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    &lt;!--或者--&gt;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">propA</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义类型校验</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">validator</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--也可通过v-bind传递变量--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--批量传入Props(post对象包含所有props)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">v-bind</span>=<span class="string">&quot;post&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值</p><p><font color=#b00>※prop在子组件中是只读的，当你尝试修改时，vue会抛出警告</font></p><blockquote><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。</p><p>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在大多数场景下，子组件应该<strong>抛出一个事件</strong>来通知父组件做出改变。</p></blockquote>        <h3 id="组件事件-Emits"   >          <a href="#组件事件-Emits" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件事件-Emits" class="headerlink" title="组件事件-Emits"></a>组件事件-Emits</h3>      <ul><li>通过Emits属性，子组件可以抛出一个事件，给父组件接收</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineEmits</span>([<span class="string">&#x27;enlarge-text&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span>Enlarge text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize : postFontSize +&#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span> @<span class="attr">enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="事件参数-amp-事件校验"   >          <a href="#事件参数-amp-事件校验" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件参数-amp-事件校验" class="headerlink" title="事件参数&amp;事件校验"></a>事件参数&amp;事件校验</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/events.html#event-arguments" >略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="组件向上暴露数据-Expose"   >          <a href="#组件向上暴露数据-Expose" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件向上暴露数据-Expose" class="headerlink" title="组件向上暴露数据-Expose"></a>组件向上暴露数据-Expose</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--子组件中--&gt;</span><br><span class="line">&lt;script setup&gt;   </span><br><span class="line">    const flag=ref(false);</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">    flag</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--父组件中--&gt;</span><br><span class="line">&lt;div &gt;</span><br><span class="line">  &lt;Child ref=&quot;child&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const child = ref(null);</span><br><span class="line">//flag暴露为child.vallue.flag</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="Provide-amp-Inject"   >          <a href="#Provide-amp-Inject" class="heading-link"><i class="fas fa-link"></i></a><a href="#Provide-amp-Inject" class="headerlink" title="Provide&amp;Inject"></a>Provide&amp;Inject</h3>      <p>在祖先组件通过provide()提供的数据，可供其任何子组件使用。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--多个子组件中--&gt;</span><br><span class="line">&lt;script setup&gt;   </span><br><span class="line">const flag = inject(&quot;flag&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--共同的祖父组件中--&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    const flag=ref(false);</span><br><span class="line">provide(&quot;flag&quot;, flag);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="插槽-slot"   >          <a href="#插槽-slot" class="heading-link"><i class="fas fa-link"></i></a><a href="#插槽-slot" class="headerlink" title="插槽-slot"></a>插槽-slot</h3>      <p>通过slot，父组件可以向子组件传递元素，从而在子组件中完成渲染。</p><p>※插槽的内容无法访问到子组件的状态</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AlertBox</span>&gt;</span></span><br><span class="line">  Something bad happened.</span><br><span class="line"><span class="tag">&lt;/<span class="name">AlertBox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件中,slot部分会被父组件传入的元素取代--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>可在此填入默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="具名插槽"   >          <a href="#具名插槽" class="heading-link"><i class="fas fa-link"></i></a><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4>      <p>带 <code>name</code> 属性的插槽被称为具名插槽 (named slots)，未提供<code>name</code>则隐式地命名为“default”。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--或简写--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 插槽的内容放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="作用域插槽"   >          <a href="#作用域插槽" class="heading-link"><i class="fas fa-link"></i></a><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/slots.html#scoped-slots" >略</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="动态切换组件"   >          <a href="#动态切换组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态切换组件" class="headerlink" title="动态切换组件"></a>动态切换组件</h3>      <p>通过<code>component</code>元素和<code>is</code>属性可以实现动态组件，<code>is</code>的值可以是<strong>被注册的组件名</strong>或<strong>导入的组件对象</strong>。一般情况下，被切换的组件会被销毁。在下次切换回该组件时，会创建一个初始状态的新实例。</p><p>通过<code>&lt;KeepAlive&gt;</code>内置组件包装动态组件，可以缓存被切换的组件。</p><p>可选属性：</p><ul><li><code>max</code>：限制被缓存的数量</li><li><code>include/exclude</code>：可以筛选需要缓存的组件，传入正则表达式或数组，匹配组件的<code>name</code></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123;Component&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:max</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="透传属性"   >          <a href="#透传属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#透传属性" class="headerlink" title="透传属性"></a>透传属性</h3>      <p>当一个属性传递给子组件时，若该属性未被子组件声明为<code>props</code>,<code>emits</code>,<code>v-on</code>事件监听器，则称为<strong>透传attribute</strong>或<code>Non-props</code>。</p><ul><li><p>当子组件<strong>只含单个根元素</strong>，则透传属性会被自动添加到该元素上，并和元素上原有的属性合并。</p></li><li><p>如果子组件A中是另一个组件B，透传属性会传递给组件B</p></li><li><p>在组件<code>export default</code>中设置<code>inheritAttrs: false</code>可以禁用组件透传。</p></li><li><p>在设为禁用后，在子组件中可以通过<code>$attrs</code><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/components/attrs.html#disabling-attribute-inheritance" >访问</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>所有透传属性，并通过<code>v-bind=&quot;$attrs&quot;</code>将透传属性绑定到任意元素上。</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyButton组件只含一个button元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--最终渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;child father&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span></span><br><span class="line">click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="在Js中访问attrs"   >          <a href="#在Js中访问attrs" class="heading-link"><i class="fas fa-link"></i></a><a href="#在Js中访问attrs" class="headerlink" title="在Js中访问attrs"></a>在Js中访问attrs</h4>      <p>以下<code>attrs</code>为非响应式。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 透传 attribute 被暴露为 ctx.attrs</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">attrs</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h1 id="组合式API"   >          <a href="#组合式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1>      <blockquote><ul><li>使用函数而不是声明选项的方式书写Vue组件</li><li>包括响应式API，生命周期钩子，依赖注入</li></ul></blockquote>        <h2 id="组合式API的优势"   >          <a href="#组合式API的优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合式API的优势" class="headerlink" title="组合式API的优势"></a>组合式API的优势</h2>      <p>更灵活地组织代码，让逻辑相关的代码能够集中在一处</p><blockquote><p>组合式 API 不像选项式 API 那样会手把手教你该把代码放在哪里。但反过来，它却让你可以像编写普通的 JavaScript 那样来编写组件代码。这意味着<strong>你能够，并且应该在写组合式 API 的代码时也运用上所有普通 JavaScript 代码组织的最佳实践</strong>。如果你可以编写组织良好的 JavaScript，你也应该有能力编写组织良好的组合式 API 代码。</p></blockquote>        <h2 id="响应式API"   >          <a href="#响应式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h2>              <h3 id="理解响应性"   >          <a href="#理解响应性" class="heading-link"><i class="fas fa-link"></i></a><a href="#理解响应性" class="headerlink" title="理解响应性"></a>理解响应性</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#what-is-reactivity" >Vue的解释</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>响应性是可以声明式地处理变化的编程范式，使一个对象发生变化时，与其相关联的对象也能随之发生变化。</p></blockquote><p>响应式对象： Vue 能够跟踪，访问，修改其属性的对象，实际是JavaScript Proxy。</p>        <h3 id="定义响应式变量-reactive"   >          <a href="#定义响应式变量-reactive" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义响应式变量-reactive" class="headerlink" title="定义响应式变量-reactive()"></a>定义响应式变量-reactive()</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></div></figure>        <h4 id="reactive-规则"   >          <a href="#reactive-规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#reactive-规则" class="headerlink" title="reactive()规则"></a>reactive()规则</h4>      <ul><li><p>Proxy和原始对象并非全等，因此使用Vue 的响应式系统应<strong>仅使用你声明对象的代理版本</strong>。</p></li><li><p>已存在的代理对象传入<code>reactive()</code>会返回该代理本身。</p></li><li><p>同一个对象传入<code>reactive()</code>总是会返回同一个代理对象。</p></li><li><p><code>reactive()</code>对原始数据类型无效。</p></li><li><p>将<code>reactive()</code>响应式对象解构或传入函数时，失去响应性连接。</p></li><li><p>当一个变量多次接受<code>reactive()</code>返回的代理对象，旧的响应式连接会丢失。</p></li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 上面的 (&#123; count: 0 &#125;) 将不再被追踪</span></span><br><span class="line">state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></div></figure>        <h3 id="定义响应式变量-ref"   >          <a href="#定义响应式变量-ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义响应式变量-ref" class="headerlink" title="定义响应式变量-ref()"></a>定义响应式变量-ref()</h3>      <p><code>ref()</code>可以创建任何值类型的响应式，且传给函数或是从一般对象上被解构时，不会丢失响应性，可用于将逻辑提取到 <span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/reusability/composables.html" >组合函数</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">const object = &#123;foo:ref(1)&#125;</span><br><span class="line">//ref()将创建一个带value属性的对象</span><br><span class="line">//count=&#123;value:0&#125;</span><br><span class="line">//count.value=0</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure><p>当ref是模板渲染上下文的顶层属性或文本插值计算的最终值时将自动解包</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- ↓解包，结果为：0 --&gt;</span><br><span class="line">&#123;&#123; count &#125;&#125;</span><br><span class="line">&lt;!-- ↓解包，结果为：1 --&gt;</span><br><span class="line">&#123;&#123;object.foo&#125;&#125;</span><br><span class="line">&lt;!-- ↓不解包，结果为：[object Object]1 --&gt;</span><br><span class="line">&#123;&#123;object.foo+1&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#ref-unwrapping-in-reactive-objects" >ref在响应式对象中的解包</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（略）</p>        <h3 id="计算属性-computed"   >          <a href="#计算属性-computed" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性-computed" class="headerlink" title="计算属性 computed()"></a>计算属性 computed()</h3>      <p><code>computed()</code>方法接收一个getter函数，并返回一个计算属性<strong>ref</strong>，与一般ref用法类似。计算属性会自动追踪响应式依赖并随之变化。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setup内</span></span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> sign = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number&gt;<span class="number">0</span>?<span class="string">&#x27;plus&#x27;</span>:<span class="string">&#x27;minus&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><p>与直接调用方法相比，计算属性会有<strong>缓存</strong>功能，只要其响应式依赖不改变，计算属性就会立即返回先前的结果而不重复计算。<br>一般方法会在每次页面重渲染时执行<br><font color='#aaa'>※计算函数不应进行计算以外的作用(如更改DOM或做异步请求)</font></p>        <h2 id="生命周期钩子"   >          <a href="#生命周期钩子" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2>      <p>在<strong>某一时刻</strong>会<strong>自动执行</strong>的函数</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/lifecycle.16e4c08e.png" alt="组件生命周期图示"></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在实例生成之前</span></span><br><span class="line"><span class="title function_">beforeCreate</span>()</span><br><span class="line"><span class="comment">//在实例生成之后</span></span><br><span class="line"><span class="title function_">created</span>()</span><br><span class="line"><span class="comment">//组件渲染前</span></span><br><span class="line"><span class="title function_">beforeMount</span>()</span><br><span class="line"><span class="comment">//在组件被渲染到页面后</span></span><br><span class="line"><span class="title function_">mounted</span>()</span><br><span class="line"><span class="comment">//在数据发生变化前</span></span><br><span class="line"><span class="title function_">beforeUpdate</span>()</span><br><span class="line"><span class="comment">//在数据发生变化，页面重新渲染后</span></span><br><span class="line"><span class="title function_">updated</span>()</span><br><span class="line"><span class="comment">//当实例销毁前</span></span><br><span class="line"><span class="title function_">beforeUnmounted</span>()</span><br><span class="line"><span class="comment">//实例销毁后</span></span><br><span class="line"><span class="title function_">unmounted</span>()</span><br></pre></td></tr></table></div></figure><p>以上API全部在<code>setup()</code>阶段被调用</p><p>router-view切换时调用：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onActivated, onDeactivated &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用时机为首次挂载</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以及每次从缓存中被重新插入时</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onDeactivated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在从 DOM 上移除、进入缓存</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以及组件卸载时调用</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="依赖注入"   >          <a href="#依赖注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2>              <h2 id="使用组合式API"   >          <a href="#使用组合式API" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用组合式API" class="headerlink" title="使用组合式API"></a>使用组合式API</h2>              <h3 id="setup"   >          <a href="#setup" class="heading-link"><i class="fas fa-link"></i></a><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3>      <p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口，通常只在以下情况下使用：</p><ol><li>需要在非单文件组件中使用组合式 API 时。</li><li>需要在基于选项式 API 的组件中使用组合式 API 的代码时。</li></ol><p><strong>其他情况下，都应优先使用&lt;script setup&gt;语法。</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;    </span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props,context) &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line">    // 通过return返回的变量会暴露给模板和其他的选项式API钩子</span><br><span class="line">    return &#123;</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure><blockquote><p>在模板中访问从 <code>setup</code> 返回的 <span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/api/reactivity-core.html#ref" >ref</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 时，它会<span class="exturl"><a class="exturl__link"   href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#deep-reactivity" >自动浅层解包</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，因此你无须再在模板中为它写 <code>.value</code>。当通过 <code>this</code> 访问时也会同样如此解包。<br><code>setup()</code> 自身并不含对组件实例的访问权，即在 <code>setup()</code> 中访问 <code>this</code> 会是 <code>undefined</code>。你可以在选项式 API 中访问组合式 API 暴露的值，但反过来则不行。</p></blockquote>        <h3 id="lt-script-setup-gt"   >          <a href="#lt-script-setup-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-script-setup-gt" class="headerlink" title="&lt;script setup&gt;"></a>&lt;script setup&gt;</h3>      <ul><li><code>defineProps()</code>：声明</li></ul>        <h1 id="Vue指令"   >          <a href="#Vue指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1>              <h2 id="动态属性"   >          <a href="#动态属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:</span>[<span class="attr">name</span>]=<span class="string">&#x27;message&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name=<span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message=<span class="string">&#x27;helloworld&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-text"   >          <a href="#v-text" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2>      <p>更新文本内容</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="v-show"   >          <a href="#v-show" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2>      <p>设置内联<code>display</code>属性</p>        <h2 id="v-if-x2F-v-else-if-x2F-v-else"   >          <a href="#v-if-x2F-v-else-if-x2F-v-else" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-if-x2F-v-else-if-x2F-v-else" class="headerlink" title="v-if&#x2F;v-else-if&#x2F;v-else"></a>v-if&#x2F;v-else-if&#x2F;v-else</h2>      <p>可用于<code>&lt;template&gt;</code>表示仅包含文本或多个元素的条件块。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-for"   >          <a href="#v-for" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2>      <p>v-for中对<strong>对象</strong>迭代时，最多可使用值，键，索引三个相关变量(顺序固定)</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> list=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key1</span>:value1,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key2</span>:value2</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//循环十次</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="v-on"   >          <a href="#v-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2>              <h3 id="修饰符"   >          <a href="#修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件修饰符:stop,prevent,capture,self,once,passive</span><br><span class="line">click:left,right,middle...</span><br><span class="line">keydown:enter,tab,delete</span><br><span class="line">精确修饰符:exact</span><br></pre></td></tr></table></div></figure>        <h2 id="v-bind-1"   >          <a href="#v-bind-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-bind-1" class="headerlink" title="v-bind"></a>v-bind</h2>              <h2 id="v-once"   >          <a href="#v-once" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2>              <h2 id="v-model"   >          <a href="#v-model" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message=[];</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;VALUE&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="v-model-lazy"   >          <a href="#v-model-lazy" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-lazy" class="headerlink" title="v-model.lazy"></a>v-model.lazy</h3>      <p>数据同步减慢，当事件不再被触发的时候再更新数据</p>        <h3 id="v-model-number"   >          <a href="#v-model-number" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-number" class="headerlink" title="v-model.number"></a>v-model.number</h3>      <p>绑定时进行数据类型转换</p>        <h3 id="v-model-trim"   >          <a href="#v-model-trim" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-trim" class="headerlink" title="v-model.trim"></a>v-model.trim</h3>      <p>去除前后空格</p>        <h1 id="TIPS"   >          <a href="#TIPS" class="heading-link"><i class="fas fa-link"></i></a><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1>              <h2 id="auto-scroll"   >          <a href="#auto-scroll" class="heading-link"><i class="fas fa-link"></i></a><a href="#auto-scroll" class="headerlink" title="auto-scroll"></a>auto-scroll</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=&quot;autoScroll&quot;&gt;</span><br><span class="line">需要滚动的元素    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const autoScroll = ref(null)</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    nextTick(() =&gt; &#123;</span><br><span class="line">        let scrollElem = autoScroll.value;</span><br><span class="line">        scrollElem.scrollTo(&#123; top: scrollElem.scrollHeight, behavior: &#x27;smooth&#x27; &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="动态class"   >          <a href="#动态class" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态class" class="headerlink" title="动态class"></a>动态class</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class=&quot;&#123;&#x27;class1&#x27;:true,&#x27;class2&#x27;:false&#125;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="获取dom元素并修改style"   >          <a href="#获取dom元素并修改style" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取dom元素并修改style" class="headerlink" title="获取dom元素并修改style"></a>获取dom元素并修改style</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=&quot;content&quot; @click=&quot;changeStyle&quot;&gt;ABC&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const content = ref()</span><br><span class="line">const changeStyle = () =&gt; &#123;</span><br><span class="line">    content.value.style.color=&quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>        <h1 id="路由切换-x2F-router"   >          <a href="#路由切换-x2F-router" class="heading-link"><i class="fas fa-link"></i></a><a href="#路由切换-x2F-router" class="headerlink" title="路由切换&#x2F;router"></a>路由切换&#x2F;router</h1>      ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue3&quot;   &gt;
          &lt;a href=&quot;#Vue3&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;
      &lt;p&gt;Vue (发音为 &amp;#x2F;vjuː&amp;#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://lzmustb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java坦克大战个人总结</title>
    <link href="https://lzmustb.github.io/2022/04/29/my-TankWar-conclusion/"/>
    <id>https://lzmustb.github.io/2022/04/29/my-TankWar-conclusion/</id>
    <published>2022-04-29T07:03:30.000Z</published>
    <updated>2022-09-25T09:17:44.301Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;刚学完Java，为了巩固所学，做了个坦克大战。这次主要挑战了下自定义地图和敌人寻路两个功能。</p><span id="more"></span>        <h2 id="自定义地图"   >          <a href="#自定义地图" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义地图" class="headerlink" title="自定义地图"></a>自定义地图</h2>      <p>自定义地图比较简单，只要将地图作为外部文件读取就可以了。</p><p>如这么一个txt文件，W是墙壁，P是玩家起始位置，E是敌人起始位置（可以有多个）：</p><blockquote><p>WWWWWW<br>WPOOOW<br>WOOOEW<br>WWWWWW</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/tankwar.png"></p><p>读取文件基本结构：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String filePath=<span class="string">&quot;../maps/&quot;</span>+name+<span class="string">&quot;.txt&quot;</span>;<span class="comment">//用String生成文件路径，可以根据传入的name读取不同文件</span></span><br><span class="line">      InputStream inputStream=getClass().getResourceAsStream(filePath);</span><br><span class="line">      <span class="type">int</span> data;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span>((data=inputStream.read())!=-<span class="number">1</span>)&#123;<span class="comment">//read()返回-1，说明读取完毕</span></span><br><span class="line">              <span class="type">char</span> ele=(<span class="type">char</span>)data;<span class="comment">//将以整数读取的数据转换为字符</span></span><br><span class="line">              ......</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="敌人寻路"   >          <a href="#敌人寻路" class="heading-link"><i class="fas fa-link"></i></a><a href="#敌人寻路" class="headerlink" title="敌人寻路"></a>敌人寻路</h2>      <p>&amp;emsp;&amp;emsp;常用的寻路算法有广度优先搜索，A-star算法等等。但这次我还是打算自己挑战一下写一个适合这个程序的算法。<del>其实是没学会怎么写</del><br>最后经舍友启发，写出了一个虽然不是最优路径，但很简短的寻路算法。</p>        <h3 id="核心思路"   >          <a href="#核心思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3>      <p>从起点开始依次遍历相邻方格，并让它们指向起点的方向（好比单向链表），形象点说就是在所有可以行走的方格画上箭头，指向起点。待所有方格填完，再从<strong>终点</strong>沿着箭头寻回起点，就形成了一条唯一的路径。（最后还要反转一下）</p><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/tankwar2.png"></p>        <h3 id="地图存储方式"   >          <a href="#地图存储方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#地图存储方式" class="headerlink" title="地图存储方式"></a>地图存储方式</h3>      <p>对于寻路来说，不需要知道地图的所有信息，只要知道每个方格能否通过就行。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> Px;</span><br><span class="line">    <span class="type">int</span> Py;</span><br><span class="line">    <span class="type">boolean</span> canPass;<span class="comment">//是否可以通过（水流，墙壁为无法通过的地形）</span></span><br><span class="line">    Node last=<span class="literal">null</span>;<span class="comment">//用于在寻路算法中形成指向起点的链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用Vector存储结点集合</span></span><br><span class="line">Vector&lt;Node&gt; nodes=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line"><span class="comment">//用于获取相邻4个结点中可以通过的方格的方法，在后续寻路时起到重要作用</span></span><br><span class="line">    Vector&lt;Node&gt; <span class="title function_">neighbors</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        Vector&lt;Node&gt; neighborNodes=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Node n:nodes)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n.Px-x==-<span class="number">1</span>||n.Px-x==<span class="number">1</span>)&amp;&amp;(n.Py==y)&amp;&amp;(n.isOpen&amp;&amp;n.canPass))&#123;</span><br><span class="line">                neighborNodes.add(n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((n.Px==x)&amp;&amp;(n.Py-y==-<span class="number">1</span>||n.Py-y==<span class="number">1</span>)&amp;&amp;(n.isOpen&amp;&amp;n.canPass))&#123;</span><br><span class="line">                neighborNodes.add(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neighborNodes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>用Graph类存储所有方格的信息，并提供寻路中要用到的算法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    Vector&lt;Node&gt; nodes=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">setGraph</span><span class="params">()</span>;<span class="comment">//根据读取的文件初始化所有方格的信息（略）</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">clearAll</span><span class="params">()</span>;<span class="comment">//使所有node的last=null，以便下一轮寻路（略）</span></span><br><span class="line">     Node <span class="title function_">findNode</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;<span class="comment">//根据坐标找到相应的node（略）</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">setVector</span><span class="params">(Node now)</span>;<span class="comment">//核心算法，给所有方格填上箭头</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">setRoute</span><span class="params">(Node start,Node goal,Vector&lt;Node&gt; route)</span>;<span class="comment">//寻回起点，形成路径</span></span><br><span class="line">     Vector&lt;Node&gt; <span class="title function_">reverseRoute</span><span class="params">(Vector&lt;Node&gt; route)</span>;<span class="comment">//反转路径【Vector竟然没提供（略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="寻路算法"   >          <a href="#寻路算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#寻路算法" class="headerlink" title="寻路算法"></a>寻路算法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">findRoute</span><span class="params">()</span>&#123;</span><br><span class="line">    Vector&lt;Node&gt; newRoute=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Node&gt;();</span><br><span class="line">    <span class="type">int</span> Tx=MyPanel.player1.p_x;</span><br><span class="line">    <span class="type">int</span> Ty=MyPanel.player1.p_y;</span><br><span class="line">    Node start=graph.findNode(p_x,p_y);<span class="comment">//自身所在位置</span></span><br><span class="line">    Node goal=graph.findNode(Tx,Ty);<span class="comment">//目标所在位置</span></span><br><span class="line">    graph.setVector(start);<span class="comment">//“画箭头”的方法</span></span><br><span class="line">    graph.setRoute(start,goal,newRoute);<span class="comment">//从终点寻回起点，形成路径</span></span><br><span class="line">    route=graph.reverseRoute(newRoute);<span class="comment">//反转路径，从起点指向终点</span></span><br><span class="line">    graph.clearAll();<span class="comment">//清除所有箭头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="用递归”画箭头”"   >          <a href="#用递归”画箭头”" class="heading-link"><i class="fas fa-link"></i></a><a href="#用递归”画箭头”" class="headerlink" title="用递归”画箭头”"></a>用递归”画箭头”</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setVector</span><span class="params">(Node now)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Node n:neighbors(now.Px,now.Py))&#123;</span><br><span class="line">    <span class="comment">//对于now相邻的每个方格n，如果还没有画上箭头，就让n.last=now</span></span><br><span class="line">        <span class="keyword">if</span>(n.last==<span class="literal">null</span>)&#123;</span><br><span class="line">            n.last=now;</span><br><span class="line">            setVector(n);<span class="comment">//递归，直到其相邻方格均画上箭头就停止</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="从终点寻回起点，形成路径"   >          <a href="#从终点寻回起点，形成路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#从终点寻回起点，形成路径" class="headerlink" title="从终点寻回起点，形成路径"></a>从终点寻回起点，形成路径</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setRoute</span><span class="params">(Node start,Node goal,Vector&lt;Node&gt; route)</span>&#123;</span><br><span class="line">    Node now=goal;</span><br><span class="line">    route.add(now);<span class="comment">//将now从终点开始沿着箭头位移，并加入到route</span></span><br><span class="line">    <span class="keyword">while</span>(!now.equals(start))&#123;</span><br><span class="line">        now=now.last;</span><br><span class="line">        route.add(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="多线程能做的事"   >          <a href="#多线程能做的事" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程能做的事" class="headerlink" title="多线程能做的事"></a>多线程能做的事</h2>      <p>&amp;emsp;&amp;emsp;本次坦克大战和飞机大战相比，最大的不同还是用到了多线程。在专业的游戏中，渲染引擎，物理引擎等都是在不同线程下以不同频率工作。相比单线程，更加发挥出了硬件的性能，流畅地运行计算量更大的游戏。<br>我在坦克大战中，将每个敌人作为一个线程，同时每个敌人的【攻击判断，移动，路径生成】为单独的线程，路径每隔3秒生成一次，攻击判断和移动间隔为30毫秒。<br>将行为包装为抽象类，子类行为只要重写job()和canUse()方法就行</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run()为启用线程时执行的方法，job()为抽象方法，子类须重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(KEY!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(canUse())&#123;</span><br><span class="line">                job();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">30</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></div></figure><p>刚刚接触多线程，设计还不到位（比如没有把渲染和物理分离），希望在将来的学习中改进。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;刚学完Java，为了巩固所学，做了个坦克大战。这次主要挑战了下自定义地图和敌人寻路两个功能。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="https://lzmustb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>飞机大战-详细流程</title>
    <link href="https://lzmustb.github.io/2022/04/09/my-GameMakingProcess/"/>
    <id>https://lzmustb.github.io/2022/04/09/my-GameMakingProcess/</id>
    <published>2022-04-09T13:58:20.000Z</published>
    <updated>2023-09-25T12:49:07.258Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下详细的流程</p><span id="more"></span>        <h2 id="easyX库"   >          <a href="#easyX库" class="heading-link"><i class="fas fa-link"></i></a><a href="#easyX库" class="headerlink" title="easyX库"></a>easyX库</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://easyx.cn/" >easyX</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是针对C++的免费绘图库，在制作飞机大战时，需要用该库中的函数来绘制图像。<br><strong>下载安装该库后，使用时需要包含头文件&lt;graphics.h&gt;</strong><br>下面是一定需要用到的函数：</p>        <h3 id="initgraph-width-height"   >          <a href="#initgraph-width-height" class="heading-link"><i class="fas fa-link"></i></a><a href="#initgraph-width-height" class="headerlink" title="initgraph(width,height)"></a>initgraph(width,height)</h3>      <p>&amp;emsp;&amp;emsp;用于初始化一个宽为width，高为height的绘图窗口<br>&amp;emsp;&amp;emsp;默认不会打开控制台，但如下填入第三个参数，可同时打开控制台，用于调试。<br>（比如给一个函数加上cout&lt;&lt;”success”,检测有没有调用这个函数）<br>initgraph(width,height,EW_SHOWCONSOLE)<br>&amp;emsp;&amp;emsp;第三个参数还可以填入其他值，详见<span class="exturl"><a class="exturl__link"   href="https://docs.easyx.cn/zh-cn/initgraph" >文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="cleardevice"   >          <a href="#cleardevice" class="heading-link"><i class="fas fa-link"></i></a><a href="#cleardevice" class="headerlink" title="cleardevice()"></a>cleardevice()</h3>      <p>&amp;emsp;&amp;emsp;使用当前背景色（默认为黑）清空绘图窗口。在显示新画面前一般都要调用这个函数</p>        <h3 id="loadimage-amp-img-T-“-x2F-image-png”"   >          <a href="#loadimage-amp-img-T-“-x2F-image-png”" class="heading-link"><i class="fas fa-link"></i></a><a href="#loadimage-amp-img-T-“-x2F-image-png”" class="headerlink" title="loadimage(&amp;img,_T(“.&#x2F;image.png”))"></a>loadimage(&amp;img,_T(“.&#x2F;image.png”))</h3>      <p>&amp;emsp;&amp;emsp;将图片加载到img(该变量名可以自定义)这个对象上。至少填入两个值，前一个为easyX的IMAGE类的对象（要传入其地址），后一个在引号内填图片的路径<br>&amp;emsp;&amp;emsp;IMAGE类是easyX这个库自带的对象，用于保存图片的各种数据。<br>&amp;emsp;&amp;emsp;其成员函数getwidth()&#x2F;getheight()返回图片的宽&#x2F;高<br>&amp;emsp;&amp;emsp;为了在其他电脑上也能正确找到图片地址，路径应使用相对路径</p>        <h3 id="putimage-x-y-amp-img"   >          <a href="#putimage-x-y-amp-img" class="heading-link"><i class="fas fa-link"></i></a><a href="#putimage-x-y-amp-img" class="headerlink" title="putimage(x,y,&amp;img)"></a>putimage(x,y,&amp;img)</h3>      <p>将先前加载的图片绘制到窗口上。参数为<strong>图像的左上角在窗口上对应的坐标</strong></p>        <h3 id="easyX的坐标系"   >          <a href="#easyX的坐标系" class="heading-link"><i class="fas fa-link"></i></a><a href="#easyX的坐标系" class="headerlink" title="easyX的坐标系"></a>easyX的坐标系</h3>      <p>需要注意的是，easyX的坐标系默认是以<strong>向右为正，向下为负，以窗口左上角为原点</strong>。且所有图片的定位都是看其左上角对应的坐标。<br>绘制图像时，坐标可以为负数或超出窗口的宽高，这样的话会绘制一半在窗口中，或完全不显示在窗口中。（但该图像依然存在）</p>        <h2 id="文件的结构"   >          <a href="#文件的结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件的结构" class="headerlink" title="文件的结构"></a>文件的结构</h2>      <p>和以往的作业不同，这是一个较大的项目。一方面，代码里包含了许多的类，另一方面，在程序本身之外还有图像等资源文件（统称为assets）。如果把所有类写在一个文件，改写的时候就非常难找，因此最好尝试把各个类分文件写<br>大致这样👇</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spacewar//根目录</span><br><span class="line">├── main.cpp</span><br><span class="line">└── player.cpp</span><br><span class="line">└── enemy.cpp</span><br><span class="line">└── images//文件夹，用于存放所有图像文件</span><br></pre></td></tr></table></div></figure><p>在包含另一文件时，有以下两种方法：</p><blockquote><p>#include &lt;graphics.h&gt; &#x2F;&#x2F;用尖括号表示优先查找系统文件<br>#include “player.cpp” &#x2F;&#x2F;用引号表示优先从当前文件夹查找，自己写的文件都最好用这个方法</p></blockquote>        <h2 id="游戏的架构"   >          <a href="#游戏的架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏的架构" class="headerlink" title="游戏的架构"></a>游戏的架构</h2>              <h3 id="外层结构"   >          <a href="#外层结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#外层结构" class="headerlink" title="外层结构"></a>外层结构</h3>      <p>要想做一个画面实时变化的游戏，就要像视频一样，以人眼难以分辨的频率去不断绘制画面，因此，程序的最简结构如下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">initgraph</span>();<span class="comment">//初始化绘图窗口</span></span><br><span class="line">init各种东西();</span><br><span class="line"><span class="comment">//初始化需要用到的所有变量，包括但不限于玩家飞机，敌人系统，分数，道具系统等等</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//游戏的主循环，每一轮循环都要画出所有元素，一次循环为一帧</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="主循环"   >          <a href="#主循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h3>      <p>虽然每个人做的游戏规则不同，但在主循环中，大致要做如下的事情（执行顺序要视情况调整）：</p><ul><li>判断玩家，敌人，子弹间的碰撞</li><li>按照一定频率生成敌人，道具等</li><li>接收玩家输入的操作，并处理结果</li><li>绘制玩家，敌人，子弹，分数等元素，同时处理移动</li><li>控制帧率</li></ul><p>其中控制帧率最简单的方法是在循环的结尾加Sleep()</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sleep</span>(time);<span class="comment">//需要头文件&lt;windows.h&gt;</span></span><br><span class="line"><span class="comment">//time为毫秒，例如time=33.3时，帧率(FPS)为30，即每秒刷新30次画面</span></span><br></pre></td></tr></table></div></figure><p>实际上在sleep()前执行函数的时间也要计算，但飞机大战这个规模还没有什么影响，就忽略不计了</p>        <h3 id="接收玩家指令的方式"   >          <a href="#接收玩家指令的方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#接收玩家指令的方式" class="headerlink" title="接收玩家指令的方式"></a>接收玩家指令的方式</h3>      <p>“_kbhit()”函数在用户按下按键时返回true，否则返回false<br>“_getch()”函数<strong>等待并返回</strong>用户按下按键的ASCII码<br>只使用_getch()，程序需要等待用户输入按键，也就会导致玩家不动，敌人也不动的现象。<br>这里专门给玩家设置一个执行指令的函数，是为了后续能清楚地分清与玩家相关的指令和不相关的指令。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> cmd = _getch();</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用玩家对象的command函数</span></span><br><span class="line"><span class="keyword">default</span>:Player.<span class="built_in">command</span>(cmd); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="试着先让自己的飞机动起来"   >          <a href="#试着先让自己的飞机动起来" class="heading-link"><i class="fas fa-link"></i></a><a href="#试着先让自己的飞机动起来" class="headerlink" title="试着先让自己的飞机动起来"></a>试着先让自己的飞机动起来</h3>      <p>我自己在写的时候也不是一次性就加入敌人，子弹等等内容，先别想那么多，让飞机在窗口上动起来🎵</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">player</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_x;</span><br><span class="line"><span class="type">int</span> m_y;</span><br><span class="line"><span class="type">int</span> m_speed;</span><br><span class="line">IMAGE m_img;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">player</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//载入图片</span></span><br><span class="line"><span class="built_in">loadimage</span>(&amp;m_img, _T(<span class="string">&quot;./images/player.png&quot;</span>));</span><br><span class="line"><span class="comment">//先随便给个值，但注意不要超出窗口大小！</span></span><br><span class="line">m_x=<span class="number">100</span>;</span><br><span class="line">m_y=<span class="number">100</span>;</span><br><span class="line">m_speed=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPlayer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制玩家的函数</span></span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_img,);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">command</span><span class="params">(<span class="type">char</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//执行玩家指令的函数</span></span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根据指令让对应坐标+或-速度</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:m_y-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:m_x-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:m_y+= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:m_x+= m_speed; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>将它放到main函数中：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">500</span>,<span class="number">800</span>);</span><br><span class="line">player Player;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cleardevice</span>();</span><br><span class="line">Player.<span class="built_in">drawPlayer</span>();</span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> cmd = _getch();</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">default</span>:Player.<span class="built_in">command</span>(cmd); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="设计类"   >          <a href="#设计类" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h2>      <p>以我的做法，最少需要4个类：玩家，子弹，敌人，敌群<br>其中【玩家，敌人，子弹】都有共通的属性：坐标，速度，宽高，因此可以继承自一个Object类。<br><strong>敌群</strong>这个类的作用，在于管理所有的敌人。因为所有的敌人都需要和玩家判断碰撞，并且在超出屏幕时及时删除<br>敌群类(enemies)和敌人类(enemy)不同于继承，叫做组合，是“A有B”的关系。</p>        <h4 id="object类"   >          <a href="#object类" class="heading-link"><i class="fas fa-link"></i></a><a href="#object类" class="headerlink" title="object类"></a>object类</h4>      <p>object基类很简洁，只需要记录几个必要信息，并做所有物体通用的碰撞检测</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">object</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_x;<span class="comment">//横坐标</span></span><br><span class="line"><span class="type">int</span> m_y;<span class="comment">//纵坐标</span></span><br><span class="line"><span class="type">int</span> m_width;<span class="comment">//图像宽度</span></span><br><span class="line"><span class="type">int</span> m_height;<span class="comment">//图像高度</span></span><br><span class="line"><span class="type">int</span> m_speed;<span class="comment">//速度</span></span><br><span class="line"><span class="type">int</span> map_width=<span class="number">550</span>;<span class="comment">//窗口宽度(用于判断越界)</span></span><br><span class="line"><span class="type">int</span> map_height=<span class="number">850</span>;<span class="comment">//窗口高度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//判断碰撞的函数，使用时传入子类指针就行。不用static其实也可以</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">isHit</span><span class="params">(object* ptr1,object* blt)</span></span>;</span><br></pre></td></tr></table></div></figure><p>※isHit()详见<span class="exturl"><a class="exturl__link"   href="https://ustb-lzm.gitee.io/ustb-lzm/2022/03/26/my-firstGame/" >第一次游戏制作</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="敌人类-amp-敌群类"   >          <a href="#敌人类-amp-敌群类" class="heading-link"><i class="fas fa-link"></i></a><a href="#敌人类-amp-敌群类" class="headerlink" title="敌人类&amp;敌群类"></a>敌人类&amp;敌群类</h4>      <p>敌人最少只要object所继承的属性外加一张图片就可以。<br>敌群要控制敌人的生成，</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">enemy</span>:<span class="keyword">public</span> object &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">enemies</span>;<span class="comment">//将权限给敌群类</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IMAGE m_img;<span class="comment">//用于保存敌机图片的IMAGE对象</span></span><br><span class="line">…………</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">enemies</span> &#123;</span><br><span class="line"><span class="type">int</span> enemyCount;<span class="comment">//记录敌人数量(但我并没用到)</span></span><br><span class="line"><span class="type">int</span> interval;<span class="comment">//敌人产生的间隔</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">enemy* ePtr[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//敌人类指针数组,上限为30个敌人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createEnemy</span><span class="params">()</span></span>;<span class="comment">//生成敌人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawEnemies</span><span class="params">()</span></span>;<span class="comment">//绘制所有敌人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteEnemies</span><span class="params">()</span></span>;<span class="comment">//删除死亡/超出屏幕的敌人</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isEnemiesHit</span><span class="params">()</span></span>;<span class="comment">//给每个敌人判断碰撞</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shoot</span><span class="params">()</span></span>;<span class="comment">//如果敌人可以发射子弹，最好在敌群类统一管理（要和玩家判断碰撞）</span></span><br></pre></td></tr></table></div></figure>        <h3 id="子弹类"   >          <a href="#子弹类" class="heading-link"><i class="fas fa-link"></i></a><a href="#子弹类" class="headerlink" title="子弹类"></a>子弹类</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bullet</span>:<span class="keyword">public</span> object &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IMAGE m_bullet;</span><br><span class="line"><span class="type">double</span> m_angle;<span class="comment">//发射角度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBullet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_bullet);</span><br><span class="line">m_x += m_speed * <span class="built_in">sin</span>(m_angle);<span class="comment">//所有子弹通用的移动，只需确定方向和速度</span></span><br><span class="line">m_y += m_speed * <span class="built_in">cos</span>(m_angle);<span class="comment">//但要注意x和y为整数，角度太细会丢失精度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOut</span><span class="params">()</span></span>;<span class="comment">//判断子弹是否超出屏幕</span></span><br></pre></td></tr></table></div></figure>        <h3 id="玩家类"   >          <a href="#玩家类" class="heading-link"><i class="fas fa-link"></i></a><a href="#玩家类" class="headerlink" title="玩家类"></a>玩家类</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">player</span>:<span class="keyword">public</span> object &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IMAGE m_img;</span><br><span class="line">bullet* m_blt[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shoot</span><span class="params">()</span></span>;<span class="comment">//发射子弹</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">command</span><span class="params">(<span class="type">char</span> cmd)</span></span>;<span class="comment">//接收指令</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judgeOverflow</span><span class="params">(<span class="type">char</span> cmd)</span></span>;<span class="comment">//移动时判断防止超出屏幕</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPlayerAndBullet</span><span class="params">()</span></span>;<span class="comment">//绘制玩家和子弹</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下详细的流程&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>第一次游戏制作</title>
    <link href="https://lzmustb.github.io/2022/03/26/my-firstGame/"/>
    <id>https://lzmustb.github.io/2022/03/26/my-firstGame/</id>
    <published>2022-03-26T04:11:19.000Z</published>
    <updated>2023-09-25T12:48:10.470Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;因学校程序设计课的作业要求，第一次游戏制作献给了飞机大战。一开始还嫌麻烦，但基本框架打好之后就得心应手了，开始添加各种元素，比玩游戏还上头🤩三天能交的作业硬是拖了一周。<br>&amp;emsp;&amp;emsp;本来还有各种主意想要实现，但再做下去也学不到什么新东西了，就暂且割爱了。</p><span id="more"></span>        <h2 id="起因"   >          <a href="#起因" class="heading-link"><i class="fas fa-link"></i></a><a href="#起因" class="headerlink" title="起因"></a>起因</h2>      <blockquote><p>游戏的编写能用到C++学习过程中的很多知识，数组、函数和面向对象。这个练习是一个开放式的练习，你可以在基本要求的基础上进行任何扩充。<br>游戏编写的基本要求，参看附件。</p><blockquote><p>扩充下游戏1定义的飞机大战游戏的功能：<br>增加多个界面，初始化界面，说明游戏功能；结束界面，提示用户的得分情况，以及是否开始一个新的游戏；<br>随着积分的增加，可以考虑增加难度，加快敌机的下落速度，和出现的速度；<br>功能上做更多的性能处理：例如防止玩家操控飞机飞出边界，击中&#x2F;碰撞检测的处理<br>增加按Esc键后游戏暂停的功能<br>增加图形界面（EasyX,Qt, MFC）以及面向对象的程序设计</p></blockquote></blockquote><blockquote><p>要求：提交完成一定功能或性能扩充后的源代码，以及一个word文档，说明你做的功能完善的目标，设计以及程序实现和测试效果。</p></blockquote><p>虽说是作业，但毕竟是值得纪念的第一作，因此我决定发挥自己目前最大水平做个完整的游戏。</p>        <h2 id="游戏下载"   >          <a href="#游戏下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏下载" class="headerlink" title="游戏下载"></a>游戏下载</h2>      <p>※有闲空的可以玩玩看，就是普通的飞机大战。<br>（Win10应该能正常运行，Win7没试过）</p><p>规则：</p><ul><li>wasd移动，空格切换子弹类型，q使用道具，esc暂停，道具只能存一个</li><li>敌人的血量，频率，移速会随着score增加而增加</li></ul><blockquote><p>链接：<span class="exturl"><a class="exturl__link"   href="https://pan.baidu.com/s/1iB6d0R82fL6XXXTTvJWdIA" >https://pan.baidu.com/s/1iB6d0R82fL6XXXTTvJWdIA</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>提取码：0519</p></blockquote>        <h2 id="游戏制作"   >          <a href="#游戏制作" class="heading-link"><i class="fas fa-link"></i></a><a href="#游戏制作" class="headerlink" title="游戏制作"></a>游戏制作</h2>              <h3 id="绘图库的选择"   >          <a href="#绘图库的选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#绘图库的选择" class="headerlink" title="绘图库的选择"></a>绘图库的选择</h3>      <p>&amp;emsp;&amp;emsp;使用的是<span class="exturl"><a class="exturl__link"   href="https://easyx.cn/" >EasyX</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,在上学期刚入门C++的时候正好用过就沿用了，简单易上手。</p>        <h3 id="文件结构"   >          <a href="#文件结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3>      <p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/image-20220326132332034.png" alt="image-20220326132332034"><br>图中父子结点表示class的继承关系（右继承左）<br>其中（itemSystem–itemBlock),(enemies–enemy)是友元关系</p><ul><li>enemies（敌群）用于初始化敌人的类型，速度等参数，并随着得分情况而改变产生敌人频率。</li><li>itemSystem作用和enemies相同，控制道具的生成类型和生成频率</li><li>object父类成员为所有和物体位置相关的变量，以及一个处理碰撞的函数</li><li>player包含一个bullet指针数组，用于一并管理玩家发出的所有子弹，方便和敌人进行碰撞判断(enemies同理)</li></ul>        <h3 id="操作输入结构"   >          <a href="#操作输入结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#操作输入结构" class="headerlink" title="操作输入结构"></a>操作输入结构</h3>      <p>这个方法一次只能接收一个指令，无法做到斜方向的丝滑移动。希望在今后的学习中找到改进方案</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断输入暂停还是玩家操作</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> cmd = _getch();</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">27</span>:<span class="built_in">systemPause</span>(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:p1.<span class="built_in">command</span>(cmd); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家操作输入（judgeOverflow用于判断玩家是否超出窗口）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">command</span><span class="params">(<span class="type">char</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeYOverflow</span>(cmd))m_y-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeXOverflow</span>(cmd))m_x-= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeYOverflow</span>(cmd))m_y+= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judgeXOverflow</span>(cmd))m_x+= m_speed; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="built_in">useItem</span>(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="comment">//实现在0~3号子弹发射模式中切换</span></span><br><span class="line">            bltType = ((bltType == <span class="number">3</span>) ? <span class="number">0</span> : bltType+<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-1-解决运行时闪屏问题"   >          <a href="#问题-1-解决运行时闪屏问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-1-解决运行时闪屏问题" class="headerlink" title="问题-1 解决运行时闪屏问题"></a>问题-1 解决运行时闪屏问题</h3>      <p>&amp;emsp;&amp;emsp;在绘制图像过多时，EasyX会出现不定时闪屏问题，为此需要使用批量绘图函数<br>详见：<span class="exturl"><a class="exturl__link"   href="https://docs.easyx.cn/zh-cn/BeginBatchDraw" >https://docs.easyx.cn/zh-cn/BeginBatchDraw</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BeginBatchDraw</span>();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//各种元素的绘制函数</span></span><br><span class="line"><span class="built_in">FlushBatchDraw</span>();<span class="comment">//将之前绘制的图像一并输出倒窗口上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">EndBatchDraw</span>();</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-2：对不规则物体判断碰撞"   >          <a href="#问题-2：对不规则物体判断碰撞" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-2：对不规则物体判断碰撞" class="headerlink" title="问题-2：对不规则物体判断碰撞"></a>问题-2：对不规则物体判断碰撞</h3>      <p>&amp;emsp;&amp;emsp;常规的判断碰撞就是用两物体的x,y,width,height比较，但由于子弹和飞船形状都不是矩形，使用上述方法会导致判定过于宽松，玩家死都不知道怎么死的🐕。</p><p>我的改进方案：<br>在常规判断法之外，利用EasyX库中getpixel()扫描子弹即将达到的位置区域内有没有背景色以外的颜色。这样的话就可以把误差减小到子弹的方格(大概3px内)</p><p>缺点：</p><ul><li>因判断条件，背景色不能过多(最终我的背景是双色)。</li><li>如果子弹面积过大的话边角误差也较大</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LzmUSTB/BlogImages/hitRange.png" alt="img"></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">isHit</span><span class="params">(object* ptr1,object* blt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr1 == <span class="number">0</span> || blt == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr1-&gt;m_x - blt-&gt;m_x &gt; blt-&gt;m_width || ptr1-&gt;m_x+(ptr1-&gt;m_width)&lt;blt-&gt;m_x)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr1-&gt;m_y - blt-&gt;m_y &gt; blt-&gt;m_height || ptr1-&gt;m_y+(ptr1-&gt;m_height)&lt; blt-&gt;m_y)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; blt-&gt;m_width;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; blt-&gt;m_height; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getpixel</span>(blt-&gt;m_x + i, blt-&gt;m_y + j) != BLACK</span><br><span class="line">                   &amp;&amp; <span class="built_in">getpixel</span>(blt-&gt;m_x + i, blt-&gt;m_y + j) != <span class="number">0x000033</span>)</span><br><span class="line">&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-3：无法输出透明图片"   >          <a href="#问题-3：无法输出透明图片" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-3：无法输出透明图片" class="headerlink" title="问题-3：无法输出透明图片"></a>问题-3：无法输出透明图片</h3>      <p>&amp;emsp;&amp;emsp;EasyX不支持输出带Alpha通道的png图片，但在游戏进行时会出现很多元素重叠的情况，为了防止图片的黑边挡住下面的图片，需要做透明化处理<br>解决方案：利用三元光栅操作，对图片进行位运算<br>详见：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/q781634081/article/details/108107639" >https://blog.csdn.net/q781634081/article/details/108107639</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="built_in">loadimage</span>(&amp;m_img, _T(<span class="string">&quot;./images/enemy_normal.png&quot;</span>));</span><br><span class="line"><span class="built_in">loadimage</span>(&amp;m_alpha, _T(<span class="string">&quot;./images/enemy__normal_alpha.png&quot;</span>));</span><br><span class="line"><span class="comment">//输出图片</span></span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_alpha, SRCAND);</span><br><span class="line"><span class="built_in">putimage</span>(m_x, m_y, &amp;m_img, SRCPAINT);</span><br></pre></td></tr></table></div></figure>        <h3 id="问题-4：窗口大小受系统设置影响，显示不全"   >          <a href="#问题-4：窗口大小受系统设置影响，显示不全" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题-4：窗口大小受系统设置影响，显示不全" class="headerlink" title="问题-4：窗口大小受系统设置影响，显示不全"></a>问题-4：窗口大小受系统设置影响，显示不全</h3>      <p>&amp;emsp;&amp;emsp;在打包游戏发给室友测试的时候，发现游戏窗口的大小和预想中的不一样，原因是显示设置中修改了缩放比例。为了在不同缩放比例的电脑上都能正常显示，使用了以下方式。</p><p>详见<span class="exturl"><a class="exturl__link"   href="https://codebus.cn/yangw/dpi-awareness" >创建一个不受系统缩放设置（DPI）影响的绘图窗口 - CodeBus</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WINVER 0x0A00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WIN32_WINNT 0x0A00</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ShellScalingApi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Shcore.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SetProcessDpiAwareness</span>(PROCESS_PER_MONITOR_DPI_AWARE);  </span><br></pre></td></tr></table></div></figure>        <h2 id="心得"   >          <a href="#心得" class="heading-link"><i class="fas fa-link"></i></a><a href="#心得" class="headerlink" title="心得"></a>心得</h2>      <p>&amp;emsp;&amp;emsp;生涯第一次制作完整的游戏，还是非常兴奋的。此前一直想学Unity，但作为计算机专业还是要加强底层设计能力。耗时一周，共900多行代码，虽然对我来说算是一次不小的挑战，但跟独立游戏的规模比起来，还是“路漫漫其修远兮，任重而道远。”【By初中物理老师<br>&amp;emsp;&amp;emsp;除了代码之外，图像制作也是一大麻烦事，而且技术要求也不低。本次游戏只有爆炸效果有3帧的动画，其他元素都是一图流🏳</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;因学校程序设计课的作业要求，第一次游戏制作献给了飞机大战。一开始还嫌麻烦，但基本框架打好之后就得心应手了，开始添加各种元素，比玩游戏还上头🤩三天能交的作业硬是拖了一周。&lt;br&gt;&amp;amp;emsp;&amp;amp;emsp;本来还有各种主意想要实现，但再做下去也学不到什么新东西了，就暂且割爱了。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏制作" scheme="https://lzmustb.github.io/categories/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="大学生活" scheme="https://lzmustb.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    <category term="游戏" scheme="https://lzmustb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="编程" scheme="https://lzmustb.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++" scheme="https://lzmustb.github.io/tags/C/"/>
    
  </entry>
  
</feed>
